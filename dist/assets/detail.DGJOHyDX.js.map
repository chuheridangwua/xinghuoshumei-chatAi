{"version":3,"file":"detail.DGJOHyDX.js","sources":["../../src/app/dataset/detail.vue"],"sourcesContent":["<template>\n    <div class=\"dataset-detail-container\">\n        <t-breadcrumb class=\"breadcrumb\">\n            <t-breadcrumb-item @click=\"backToList\">知识库列表</t-breadcrumb-item>\n            <t-breadcrumb-item>知识库文档</t-breadcrumb-item>\n        </t-breadcrumb>\n\n        <t-card title=\"文档列表\" class=\"document-list-card\">\n            <template #actions>\n                <t-button theme=\"primary\" @click=\"uploadDocument\">上传文档</t-button>\n            </template>\n\n            <t-loading :loading=\"loading\">\n                <div v-if=\"documentList.length > 0\" class=\"debug-info\">\n                    已加载 {{ documentList.length }} 条记录\n                </div>\n                \n                <t-table \n                    :data=\"documentList\" \n                    :columns=\"columns\" \n                    row-key=\"id\"\n                    stripe\n                    hover\n                    :pagination=\"pagination\"\n                    @page-change=\"onPaginationChange\" \n                    empty=\"暂无文档\"\n                >\n                    <template #statusCol=\"{ row }\">\n                        <div class=\"status-wrapper\">\n                            <t-loading v-if=\"isProcessingStatus(row.display_status)\" size=\"small\" :loading=\"true\" />\n                            <t-tag :theme=\"getStatusTag(row.display_status).theme\">\n                                {{ getStatusTag(row.display_status).text }}\n                            </t-tag>\n                            <t-progress \n                                v-if=\"isProcessingStatus(row.display_status) && processingDocuments[row.id] && processingDocuments[row.id].total_segments > 0\"\n                                theme=\"line\"\n                                size=\"small\"\n                                :percentage=\"calculateProgress(processingDocuments[row.id])\"\n                                :label=\"false\"\n                                class=\"status-progress\"\n                            />\n                        </div>\n                    </template>\n                    <template #createdAtCol=\"{ row }\">\n                        {{ formatDate(row.created_at) }}\n                    </template>\n                </t-table>\n            </t-loading>\n        </t-card>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, ref, onUnmounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { MessagePlugin } from 'tdesign-vue-next';\nimport { getDocumentList, getDocumentIndexingStatus } from '/static/app/api/dataset.js';\n\nconst route = useRoute();\nconst router = useRouter();\nconst datasetId = ref(route.params.id);\nconst loading = ref(true);\nconst documentList = ref([]);\nconst pagination = ref({\n    current: 1,\n    pageSize: 10,\n    total: 0\n});\n\n// 处理中文档的状态\nconst processingDocuments = ref({});\nconst statusCheckInterval = ref(null);\n\n// 格式化日期\nconst formatDate = (timestamp) => {\n    if (!timestamp) return '';\n    const date = new Date(timestamp * 1000);\n    return date.toLocaleString();\n};\n\n// 判断是否为处理中状态\nconst isProcessingStatus = (status) => {\n    return ['waiting', 'queuing', 'indexing'].includes(status);\n};\n\n// 定义表格列\nconst columns = [\n    { colKey: 'index', title: '序号', width: '80', cell: (h, { rowIndex }) => (pagination.value.current - 1) * pagination.value.pageSize + rowIndex + 1 },\n    { colKey: 'name', title: '文档名称' },\n    { colKey: 'display_status', title: '状态', cell: 'statusCol', width: '180' },\n    { colKey: 'word_count', title: '字数' },\n    { colKey: 'created_at', title: '创建时间', cell: 'createdAtCol' }\n];\n\n// 获取文档列表\nconst fetchDocumentList = async () => {\n    loading.value = true;\n    try {\n        const response = await getDocumentList(datasetId.value, {\n            page: pagination.value.current,\n            limit: pagination.value.pageSize\n        });\n\n        // 确保数据是数组\n        if (Array.isArray(response.data)) {\n            documentList.value = response.data;\n        } else if (response.data) {\n            documentList.value = [response.data];\n        } else {\n            documentList.value = [];\n        }\n\n        pagination.value.total = response.total || 0;\n        console.log('获取到文档列表:', documentList.value);\n        \n        // 检查处理中的文档\n        checkProcessingDocuments();\n    } catch (error) {\n        console.error('获取文档列表失败:', error);\n        MessagePlugin.error('获取文档列表失败');\n        documentList.value = [];\n    } finally {\n        loading.value = false;\n    }\n};\n\n// 检查处理中的文档\nconst checkProcessingDocuments = () => {\n    // 清理之前的状态检查\n    if (statusCheckInterval.value) {\n        clearInterval(statusCheckInterval.value);\n    }\n    \n    // 筛选出处理中的文档\n    const processingDocs = documentList.value.filter(doc => isProcessingStatus(doc.display_status));\n    \n    if (processingDocs.length > 0) {\n        // 立即检查一次\n        processingDocs.forEach(doc => {\n            if (doc.batch) {\n                checkDocumentStatus(doc.id, doc.batch);\n            }\n        });\n        \n        // 设置定时检查\n        statusCheckInterval.value = setInterval(() => {\n            let hasProcessing = false;\n            \n            documentList.value.forEach(doc => {\n                if (isProcessingStatus(doc.display_status) && doc.batch) {\n                    checkDocumentStatus(doc.id, doc.batch);\n                    hasProcessing = true;\n                }\n            });\n            \n            // 如果没有正在处理的文档，停止检查\n            if (!hasProcessing) {\n                clearInterval(statusCheckInterval.value);\n            }\n        }, 500); // 更新间隔为0.5秒\n    }\n};\n\n// 检查单个文档状态\nconst checkDocumentStatus = async (docId, batch) => {\n    try {\n        const response = await getDocumentIndexingStatus(datasetId.value, batch);\n        if (response && response.data && response.data.length > 0) {\n            const status = response.data[0];\n            \n            // 更新处理状态\n            processingDocuments.value[docId] = status;\n            \n            // 如果状态已变化，刷新列表\n            if (status.indexing_status === 'completed' || status.indexing_status === 'error') {\n                // 给状态变化一点延迟，确保后端状态已更新\n                setTimeout(() => {\n                    fetchDocumentList();\n                }, 1000);\n            }\n        }\n    } catch (error) {\n        console.error('获取文档处理状态失败:', error);\n    }\n};\n\n// 计算进度百分比\nconst calculateProgress = (statusData) => {\n    if (!statusData || !statusData.total_segments || statusData.total_segments === 0) {\n        return 0;\n    }\n    return Math.floor((statusData.completed_segments / statusData.total_segments) * 100);\n};\n\n// 获取文档状态标签\nconst getStatusTag = (status) => {\n    const statusMap = {\n        waiting: { text: '等待中', theme: 'warning' },\n        indexing: { text: '处理中', theme: 'primary' },\n        completed: { text: '已完成', theme: 'success' },\n        error: { text: '错误', theme: 'danger' },\n        queuing: { text: '排队中', theme: 'warning' }\n    };\n\n    return statusMap[status] || { text: status, theme: 'default' };\n};\n\n// 分页变化\nconst onPaginationChange = (pageInfo) => {\n    pagination.value.current = pageInfo.current;\n    pagination.value.pageSize = pageInfo.pageSize;\n    fetchDocumentList();\n};\n\n// 上传文档\nconst uploadDocument = () => {\n    router.push(`/app/dataset/upload/${datasetId.value}`);\n};\n\n// 返回列表\nconst backToList = () => {\n    router.push('/app/dataset');\n};\n\n// 初始化加载\nonMounted(() => {\n    fetchDocumentList();\n});\n\n// 组件卸载时清理\nonUnmounted(() => {\n    if (statusCheckInterval.value) {\n        clearInterval(statusCheckInterval.value);\n    }\n});\n</script>\n\n<style lang=\"scss\">\n@import '/static/app/styles/variables.scss';\n\n.dataset-detail-container {\n    padding: $comp-paddingTB-l $comp-paddingLR-l;\n}\n\n.breadcrumb {\n    margin-bottom: $comp-margin-m;\n}\n\n.document-list-card {\n    margin-bottom: $comp-margin-m;\n}\n\n.debug-info {\n    margin-bottom: 10px;\n    color: #999;\n    font-size: 12px;\n}\n\n.status-wrapper {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    min-width: 150px; // 确保有足够空间显示进度条\n    \n    .t-tag {\n        flex-shrink: 0; // 防止标签被压缩\n    }\n\n    .status-progress {\n        flex-grow: 1; // 让进度条填充剩余空间\n    }\n}\n</style>"],"names":["route","useRoute","router","useRouter","datasetId","ref","loading","documentList","pagination","processingDocuments","statusCheckInterval","formatDate","timestamp","isProcessingStatus","status","columns","h","rowIndex","fetchDocumentList","response","getDocumentList","checkProcessingDocuments","error","MessagePlugin","processingDocs","doc","checkDocumentStatus","hasProcessing","docId","batch","getDocumentIndexingStatus","calculateProgress","statusData","getStatusTag","onPaginationChange","pageInfo","uploadDocument","backToList","onMounted","onUnmounted"],"mappings":"4UA0DA,MAAMA,EAAQC,EAAS,EACjBC,EAASC,EAAU,EACnBC,EAAYC,EAAIL,EAAM,OAAO,EAAE,EAC/BM,EAAUD,EAAI,EAAI,EAClBE,EAAeF,EAAI,EAAE,EACrBG,EAAaH,EAAI,CACnB,QAAS,EACT,SAAU,GACV,MAAO,CAAA,CACV,EAGKI,EAAsBJ,EAAI,EAAE,EAC5BK,EAAsBL,EAAI,IAAI,EAG9BM,EAAcC,GACXA,EACQ,IAAI,KAAKA,EAAY,GAAI,EAC1B,eAAe,EAFJ,GAMrBC,EAAsBC,GACjB,CAAC,UAAW,UAAW,UAAU,EAAE,SAASA,CAAM,EAIvDC,EAAU,CACZ,CAAE,OAAQ,QAAS,MAAO,KAAM,MAAO,KAAM,KAAM,CAACC,EAAG,CAAE,SAAAC,CAAS,KAAOT,EAAW,MAAM,QAAU,GAAKA,EAAW,MAAM,SAAWS,EAAW,CAAE,EAClJ,CAAE,OAAQ,OAAQ,MAAO,MAAO,EAChC,CAAE,OAAQ,iBAAkB,MAAO,KAAM,KAAM,YAAa,MAAO,KAAM,EACzE,CAAE,OAAQ,aAAc,MAAO,IAAK,EACpC,CAAE,OAAQ,aAAc,MAAO,OAAQ,KAAM,cAAe,CAChE,EAGMC,EAAoB,SAAY,CAClCZ,EAAQ,MAAQ,GACZ,GAAA,CACA,MAAMa,EAAW,MAAMC,EAAgBhB,EAAU,MAAO,CACpD,KAAMI,EAAW,MAAM,QACvB,MAAOA,EAAW,MAAM,QAAA,CAC3B,EAGG,MAAM,QAAQW,EAAS,IAAI,EAC3BZ,EAAa,MAAQY,EAAS,KACvBA,EAAS,KACHZ,EAAA,MAAQ,CAACY,EAAS,IAAI,EAEnCZ,EAAa,MAAQ,CAAC,EAGfC,EAAA,MAAM,MAAQW,EAAS,OAAS,EACnC,QAAA,IAAI,WAAYZ,EAAa,KAAK,EAGjBc,EAAA,QACpBC,EAAO,CACJ,QAAA,MAAM,YAAaA,CAAK,EAChCC,EAAc,MAAM,UAAU,EAC9BhB,EAAa,MAAQ,CAAC,CAAA,QACxB,CACED,EAAQ,MAAQ,EAAA,CAExB,EAGMe,EAA2B,IAAM,CAE/BX,EAAoB,OACpB,cAAcA,EAAoB,KAAK,EAIrC,MAAAc,EAAiBjB,EAAa,MAAM,UAAcM,EAAmBY,EAAI,cAAc,CAAC,EAE1FD,EAAe,OAAS,IAExBA,EAAe,QAAeC,GAAA,CACtBA,EAAI,OACgBC,EAAAD,EAAI,GAAIA,EAAI,KAAK,CACzC,CACH,EAGmBf,EAAA,MAAQ,YAAY,IAAM,CAC1C,IAAIiB,EAAgB,GAEPpB,EAAA,MAAM,QAAekB,GAAA,CAC1BZ,EAAmBY,EAAI,cAAc,GAAKA,EAAI,QAC1BC,EAAAD,EAAI,GAAIA,EAAI,KAAK,EACrBE,EAAA,GACpB,CACH,EAGIA,GACD,cAAcjB,EAAoB,KAAK,GAE5C,GAAG,EAEd,EAGMgB,EAAsB,MAAOE,EAAOC,IAAU,CAC5C,GAAA,CACA,MAAMV,EAAW,MAAMW,EAA0B1B,EAAU,MAAOyB,CAAK,EACvE,GAAIV,GAAYA,EAAS,MAAQA,EAAS,KAAK,OAAS,EAAG,CACjD,MAAAL,EAASK,EAAS,KAAK,CAAC,EAGVV,EAAA,MAAMmB,CAAK,EAAId,GAG/BA,EAAO,kBAAoB,aAAeA,EAAO,kBAAoB,UAErE,WAAW,IAAM,CACKI,EAAA,GACnB,GAAI,CACX,QAECI,EAAO,CACJ,QAAA,MAAM,cAAeA,CAAK,CAAA,CAE1C,EAGMS,EAAqBC,GACnB,CAACA,GAAc,CAACA,EAAW,gBAAkBA,EAAW,iBAAmB,EACpE,EAEJ,KAAK,MAAOA,EAAW,mBAAqBA,EAAW,eAAkB,GAAG,EAIjFC,EAAgBnB,IACA,CACd,QAAS,CAAE,KAAM,MAAO,MAAO,SAAU,EACzC,SAAU,CAAE,KAAM,MAAO,MAAO,SAAU,EAC1C,UAAW,CAAE,KAAM,MAAO,MAAO,SAAU,EAC3C,MAAO,CAAE,KAAM,KAAM,MAAO,QAAS,EACrC,QAAS,CAAE,KAAM,MAAO,MAAO,SAAU,CAC7C,GAEiBA,CAAM,GAAK,CAAE,KAAMA,EAAQ,MAAO,SAAU,EAI3DoB,EAAsBC,GAAa,CAC1B3B,EAAA,MAAM,QAAU2B,EAAS,QACzB3B,EAAA,MAAM,SAAW2B,EAAS,SACnBjB,EAAA,CACtB,EAGMkB,EAAiB,IAAM,CACzBlC,EAAO,KAAK,uBAAuBE,EAAU,KAAK,EAAE,CACxD,EAGMiC,EAAa,IAAM,CACrBnC,EAAO,KAAK,cAAc,CAC9B,EAGA,OAAAoC,EAAU,IAAM,CACMpB,EAAA,CAAA,CACrB,EAGDqB,EAAY,IAAM,CACV7B,EAAoB,OACpB,cAAcA,EAAoB,KAAK,CAC3C,CACH"}