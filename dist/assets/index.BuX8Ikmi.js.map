{"version":3,"file":"index.BuX8Ikmi.js","sources":["../../src/utils/excelHandler.js","../../src/app/test/index.vue"],"sourcesContent":["/**\n * Excel文件处理工具\n * 提供Excel文件的读取、解析和输出功能\n * 使用Web Worker实现大文件的后台处理\n */\n\n// 从XLSX库切换为ExcelJS\nimport * as ExcelJS from 'exceljs';\n\n// Worker实例缓存\nlet worker = null;\n\n/**\n * 获取Excel处理Worker实例\n * @returns {Worker} Worker实例\n */\nfunction getWorker() {\n  if (!worker) {\n    // 创建新的Worker实例 (使用ES模块类型)\n    const workerURL = new URL('./excelWorker.js', import.meta.url);\n    worker = new Worker(workerURL, { type: 'module' });\n  }\n  return worker;\n}\n\n/**\n * 使用Worker读取Excel文件并解析内容\n * @param {File} file - 要解析的Excel文件对象\n * @param {Object} options - 分块选项\n * @param {Function} progressCallback - 进度回调函数\n * @returns {Promise} - 返回包含解析结果的Promise\n */\nexport const parseExcelFileWithWorker = (file, options = {}, progressCallback = null) => {\n  return new Promise((resolve, reject) => {\n    // 验证文件类型\n    const isExcel = /\\.(xlsx|xls)$/i.test(file.name);\n    if (!isExcel) {\n      reject(new Error('只能上传Excel文件(.xlsx, .xls格式)'));\n      return;\n    }\n    \n    const worker = getWorker();\n    \n    // 监听Worker消息\n    const messageHandler = (e) => {\n      const data = e.data;\n      \n      switch (data.type) {\n        case 'start':\n          if (progressCallback) progressCallback({ phase: 'start', progress: 0 });\n          break;\n          \n        case 'sheetInfo':\n          if (progressCallback) progressCallback({ \n            phase: 'sheetInfo', \n            progress: 10, \n            sheetNames: data.sheetNames,\n            totalSheets: data.totalSheets\n          });\n          break;\n        \n        case 'progress':\n          if (progressCallback) progressCallback({ \n            phase: data.phase, \n            progress: data.progress \n          });\n          break;\n        \n        case 'sheetProcessed':\n          if (progressCallback) progressCallback({ \n            phase: 'sheetProcessed', \n            progress: data.progress,\n            sheetName: data.sheetName,\n            totalRows: data.totalRows,\n            blockCount: data.blockCount\n          });\n          break;\n        \n        case 'complete':\n          // 移除消息监听器，避免内存泄漏\n          worker.removeEventListener('message', messageHandler);\n          resolve(data.result);\n          break;\n        \n        case 'error':\n          // 移除消息监听器，避免内存泄漏\n          worker.removeEventListener('message', messageHandler);\n          reject(new Error(data.message));\n          break;\n      }\n    };\n    \n    // 添加消息监听器\n    worker.addEventListener('message', messageHandler);\n    \n    // 发送解析命令到Worker\n    worker.postMessage({ \n      action: 'parse', \n      file,\n      options: {\n        maxBlocks: options.maxBlocks || 100,\n        minBlockSize: options.minBlockSize || 1000,\n        overlapRows: options.overlapRows || 10\n      }\n    });\n  });\n};\n\n/**\n * 读取Excel文件并解析内容 (后向兼容原函数)\n * @param {File} file - 要解析的Excel文件对象\n * @returns {Promise} - 返回包含解析结果的Promise\n */\nexport const parseExcelFile = (file, progressCallback = null) => {\n  // 小于10MB的文件使用原来的方法，大文件使用Worker方法\n  if (file.size < 10 * 1024 * 1024) {\n    return parseExcelFileDirectly(file);\n  } else {\n    return parseExcelFileWithWorker(file, {}, progressCallback);\n  }\n};\n\n/**\n * 直接在主线程读取Excel文件 (适用于小文件)\n * @param {File} file - 要解析的Excel文件对象\n * @returns {Promise} - 返回包含解析结果的Promise\n */\nexport const parseExcelFileDirectly = (file) => {\n  return new Promise((resolve, reject) => {\n    // 验证文件类型\n    const isExcel = /\\.(xlsx|xls)$/i.test(file.name);\n    if (!isExcel) {\n      reject(new Error('只能上传Excel文件(.xlsx, .xls格式)'));\n      return;\n    }\n\n    // 读取文件内容\n    const reader = new FileReader();\n    \n    reader.onload = async (e) => {\n      try {\n        // 使用ExcelJS替代XLSX\n        const workbook = new ExcelJS.Workbook();\n        const buffer = e.target.result;\n        \n        // 加载工作簿\n        await workbook.xlsx.load(buffer);\n        \n        // 读取所有工作表\n        const sheets = {};\n        const sheetNames = workbook.worksheets.map(sheet => sheet.name);\n        \n        // 处理每个工作表\n        workbook.worksheets.forEach(worksheet => {\n          const sheetName = worksheet.name;\n          const jsonData = worksheetToJson(worksheet);\n          sheets[sheetName] = jsonData;\n        });\n        \n        // 构造返回结果\n        const result = {\n          fileName: file.name,\n          sheets: sheets,\n          totalSheets: sheetNames.length,\n          sheetNames: sheetNames,\n          // 默认使用第一个工作表数据\n          data: sheets[sheetNames[0]] || [],\n          totalRows: sheets[sheetNames[0]]?.length || 0,\n          // 获取第一个工作表的列名（如果存在数据）\n          columns: sheets[sheetNames[0]]?.length > 0 \n            ? Object.keys(sheets[sheetNames[0]][0] || {}) \n            : []\n        };\n        \n        resolve(result);\n      } catch (error) {\n        reject(new Error(`解析Excel文件失败: ${error.message}`));\n      }\n    };\n    \n    reader.onerror = () => {\n      reject(new Error('读取文件时发生错误'));\n    };\n    \n    reader.readAsArrayBuffer(file);\n  });\n};\n\n/**\n * 将ExcelJS工作表转换为JSON对象数组\n * @param {Worksheet} worksheet - ExcelJS工作表\n * @returns {Array} JSON对象数组\n */\nfunction worksheetToJson(worksheet) {\n  // 获取表头（第一行）\n  const headerRow = worksheet.getRow(1);\n  const headers = [];\n  \n  headerRow.eachCell({ includeEmpty: false }, (cell, colNumber) => {\n    headers[colNumber - 1] = cell.value?.toString() || `Column${colNumber}`;\n  });\n  \n  // 初始化结果数组\n  const jsonData = [];\n  \n  // 从第二行开始遍历数据行\n  worksheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {\n    // 跳过表头\n    if (rowNumber === 1) return;\n    \n    const rowData = {};\n    \n    // 处理每个单元格\n    row.eachCell({ includeEmpty: true }, (cell, colNumber) => {\n      const header = headers[colNumber - 1] || `Column${colNumber}`;\n      \n      // 根据单元格类型处理值\n      let value = null;\n      \n      if (cell.value !== null && cell.value !== undefined) {\n        if (cell.value.text) { // 富文本\n          value = cell.value.text;\n        } else if (cell.value.formula) { // 公式\n          value = cell.value.result;\n        } else if (cell.type === ExcelJS.ValueType.Date) { // 日期\n          value = cell.value.toISOString();\n        } else {\n          value = cell.value;\n        }\n      }\n      \n      rowData[header] = value;\n    });\n    \n    // 添加到结果数组\n    jsonData.push(rowData);\n  });\n  \n  return jsonData;\n}\n\n/**\n * 将Excel数据分块处理\n * @param {Array} data - Excel数据数组 \n * @param {Object} options - 分块选项\n * @param {number} options.maxBlocks - 最大分块数量，默认100\n * @param {number} options.minBlockSize - 最小块大小，默认1000\n * @param {number} options.overlapRows - 块之间的重叠行数，默认10\n * @returns {Array} - 返回分块后的数据\n */\nexport const splitDataIntoBlocks = (data, options = {}) => {\n  if (!data || !Array.isArray(data)) {\n    return [];\n  }\n  \n  const totalRows = data.length;\n  const maxBlocks = options.maxBlocks || 100;\n  const minBlockSize = options.minBlockSize || 1000;\n  const overlapRows = options.overlapRows || 10;\n  \n  // 计算理想块大小\n  const idealBlockSize = Math.max(minBlockSize, Math.ceil(totalRows / maxBlocks));\n  \n  // 计算实际块数\n  const actualBlockCount = Math.min(maxBlocks, Math.ceil(totalRows / idealBlockSize));\n  \n  // 计算每块实际大小（不含重叠部分）\n  const actualBlockSize = Math.ceil(totalRows / actualBlockCount);\n  \n  const blocks = [];\n  \n  // 生成数据块\n  for (let i = 0; i < actualBlockCount; i++) {\n    // 计算块的原始起止索引（不含重叠区域）\n    const originalStartIndex = i * actualBlockSize;\n    const originalEndIndex = Math.min(totalRows - 1, (i + 1) * actualBlockSize - 1);\n    \n    // 计算块的实际起止索引（含重叠区域）\n    const startIndex = Math.max(0, originalStartIndex - (i > 0 ? overlapRows : 0));\n    const endIndex = Math.min(totalRows - 1, originalEndIndex + (i < actualBlockCount - 1 ? overlapRows : 0));\n    \n    // 提取数据块\n    const blockData = data.slice(startIndex, endIndex + 1);\n    \n    // 创建块信息\n    blocks.push({\n      blockId: i,\n      originalStartIndex,\n      originalEndIndex,\n      startIndex,\n      endIndex,\n      size: blockData.length,\n      originalSize: originalEndIndex - originalStartIndex + 1,\n      hasOverlapTop: i > 0,\n      hasOverlapBottom: i < actualBlockCount - 1,\n      data: blockData\n    });\n  }\n  \n  return blocks;\n};\n\n/**\n * 获取特定数据块\n * @param {Object} excelData - Excel数据对象\n * @param {string} sheetName - 工作表名称\n * @param {number} blockId - 块ID\n * @returns {Promise} - 返回包含数据块的Promise\n */\nexport const getBlockDataWithWorker = (excelData, sheetName, blockId) => {\n  return new Promise((resolve, reject) => {\n    const worker = getWorker();\n    \n    const messageHandler = (e) => {\n      const data = e.data;\n      \n      if (data.type === 'blockData' && data.blockId === blockId && data.sheetName === sheetName) {\n        worker.removeEventListener('message', messageHandler);\n        resolve(data.data);\n      } else if (data.type === 'error' && data.blockId === blockId && data.sheetName === sheetName) {\n        worker.removeEventListener('message', messageHandler);\n        reject(new Error(data.message));\n      }\n    };\n    \n    worker.addEventListener('message', messageHandler);\n    \n    worker.postMessage({\n      action: 'getBlockData',\n      result: excelData,\n      sheetName,\n      blockId\n    });\n  });\n};\n\n/**\n * 在控制台输出Excel数据\n * @param {Object} excelData - parseExcelFile返回的Excel数据对象\n * @param {Object} options - 输出选项\n * @param {boolean} options.showAllSheets - 是否显示所有工作表数据\n * @param {boolean} options.verbose - 是否显示详细信息\n * @param {boolean} options.useBlocks - 是否使用分块处理\n * @param {Object} options.blockOptions - 分块选项\n */\nexport const logExcelData = (excelData, options = {}) => {\n  const { \n    showAllSheets = false, \n    verbose = true, \n    useBlocks = true,\n    blockOptions = {\n      maxBlocks: 100,\n      minBlockSize: 1000,\n      overlapRows: 10\n    }\n  } = options;\n  \n  console.group(`===== Excel文件 \"${excelData.fileName}\" 数据 =====`);\n  \n  // 输出基本信息\n  console.log(`文件名: ${excelData.fileName}`);\n  console.log(`工作表数量: ${excelData.totalSheets}`);\n  console.log(`工作表列表: ${excelData.sheetNames.join(', ')}`);\n  \n  if (verbose) {\n    // 输出默认工作表的列名\n    console.log(`默认工作表(${excelData.sheetNames[0]})列名:`, excelData.columns);\n    \n    // 输出行数\n    console.log(`默认工作表(${excelData.sheetNames[0]})行数: ${excelData.totalRows}`);\n  }\n  \n  // 获取默认工作表数据\n  const defaultSheetData = excelData.data;\n  \n  // 是否有分块信息\n  if (excelData.blocks && excelData.blocks.length > 0) {\n    console.log(`数据已分为 ${excelData.blocks.length} 个数据块 (Worker处理)`);\n    \n    // 输出分块信息\n    excelData.blocks.slice(0, 5).forEach(block => {\n      console.group(`数据块 #${block.blockId + 1} (${block.size}行, 原始${block.originalSize}行)`);\n      console.log(`索引范围: ${block.startIndex} - ${block.endIndex} (原始: ${block.originalStartIndex} - ${block.originalEndIndex})`);\n      \n      if (block.hasOverlapTop) {\n        console.log(`上方重叠区: ${block.startIndex} - ${block.originalStartIndex - 1} (${block.originalStartIndex - block.startIndex}行)`);\n      }\n      \n      if (block.hasOverlapBottom) {\n        console.log(`下方重叠区: ${block.originalEndIndex + 1} - ${block.endIndex} (${block.endIndex - block.originalEndIndex}行)`);\n      }\n      \n      // 输出数据内容示例（如果有）\n      if (block.sampleData && block.sampleData.length > 0) {\n        console.log(`数据块内容示例:`);\n        console.table(block.sampleData);\n      }\n      \n      console.groupEnd();\n    });\n    \n    if (excelData.blocks.length > 5) {\n      console.log(`... 还有 ${excelData.blocks.length - 5} 个数据块 ...`);\n    }\n  }\n  // 是否使用分块处理\n  else if (useBlocks && defaultSheetData && defaultSheetData.length > 0) {\n    const blocks = splitDataIntoBlocks(defaultSheetData, blockOptions);\n    \n    console.log(`数据已分为 ${blocks.length} 个数据块:`);\n    \n    // 输出分块信息\n    blocks.slice(0, 5).forEach(block => {\n      console.group(`数据块 #${block.blockId + 1} (${block.size}行, 原始${block.originalSize}行)`);\n      console.log(`索引范围: ${block.startIndex} - ${block.endIndex} (原始: ${block.originalStartIndex} - ${block.originalEndIndex})`);\n      \n      if (block.hasOverlapTop) {\n        console.log(`上方重叠区: ${block.startIndex} - ${block.originalStartIndex - 1} (${block.originalStartIndex - block.startIndex}行)`);\n      }\n      \n      if (block.hasOverlapBottom) {\n        console.log(`下方重叠区: ${block.originalEndIndex + 1} - ${block.endIndex} (${block.endIndex - block.originalEndIndex}行)`);\n      }\n      \n      // 输出数据内容（限制显示）\n      console.log(`数据块内容示例 (前5行):`);\n      console.table(block.data.slice(0, 5));\n      \n      if (block.data.length > 10) {\n        console.log(`... 中间省略 ${block.data.length - 10} 行 ...`);\n        console.log(`数据块内容示例 (后5行):`);\n        console.table(block.data.slice(-5));\n      } else if (block.data.length > 5) {\n        console.log(`数据块内容示例 (后${block.data.length - 5}行):`);\n        console.table(block.data.slice(5));\n      }\n      \n      console.groupEnd();\n    });\n    \n    if (blocks.length > 5) {\n      console.log(`... 还有 ${blocks.length - 5} 个数据块 ...`);\n    }\n  } else {\n    // 不分块，直接输出默认工作表的数据\n    if (defaultSheetData && defaultSheetData.length > 0) {\n      console.log(`默认工作表(${excelData.sheetNames[0]})数据:`);\n      console.table(defaultSheetData.slice(0, 100)); // 限制显示前100行，避免数据过多\n    } else {\n      console.log(`默认工作表没有数据或数据未加载`);\n    }\n  }\n  \n  // 如果showAllSheets为true且有多个工作表，输出所有工作表的数据\n  if (showAllSheets && excelData.totalSheets > 1) {\n    excelData.sheetNames.slice(1).forEach(sheetName => {\n      console.group(`工作表: ${sheetName}`);\n      \n      // 检查是否有工作表数据\n      if (excelData.sheets && excelData.sheets[sheetName]) {\n        const sheetData = excelData.sheets[sheetName];\n        const totalRows = Array.isArray(sheetData) ? sheetData.length : \n                         (sheetData.totalRows || 0);\n        \n        console.log(`行数: ${totalRows}`);\n        \n        if (totalRows > 0) {\n          if (verbose) {\n            const columns = Array.isArray(sheetData) && sheetData.length > 0 ? \n                          Object.keys(sheetData[0]) : [];\n            console.log('列名:', columns);\n          }\n          \n          // 检查工作表是否有自己的分块信息\n          if (sheetData.blocks && sheetData.blocks.length > 0) {\n            console.log(`此工作表已分为 ${sheetData.blocks.length} 个数据块`);\n            if (sheetData.blocks[0].sampleData) {\n              console.log(`第一个数据块内容示例:`);\n              console.table(sheetData.blocks[0].sampleData);\n            }\n          } \n          // 检查是否有实际数据\n          else if (Array.isArray(sheetData) && sheetData.length > 0) {\n            if (useBlocks && sheetData.length > blockOptions.minBlockSize) {\n              console.log(`此工作表数据量较大，使用分块显示...`);\n              const sheetBlocks = splitDataIntoBlocks(sheetData, blockOptions);\n              console.log(`已分为 ${sheetBlocks.length} 个数据块`);\n              console.log(`第一个数据块内容示例:`);\n              console.table(sheetBlocks[0].data.slice(0, 5));\n            } else {\n              console.table(sheetData.slice(0, 100));\n            }\n          }\n        } else {\n          console.log('此工作表没有数据');\n        }\n      } else {\n        console.log('此工作表数据未加载');\n      }\n      \n      console.groupEnd();\n    });\n  }\n  \n  console.groupEnd();\n  \n  return excelData;\n};\n\n/**\n * 获取特定工作表的数据\n * @param {Object} excelData - parseExcelFile返回的Excel数据对象\n * @param {string} sheetName - 工作表名称\n * @returns {Array} - 返回指定工作表的数据\n */\nexport const getSheetData = (excelData, sheetName) => {\n  if (!excelData.sheets[sheetName]) {\n    console.warn(`工作表 \"${sheetName}\" 不存在`);\n    return [];\n  }\n  return excelData.sheets[sheetName];\n};\n\n/**\n * 获取数据块\n * @param {Array} data - 完整数据数组\n * @param {number} blockIndex - 块索引\n * @param {Object} options - 分块选项\n * @returns {Object} - 返回指定的数据块\n */\nexport const getDataBlock = (data, blockIndex, options = {}) => {\n  const blocks = splitDataIntoBlocks(data, options);\n  return blockIndex >= 0 && blockIndex < blocks.length ? blocks[blockIndex] : null;\n};\n\n/**\n * 销毁Worker\n * 在不再需要时调用，释放资源\n */\nexport const destroyWorker = () => {\n  if (worker) {\n    worker.terminate();\n    worker = null;\n  }\n};\n\nexport default {\n  parseExcelFile,\n  parseExcelFileWithWorker,\n  logExcelData,\n  getSheetData,\n  splitDataIntoBlocks,\n  getDataBlock,\n  getBlockDataWithWorker,\n  destroyWorker\n}; ","<template>\r\n    <div class=\"excel-container\">\r\n        <h1>Excel文件上传与内容展示</h1>\r\n\r\n        <TUpload \r\n            accept=\".xlsx, .xls\" \r\n            :auto-upload=\"false\"\r\n            @change=\"handleFileChange\" \r\n            theme=\"file\"\r\n            :multiple=\"false\"\r\n            draggable\r\n            :disabled=\"isProcessing\"\r\n        >\r\n            <TButton theme=\"primary\" :loading=\"isProcessing\">\r\n                {{ isProcessing ? '正在处理...' : '点击或拖拽上传Excel文件' }}\r\n            </TButton>\r\n        </TUpload>\r\n\r\n        <div v-if=\"isProcessing\" class=\"processing-info\">\r\n            <div class=\"progress-header\">\r\n                <span class=\"phase-text\">{{ processingPhase }}</span>\r\n                <span class=\"progress-percent\">{{ progress }}%</span>\r\n            </div>\r\n            <TProgress :percentage=\"progress\" :color=\"{ from: '#108ee9', to: '#87d068' }\" />\r\n            <div v-if=\"processingMessage\" class=\"processing-message\">{{ processingMessage }}</div>\r\n        </div>\r\n\r\n        <div v-if=\"fileName\" class=\"file-info\">\r\n            <div class=\"basic-info\">\r\n                <strong>文件名:</strong> {{ fileName }}\r\n                <span v-if=\"fileSize\" class=\"file-size\">({{ formatFileSize(fileSize) }})</span>\r\n            </div>\r\n            <div class=\"excel-info\">\r\n                <div>已解析 {{ rowCount }} 条数据，共 {{ totalSheets }} 个工作表</div>\r\n                <div v-if=\"sheetNames.length > 0\" class=\"sheet-list\">\r\n                    <strong>工作表:</strong> {{ sheetNames.join(', ') }}\r\n                </div>\r\n            </div>\r\n\r\n            <div v-if=\"blocks.length > 0\" class=\"blocks-info\">\r\n                <h3>数据分块信息 ({{ blocks.length }}块)</h3>\r\n                <div class=\"blocks-summary\">\r\n                    每块大小: 约{{ blockSizeInfo.avgBlockSize }}行 \r\n                    (最小: {{ blockSizeInfo.minBlockSize }}行, \r\n                    最大: {{ blockSizeInfo.maxBlockSize }}行)\r\n                </div>\r\n                <div class=\"block-list\">\r\n                    <div \r\n                        v-for=\"(block, index) in blocksPreview\" \r\n                        :key=\"index\" \r\n                        class=\"block-item\"\r\n                    >\r\n                        <div class=\"block-header\">\r\n                            <strong>块 #{{ block.blockId + 1 }}</strong>\r\n                            <span class=\"block-size\">{{ block.size }}行</span>\r\n                        </div>\r\n                        <div class=\"block-range\">\r\n                            索引范围: {{ block.startIndex }} - {{ block.endIndex }}\r\n                        </div>\r\n                        <div v-if=\"block.hasOverlapTop || block.hasOverlapBottom\" class=\"block-overlap\">\r\n                            <div v-if=\"block.hasOverlapTop\">\r\n                                上方重叠: {{ block.originalStartIndex - block.startIndex }}行\r\n                            </div>\r\n                            <div v-if=\"block.hasOverlapBottom\">\r\n                                下方重叠: {{ block.endIndex - block.originalEndIndex }}行\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div v-if=\"blocks.length > blocksPreview.length\" class=\"more-blocks\">\r\n                        ... 还有 {{ blocks.length - blocksPreview.length }} 个数据块 ...\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"memory-management\">\r\n                <TButton theme=\"default\" size=\"small\" @click=\"clearMemory\" :disabled=\"isProcessing\">\r\n                    清理内存\r\n                </TButton>\r\n                <span class=\"tip\">上传大文件后可点击此按钮释放内存</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onUnmounted } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport { Upload as TUpload, Button as TButton, Progress as TProgress } from 'tdesign-vue-next';\r\nimport { parseExcelFile, logExcelData, splitDataIntoBlocks, destroyWorker } from '../../utils/excelHandler';\r\n\r\n// 数据统计\r\nconst fileName = ref('');\r\nconst fileSize = ref(0);\r\nconst rowCount = ref(0);\r\nconst totalSheets = ref(0);\r\nconst sheetNames = ref<string[]>([]);\r\nconst blocks = ref<any[]>([]);\r\n\r\n// 处理状态\r\nconst isProcessing = ref(false);\r\nconst progress = ref(0);\r\nconst processingPhase = ref('');\r\nconst processingMessage = ref('');\r\n\r\n// 分块配置\r\nconst blockOptions = {\r\n    maxBlocks: 100,        // 最大分块数量\r\n    minBlockSize: 1000,    // 最小块大小\r\n    overlapRows: 10        // 重叠行数\r\n};\r\n\r\n// 仅在界面上显示前5个数据块\r\nconst blocksPreview = computed(() => {\r\n    return blocks.value.slice(0, 5);\r\n});\r\n\r\n// 计算数据块大小统计信息\r\nconst blockSizeInfo = computed(() => {\r\n    if (blocks.value.length === 0) {\r\n        return { minBlockSize: 0, maxBlockSize: 0, avgBlockSize: 0 };\r\n    }\r\n    \r\n    const sizes = blocks.value.map(block => block.size);\r\n    const minBlockSize = Math.min(...sizes);\r\n    const maxBlockSize = Math.max(...sizes);\r\n    const avgBlockSize = Math.round(sizes.reduce((sum, size) => sum + size, 0) / sizes.length);\r\n    \r\n    return { minBlockSize, maxBlockSize, avgBlockSize };\r\n});\r\n\r\n// 格式化文件大小显示\r\nconst formatFileSize = (bytes: number) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n\r\n// 更新处理进度\r\nconst updateProgress = (data: any) => {\r\n    progress.value = data.progress || 0;\r\n    \r\n    switch (data.phase) {\r\n        case 'start':\r\n            processingPhase.value = '开始处理...';\r\n            processingMessage.value = '正在准备读取文件';\r\n            break;\r\n        case 'sheetInfo':\r\n            processingPhase.value = '读取文件结构';\r\n            processingMessage.value = `发现 ${data.totalSheets} 个工作表`;\r\n            break;\r\n        case 'loading':\r\n            processingPhase.value = '加载文件内容';\r\n            processingMessage.value = '正在读取Excel数据';\r\n            break;\r\n        case 'parsing':\r\n            processingPhase.value = '解析Excel数据';\r\n            processingMessage.value = '正在转换为JSON格式';\r\n            break;\r\n        case 'sheetProcessed':\r\n            processingPhase.value = '处理工作表';\r\n            processingMessage.value = `工作表 \"${data.sheetName}\" 已处理，包含 ${data.totalRows} 行数据，分为 ${data.blockCount} 个数据块`;\r\n            break;\r\n        default:\r\n            processingPhase.value = '处理中...';\r\n            processingMessage.value = '';\r\n    }\r\n};\r\n\r\n// 处理文件变更\r\nconst handleFileChange = async (files: any) => {\r\n    if (!files || !files.length || !files[0]) {\r\n        return;\r\n    }\r\n\r\n    const file = files[0].raw || files[0];\r\n    \r\n    if (!file || !(file instanceof File)) {\r\n        message.error('无法获取有效的文件对象');\r\n        return;\r\n    }\r\n    \r\n    // 记录文件大小\r\n    fileSize.value = file.size;\r\n    \r\n    // 检查文件大小\r\n    if (file.size > 100 * 1024 * 1024) { // 大于100MB给予警告\r\n        const confirm = window.confirm(`文件大小为 ${formatFileSize(file.size)}，处理可能需要较长时间，确定继续吗？`);\r\n        if (!confirm) return;\r\n    }\r\n    \r\n    // 设置处理状态\r\n    isProcessing.value = true;\r\n    progress.value = 0;\r\n    processingPhase.value = '准备处理...';\r\n    processingMessage.value = '';\r\n    \r\n    try {\r\n        // 使用excelHandler解析Excel文件\r\n        const excelData = await parseExcelFile(file, updateProgress);\r\n        \r\n        // 更新组件状态\r\n        fileName.value = excelData.fileName;\r\n        rowCount.value = excelData.totalRows;\r\n        totalSheets.value = excelData.totalSheets;\r\n        sheetNames.value = excelData.sheetNames;\r\n        \r\n        // 获取分块信息\r\n        if (excelData.blocks) {\r\n            // 直接使用Worker返回的分块信息\r\n            blocks.value = excelData.blocks;\r\n        } else if (excelData.data && excelData.data.length > 0) {\r\n            // 执行数据分块\r\n            blocks.value = splitDataIntoBlocks(excelData.data, blockOptions);\r\n        } else {\r\n            blocks.value = [];\r\n        }\r\n        \r\n        // 输出到控制台\r\n        logExcelData(excelData, { \r\n            showAllSheets: true,\r\n            useBlocks: true,\r\n            blockOptions\r\n        });\r\n        \r\n        message.success(`文件 \"${file.name}\" 已成功解析，共 ${excelData.totalRows} 条数据，分为 ${blocks.value.length} 个数据块`);\r\n        \r\n        // 大文件处理完成后提示用户可以释放内存\r\n        if (file.size > 50 * 1024 * 1024) {\r\n            setTimeout(() => {\r\n                message.info('提示：处理完成后，您可以点击\"清理内存\"按钮释放资源');\r\n            }, 2000);\r\n        }\r\n    } catch (error) {\r\n        message.error(error.message || '解析Excel文件失败');\r\n        console.error('解析Excel文件出错:', error);\r\n    } finally {\r\n        // 重置处理状态\r\n        isProcessing.value = false;\r\n    }\r\n};\r\n\r\n// 清理内存\r\nconst clearMemory = () => {\r\n    try {\r\n        // 清空大型数据引用\r\n        blocks.value = [];\r\n        \r\n        // 销毁Worker\r\n        destroyWorker();\r\n        \r\n        // 强制垃圾回收（如果浏览器支持）\r\n        if (window.gc) window.gc();\r\n        \r\n        message.success('内存已清理');\r\n    } catch (error) {\r\n        message.error('内存清理失败');\r\n        console.error('内存清理错误:', error);\r\n    }\r\n};\r\n\r\n// 组件卸载时清理资源\r\nonUnmounted(() => {\r\n    destroyWorker();\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.excel-container {\r\n    padding: 20px;\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.processing-info {\r\n    margin: 16px 0;\r\n    padding: 10px;\r\n    border-radius: 4px;\r\n    background-color: #f9f9f9;\r\n}\r\n\r\n.progress-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-bottom: 8px;\r\n}\r\n\r\n.phase-text {\r\n    font-weight: bold;\r\n    color: #333;\r\n}\r\n\r\n.progress-percent {\r\n    color: #108ee9;\r\n}\r\n\r\n.processing-message {\r\n    margin-top: 8px;\r\n    font-size: 12px;\r\n    color: #888;\r\n}\r\n\r\n.file-info {\r\n    margin: 16px 0;\r\n    font-size: 14px;\r\n    color: #666;\r\n}\r\n\r\n.file-size {\r\n    margin-left: 6px;\r\n    color: #999;\r\n    font-size: 12px;\r\n}\r\n\r\n.basic-info {\r\n    margin-bottom: 8px;\r\n}\r\n\r\n.excel-info {\r\n    margin-top: 8px;\r\n    color: #1890ff;\r\n    font-weight: bold;\r\n}\r\n\r\n.sheet-list {\r\n    margin-top: 4px;\r\n    font-size: 12px;\r\n    color: #666;\r\n    font-weight: normal;\r\n}\r\n\r\n.blocks-info {\r\n    margin-top: 24px;\r\n    padding: 16px;\r\n    border: 1px solid #f0f0f0;\r\n    border-radius: 4px;\r\n    background-color: #fafafa;\r\n}\r\n\r\n.blocks-info h3 {\r\n    margin: 0 0 12px 0;\r\n    font-size: 16px;\r\n    color: #444;\r\n}\r\n\r\n.blocks-summary {\r\n    margin-bottom: 16px;\r\n    color: #666;\r\n    font-size: 13px;\r\n}\r\n\r\n.block-list {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n    gap: 12px;\r\n}\r\n\r\n.block-item {\r\n    padding: 10px;\r\n    background-color: #fff;\r\n    border: 1px solid #e8e8e8;\r\n    border-radius: 4px;\r\n    font-size: 12px;\r\n}\r\n\r\n.block-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 6px;\r\n    font-size: 13px;\r\n}\r\n\r\n.block-size {\r\n    color: #1890ff;\r\n    font-weight: bold;\r\n}\r\n\r\n.block-range {\r\n    color: #666;\r\n    margin-bottom: 4px;\r\n}\r\n\r\n.block-overlap {\r\n    color: #999;\r\n    font-size: 11px;\r\n    margin-top: 6px;\r\n}\r\n\r\n.more-blocks {\r\n    grid-column: 1 / -1;\r\n    text-align: center;\r\n    padding: 10px;\r\n    color: #999;\r\n    font-style: italic;\r\n}\r\n\r\n.memory-management {\r\n    margin-top: 20px;\r\n    padding: 10px;\r\n    background-color: #f0f9ff;\r\n    border: 1px dashed #d9f2ff;\r\n    border-radius: 4px;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.tip {\r\n    margin-left: 12px;\r\n    font-size: 12px;\r\n    color: #888;\r\n}\r\n\r\nh1 {\r\n    margin-bottom: 24px;\r\n    color: #1890ff;\r\n}\r\n</style>\r\n"],"names":["worker","getWorker","workerURL","parseExcelFileWithWorker","file","options","progressCallback","resolve","reject","messageHandler","data","parseExcelFile","parseExcelFileDirectly","reader","e","workbook","ExcelJS.Workbook","buffer","sheets","sheetNames","sheet","worksheet","sheetName","jsonData","worksheetToJson","result","_a","_b","error","headerRow","headers","cell","colNumber","row","rowNumber","rowData","header","value","ExcelJS.ValueType","splitDataIntoBlocks","totalRows","maxBlocks","minBlockSize","overlapRows","idealBlockSize","actualBlockCount","actualBlockSize","blocks","i","originalStartIndex","originalEndIndex","startIndex","endIndex","blockData","logExcelData","excelData","showAllSheets","verbose","useBlocks","blockOptions","defaultSheetData","block","sheetData","columns","sheetBlocks","destroyWorker","fileName","ref","fileSize","rowCount","totalSheets","isProcessing","progress","processingPhase","processingMessage","blocksPreview","computed","blockSizeInfo","sizes","maxBlockSize","avgBlockSize","sum","size","formatFileSize","bytes","k","updateProgress","handleFileChange","files","message","clearMemory","onUnmounted"],"mappings":"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"}