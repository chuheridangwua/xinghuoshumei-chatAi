import{c as $,A as v}from"./index.D657WQOy.js";import"./vendor.CamtBdHc.js";import"./index.aq3X53NA.js";const j=async(r={},o="streaming",t={})=>{try{const s=t.userId||"default-user",p=t.workflowId||"",W=$("/workflows/run"),m={inputs:r,response_mode:o,user:s};console.log("[Workflow] 开始执行工作流:",{inputs:r,responseMode:o,userId:s});const d=await fetch(W,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${v.apiKey}`},body:JSON.stringify(m),signal:t.signal});if(!d.ok)throw new Error(`工作流请求失败: ${d.status}`);return d}catch(s){throw console.error("执行工作流失败:",s),s}},a=async(r,o={})=>{var E;const{onStart:t,onNodeStart:s,onNodeFinish:p,onFinish:W,onOutput:m,onError:d,onComplete:n,onTTSMessage:T,onTTSMessageEnd:A}=o;try{if(r.signal&&r.signal.aborted){console.log("[Workflow] 请求已中断"),n==null||n(!1,"请求已中断");return}const i=await r;if(!i.ok){const w=await i.text();throw console.error("[Workflow] API请求失败:",i.status,w),new Error(`API请求失败: ${i.status} ${w}`)}console.log("[Workflow] 开始处理流式响应");const I=i.body.getReader(),l=new TextDecoder;let y="",f=null,u=null;try{for(;;){if(r.signal&&r.signal.aborted){console.log("[Workflow] 检测到请求中断信号，停止处理流");break}const{done:w,value:O}=await I.read();if(w){console.log("[Workflow] 流读取完成");break}y+=l.decode(O,{stream:!0});const F=y.split(`

`);y=F.pop()||"";for(const x of F)if(!(!x.trim()||!x.startsWith("data: ")))try{const e=JSON.parse(x.substring(6));e.workflow_run_id&&!f&&(f=e.workflow_run_id),e.task_id&&!u&&(u=e.task_id,o.onTaskIdChange&&o.onTaskIdChange(u)),e.event==="workflow_started"?(console.log("%c[Workflow] 收到工作流开始事件: workflow_started","color: #4CAF50; font-weight: bold;"),t==null||t(e.data)):e.event==="node_started"?(console.log("%c[Workflow] 收到节点开始事件: node_started","color: #4CAF50; font-weight: bold;"),console.log("%c[Workflow Node Started]","color: #2196F3; font-weight: bold;",{title:(E=e.data)==null?void 0:E.title}),s==null||s(e.data)):e.event==="node_finished"?(console.log("%c[Workflow] 收到节点完成事件: node_finished","color: #4CAF50; font-weight: bold;"),p==null||p(e.data)):e.event==="workflow_finished"?(console.log("%c[Workflow] 收到工作流完成事件: workflow_finished","color: #4CAF50; font-weight: bold;"),W==null||W(e.data),e.data&&e.data.outputs&&(m==null||m(e.data.outputs))):e.event==="tts_message"?(console.log("%c[Workflow] 收到TTS事件: tts_message","color: #4CAF50; font-weight: bold;"),T==null||T(e)):e.event==="tts_message_end"?(console.log("%c[Workflow] 收到TTS结束事件: tts_message_end","color: #4CAF50; font-weight: bold;"),A==null||A(e)):e.event==="error"?(console.error("%c[Workflow] 收到错误事件: error","color: #F44336; font-weight: bold;",e),d==null||d(e.message||"工作流处理错误")):e.event==="ping"&&console.log("%c[Workflow] 收到ping事件","color: #607D8B; font-style: italic;")}catch(e){console.error("%c[Workflow] 解析流数据失败:","color: #F44336; font-weight: bold;",e)}}}catch(w){console.error("[Workflow] 流处理过程中出错:",w);const O=w.message||"";if(w.name==="AbortError"||O.includes("aborted")||O.includes("abort")){console.log("[Workflow] 请求被中断"),n==null||n(!1,"请求处理过程已中断");return}throw w}finally{try{I.releaseLock(),console.log("[Workflow] 读取器已释放")}catch(w){console.warn("[Workflow] 释放读取锁时出错:",w)}}console.log("[Workflow] 流处理完成"),n==null||n(!0)}catch(i){console.error("[Workflow] 流式请求错误:",i),i.name==="AbortError"||i.message.includes("aborted")?(console.log("[Workflow] 请求中断错误"),n==null||n(!1,"请求已中断")):(console.error("[Workflow] 请求失败错误"),d==null||d(i.message||"请求失败"),n==null||n(!1,i.message))}},z=async(r={},o={},t={})=>{var s,p,W,m,d,n,T,A,E,i,I;try{const l=t.userId||"default-user",y=t.responseMode||"streaming";console.log("[Workflow] 开始工作流请求",{inputs:r,userId:l,responseMode:y,hasSignal:!!t.signal});const f=j(r,y,{userId:l,signal:t.signal});if(y==="blocking"){const w=await(await f).json();return(p=o.onOutput)==null||p.call(o,(s=w.data)==null?void 0:s.outputs),(W=o.onComplete)==null||W.call(o,!0),{success:!0,data:w}}try{return console.log("[Workflow] 开始处理流式响应"),await a(f,o),console.log("[Workflow] 流式响应处理成功"),{success:!0}}catch(u){return console.error("[Workflow] 流处理过程中出错:",u),u.name==="AbortError"||(m=u.message)!=null&&m.includes("aborted")?(console.log("[Workflow] 流处理被中断"),(d=o.onComplete)==null||d.call(o,!1,"请求已中断"),{success:!1,aborted:!0,error:u}):(console.error("[Workflow] 流处理失败:",u.message||"未知错误"),(n=o.onError)==null||n.call(o,u.message||"流处理失败"),(T=o.onComplete)==null||T.call(o,!1,u.message),{success:!1,error:u})}}catch(l){return console.error("[Workflow] 工作流请求错误:",l),l.name==="AbortError"||(A=l.message)!=null&&A.includes("aborted")?(console.log("[Workflow] 工作流请求被中断"),(E=o.onComplete)==null||E.call(o,!1,"请求已中断"),{success:!1,aborted:!0,error:l}):(console.error("[Workflow] 工作流请求失败:",l.message||"未知错误"),(i=o.onError)==null||i.call(o,l.message||"请求失败"),(I=o.onComplete)==null||I.call(o,!1,l.message),{success:!1,error:l})}},K=async(r,o="default-user")=>{try{if(!r)throw new Error("任务ID不能为空");const t=$(`/workflows/tasks/${r}/stop`),s=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${v.apiKey}`},body:JSON.stringify({user:o})});if(!s.ok)throw new Error(`停止工作流请求失败: ${s.status}`);return await s.json()}catch(t){throw console.error("停止工作流执行失败:",t),t}},N=async(r,o={},t={})=>{var s,p,W,m,d,n,T,A,E,i,I,l,y;try{const f=t.userId||"default-user",u=t.responseMode||"streaming",w="app-6aRhLAp4zAppCJus5ViMgOsh",O={content:r};console.log("[WorkflowTitle] 开始执行标题生成工作流:",{contentLength:r.length,responseMode:u,userId:f});const F=$("/workflows/run"),x={inputs:O,response_mode:u,user:f};console.log("[WorkflowTitle] 发送工作流请求:",{url:F.toString(),workflowApiKey:w.substring(0,10)+"...",requestBody:x});const e=await fetch(F,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${w}`},body:JSON.stringify(x),signal:t.signal});if(!e.ok){const g=await e.text();throw console.error("[WorkflowTitle] 请求失败:",e.status,g),new Error(`标题生成工作流请求失败: ${e.status} - ${g}`)}if(u==="blocking"){const g=await e.json();console.log("[WorkflowTitle] 收到阻塞模式响应:",g);let h=((p=(s=g.data)==null?void 0:s.outputs)==null?void 0:p.text)||"";return h=S(h),console.log("[WorkflowTitle] 最终生成的标题:",h),h?(W=o.onOutput)==null||W.call(o,{text:h}):(console.warn("[WorkflowTitle] 未从响应中找到有效标题"),(m=o.onError)==null||m.call(o,"未能生成有效标题")),(d=o.onComplete)==null||d.call(o,!0),{success:!0,data:g,title:h}}try{console.log("[WorkflowTitle] 开始处理流式响应");const g={...o,onOutput:h=>{var _;let C=h.text||"";C=S(C),console.log("[WorkflowTitle] 获得过滤后的标题:",C),C&&((_=o.onOutput)==null||_.call(o,{text:C}))},onFinish:h=>{var C;if(o.onFinish&&o.onFinish(h),h&&h.outputs&&h.outputs.text){let _=h.outputs.text;_=S(_),_&&_!==h.outputs.text&&(console.log("[WorkflowTitle] 工作流完成后过滤标题:",_),(C=o.onOutput)==null||C.call(o,{text:_}))}}};return await a(e,g),console.log("[WorkflowTitle] 流式响应处理成功"),{success:!0}}catch(g){return console.error("[WorkflowTitle] 流处理过程中出错:",g),g.name==="AbortError"||(n=g.message)!=null&&n.includes("aborted")?(console.log("[WorkflowTitle] 流处理被中断"),(T=o.onComplete)==null||T.call(o,!1,"请求已中断"),{success:!1,aborted:!0,error:g}):(console.error("[WorkflowTitle] 流处理失败:",g.message||"未知错误"),(A=o.onError)==null||A.call(o,g.message||"标题生成失败"),(E=o.onComplete)==null||E.call(o,!1,g.message),{success:!1,error:g})}}catch(f){return console.error("[WorkflowTitle] 标题生成请求错误:",f),f.name==="AbortError"||(i=f.message)!=null&&i.includes("aborted")?(console.log("[WorkflowTitle] 标题生成请求被中断"),(I=o.onComplete)==null||I.call(o,!1,"请求已中断"),{success:!1,aborted:!0,error:f}):(console.error("[WorkflowTitle] 标题生成请求失败:",f.message||"未知错误"),(l=o.onError)==null||l.call(o,f.message||"请求失败"),(y=o.onComplete)==null||y.call(o,!1,f.message),{success:!1,error:f})}};function S(r){if(!r)return"";const o=/<think>[\s\S]*?<\/think>/;return r=r.replace(o,""),r=r.trim(),console.log("[WorkflowTitle] 过滤后的标题:",r),r}export{z as executeWorkflow,N as generateArticleTitle,a as handleWorkflowStreamResponse,j as runWorkflow,K as stopWorkflowExecution};
//# sourceMappingURL=workflow.CFoIiyDn.js.map
