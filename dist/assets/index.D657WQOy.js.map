{"version":3,"mappings":";gVAQY,MAACA,EAAa,CACtB,QAAS,yBACT,eAAgB,+BAChB,cAAe,mCACf,OAAQ,CAAC,CACL,GAAI,cACJ,KAAM,cACN,OAAQ,8BAChB,EAAO,CACC,GAAI,cACJ,KAAM,oBACN,OAAQ,8BAChB,CAAQ,EACJ,aAAc,cACd,OAAQ,+BAKR,mBAAoB,WACxB,EAQaC,GAAe,CAACC,EAAMC,IAAkB,CAEjD,MAAMC,EAAY,GADeJ,EAAW,OAChB,GAAGE,CAAI,GAEnC,OADsBE,EAAU,WAAW,SAAS,GAAKA,EAAU,WAAW,UAAU,EACjE,IAAI,IAAIA,CAAS,EAAI,IAAI,IAAIA,EAAW,OAAO,SAAS,MAAM,CACzF,EAqDaC,GAAcC,GAAW,CAClC,MAAMC,EAAQP,EAAW,OAAO,KAAKQ,GAAKA,EAAE,KAAOF,CAAO,EAC1D,OAAKC,GAMLP,EAAW,aAAeM,EAC1BN,EAAW,OAASO,EAAM,OAE1B,QAAQ,IAAI,SAAUA,EAAM,IAAI,EACzBP,IATH,QAAQ,MAAM,YAAaM,CAAO,EAC3B,KASf,EChGaG,GAAe,IAAM,CAG9B,MAAMC,EADY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAChC,IAAI,QAAQ,EAGxC,GAAIA,EAEA,oBAAa,QAAQ,eAAgBA,CAAS,EACvCA,EAIX,IAAIC,EAAS,aAAa,QAAQ,cAAc,EAChD,OAAKA,IAEDA,EAAS,QAAU,KAAK,OAAQ,EAAC,SAAS,EAAE,EAAE,UAAU,EAAG,EAAE,EAC7D,aAAa,QAAQ,eAAgBA,CAAM,GAExCA,CACX,EAUaC,GAAyB,MAAMC,EAAU,KAAO,CACzD,GAAI,CACA,MAAMF,EAASF,GAAc,EAGvBK,EAAMb,GAAa,gBAAgB,EAGzCa,EAAI,aAAa,OAAO,OAAQH,CAAM,EAGlCE,EAAQ,SACRC,EAAI,aAAa,OAAO,UAAWD,EAAQ,OAAO,EAGlDA,EAAQ,OACRC,EAAI,aAAa,OAAO,QAASD,EAAQ,KAAK,EAG9CA,EAAQ,SACRC,EAAI,aAAa,OAAO,UAAWD,EAAQ,OAAO,EAGtD,MAAME,EAAW,MAAM,MAAMD,EAAK,CAC9B,OAAQ,MACR,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAUd,EAAW,MAAM,EAC5D,CACA,CAAS,EAED,GAAI,CAACe,EAAS,GAAI,CACd,MAAMC,EAAY,MAAMD,EAAS,KAAM,EACvC,MAAM,IAAI,MAAM,aAAaA,EAAS,MAAM,IAAIC,CAAS,EAAE,CACvE,CAEQ,MAAMC,EAAO,MAAMF,EAAS,KAAM,EAGlC,OAAIE,GAAQ,MAAM,QAAQA,EAAK,IAAI,GAC/BA,EAAK,KAAK,KAAK,CAACC,EAAGC,IAAM,CACrB,MAAMC,EAAQ,IAAI,KAAKF,EAAE,YAAc,CAAC,EAExC,OADc,IAAI,KAAKC,EAAE,YAAc,CAAC,EACzBC,CAC/B,CAAa,EAGEH,EAAK,MAAQ,CAAE,CACzB,OAAQI,EAAO,CACZ,eAAQ,MAAM,YAAaA,CAAK,EACzB,CAAE,CACjB,CACA,EAOMC,GAA0BC,GAAY,CACxC,GAAI,CAACA,EAAS,MAAO,CAAE,QAAS,GAAI,UAAW,EAAI,EAGnD,MAAMC,EAAkB,UAClBC,EAAgB,WACtB,IAAIC,EAAY,GACZC,EAAmBJ,EAEvB,GAAIA,EAAQ,SAASC,CAAe,GAAKD,EAAQ,SAASE,CAAa,EACnE,GAAI,CAEA,MAAMG,EAAaL,EAAQ,MAAM,4BAA4B,EACzDK,GAAcA,EAAW,CAAC,IAC1BF,EAAYE,EAAW,CAAC,EAAE,KAAM,GAIpCD,EAAmBJ,EAAQ,QAAQ,2BAA4B,EAAE,EAAE,KAAM,CAC5E,OAAQF,EAAO,CACZ,QAAQ,MAAM,aAAcA,CAAK,EAEjCM,EAAmBJ,CAC/B,CAGI,MAAO,CACH,QAASI,EACT,UAAWD,CACd,CACL,EAWaG,GAA+B,MAAMC,EAAgBjB,EAAU,KAAO,CAC/E,GAAI,CAACiB,EACD,MAAO,CAAE,EAGb,GAAI,CACA,MAAMnB,EAASF,GAAc,EAGvB,CAAE,KAAAsB,EAAO,EAAG,SAAAC,EAAW,EAAI,EAAGnB,EAG9BC,EAAMb,GAAa,WAAW,EACpCa,EAAI,aAAa,OAAO,kBAAmBgB,CAAc,EACzDhB,EAAI,aAAa,OAAO,OAAQH,CAAM,EACtCG,EAAI,aAAa,OAAO,OAAQiB,CAAI,EACpCjB,EAAI,aAAa,OAAO,YAAakB,CAAQ,EAE7C,MAAMjB,EAAW,MAAM,MAAMD,EAAK,CAC9B,OAAQ,MACR,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAUd,EAAW,MAAM,EAC/C,EAED,OAAQa,EAAQ,MAC5B,CAAS,EAED,GAAI,CAACE,EAAS,GAAI,CACd,MAAMC,EAAY,MAAMD,EAAS,KAAM,EACvC,MAAM,IAAI,MAAM,aAAaA,EAAS,MAAM,IAAIC,CAAS,EAAE,CACvE,CAEQ,MAAMC,EAAO,MAAMF,EAAS,KAAM,EAElC,OAAIE,GAAQA,EAAK,MAAQ,MAAM,QAAQA,EAAK,IAAI,EAErCgB,GAAiChB,EAAK,KAAMa,CAAc,EAG9D,CAAE,CACZ,OAAQT,EAAO,CAEZ,MAAIA,EAAM,OAAS,cACf,QAAQ,MAAM,eAAgBA,CAAK,EAIjCA,CACd,CACA,EAQMY,GAAmC,CAACC,EAAgBJ,IAAmB,CAEzE,MAAMK,EAAoB,CAAE,EAG5B,UAAWC,KAAOF,EAAgB,CAE9B,GAAIE,EAAI,MAAO,CAEX,MAAMC,EAAc,CAChB,OAAQ,4CACR,KAAM,KACN,SAAU,IAAI,KAAKD,EAAI,WAAa,GAAI,EAAE,eAAgB,EAC1D,QAASA,EAAI,MACb,KAAM,OACN,GAAIA,EAAI,GAAK,OAChB,EAGGA,EAAI,OAAS,MAAM,QAAQA,EAAI,KAAK,GAAKA,EAAI,MAAM,OAAS,IAC5DC,EAAY,MAAQD,EAAI,MAAM,IAAIE,IAAS,CACvC,GAAIA,EAAK,GACT,SAAUA,EAAK,UAAYA,EAAK,KAChC,KAAMA,EAAK,MAAQ,WACnB,KAAMA,EAAK,MAAQ,EACnB,IAAKA,EAAK,KAAO,EACrC,EAAkB,GAIFF,EAAI,eAAiB,MAAM,QAAQA,EAAI,aAAa,GAAKA,EAAI,cAAc,OAAS,IAC/EC,EAAY,QACbA,EAAY,MAAQ,CAAE,GAG1BD,EAAI,cAAc,QAAQE,GAAQ,CAC9BD,EAAY,MAAM,KAAK,CACnB,GAAIC,EAAK,GACT,SAAUA,EAAK,UAAYA,EAAK,KAChC,KAAMA,EAAK,MAAQ,WACnB,KAAMA,EAAK,MAAQ,EACnB,IAAKA,EAAK,KAAO,EACzC,CAAqB,CACrB,CAAiB,GAGLH,EAAkB,KAAKE,CAAW,CAC9C,CAGQ,GAAID,EAAI,OAAQ,CAEZ,KAAM,CAAE,QAAAb,EAAS,UAAAG,CAAS,EAAKJ,GAAuBc,EAAI,MAAM,EAG1DG,EAAmB,CACrB,OAAQ,iGACR,KAAM,OACN,SAAU,IAAI,KAAKH,EAAI,WAAa,GAAI,EAAE,eAAgB,EAC1D,QAASb,GAAW,GACpB,KAAM,YACN,GAAIG,EAAY,CAAE,UAAAA,CAAW,EAAG,GAChC,GAAIU,EAAI,GAAK,YAChB,EAEDD,EAAkB,KAAKI,CAAgB,CACnD,CACA,CAGI,OAAAJ,EAAkB,QAAS,EAEpBA,CACX,EAmCaK,GAAsB,CAACC,EAAUC,EAAgBC,EAAcC,EAAe,KAAO,CAE9F,IAAIC,EAAkB,GAClBC,EAAiB,CAAE,EAInBC,EAAqBL,EAGzB,GAAI,CAACK,GAAsBN,GAAYA,EAAS,OAAS,GAErD,QAASO,EAAI,EAAGA,EAAIP,EAAS,OAAQO,IACjC,GAAIP,EAASO,CAAC,EAAE,OAAS,QAAUP,EAASO,CAAC,EAAE,QAAQ,KAAI,IAAO,GAAI,CAClED,EAAqBN,EAASO,CAAC,EAAE,QACjC,KAChB,EAKI,IAAIC,EAAoB,IAAI,IAG5B,QAASD,EAAIP,EAAS,OAAS,EAAGO,GAAK,EAAGA,IAAK,CAC3C,MAAME,EAAOT,EAASO,CAAC,EAGvB,IAAKE,EAAK,OAAS,QAAUA,EAAK,OAAS,aAAeA,EAAK,OAAS,WAAaA,EAAK,QAAQ,KAAI,IAAO,GAAI,CAE7G,GAAIA,EAAK,OAAS,QAAUA,EAAK,UAAYH,EACzC,SAIAG,EAAK,OAAS,WACdL,EAAkB,IAItB,MAAMM,EAAa,GAAGD,EAAK,IAAI,IAAIA,EAAK,OAAO,GAC1CD,EAAkB,IAAIE,CAAU,IACjCL,EAAe,KAAK,CAChB,KAAMI,EAAK,KACX,QAASA,EAAK,OAClC,CAAiB,EACDD,EAAkB,IAAIE,CAAU,EAEhD,CACA,CAGI,GAAIJ,GAAsBA,EAAmB,KAAI,IAAO,GAAI,CACxD,MAAMI,EAAa,QAAQJ,CAAkB,GACxCE,EAAkB,IAAIE,CAAU,GACjCL,EAAe,KAAK,CAChB,KAAM,OACN,QAASC,CACzB,CAAa,CAEb,CAGI,OAAID,EAAe,OAASF,IACxBE,EAAiBA,EAAe,MAAM,CAACF,CAAY,GAInD,CAACC,GAAmBF,GACpBG,EAAe,QAAQ,CACnB,KAAM,SACN,QAASH,CACrB,CAAS,EAGEG,CACX,EAMaM,GAAkBC,GAAY,CACnCA,GACAA,EAAQ,eAAe,CACnB,SAAU,QACtB,CAAS,CAET,EAQaC,GAAoB,CAAC/B,EAASgC,EAAQ,KAAO,CACtD,MAAMlB,EAAc,CAChB,OAAQ,4CACR,KAAM,KACN,SAAU,IAAI,KAAM,EAAC,eAAgB,EACrC,QAASd,GAAW,GACpB,KAAM,MACT,EAGD,OAAIgC,GAAS,MAAM,QAAQA,CAAK,GAAKA,EAAM,OAAS,IAChDlB,EAAY,MAAQkB,EAAM,IAAIjB,IAAS,CACnC,GAAIA,EAAK,gBAAkBA,EAAK,GAChC,SAAUA,EAAK,UAAYA,EAAK,MAAQ,QACxC,KAAMA,EAAK,MAAQ,WACnB,KAAMA,EAAK,MAAQ,EACnB,IAAKA,EAAK,KAAO,EAC7B,EAAU,GAGCD,CACX,EAOamB,GAAyB,CAACC,EAAiB,KAAU,CAC9D,MAAMC,EAAc,CAChB,OAAQ,iGACR,KAAM,OACN,SAAU,IAAI,KAAM,EAAC,eAAgB,EACrC,QAAS,GACT,KAAM,WACT,EAED,OAAID,EACO,CACH,GAAGC,EACH,UAAW,QACd,EAGEA,CACX,EAYaC,GAAiC,MAAM7B,EAAgBjB,EAAU,KAAO,CACjF,GAAI,CACA,GAAI,CAACiB,EACD,eAAQ,IAAI,gBAAgB,EACrB,GAIX,IAAI8B,EAAW/C,EAAQ,UAAY,CAAE,EAEhC+C,EAAS,SACVA,EAAW,MAAM/B,GAA6BC,CAAc,GAGhE,MAAM+B,EAAeD,EAAS,OAIxBE,EAAoB,KAAK,MAAMD,EAAe,CAAC,EAI/CE,GADgB,MAAMnD,GAAwB,GACV,KAAKoD,GAAQA,EAAK,KAAOlC,CAAc,EAcjF,IALKgC,GAAqB,GAAMA,GAAqB,GAAKA,EAAoB,IAAM,KAE/E,CAACC,GAAuB,CAACA,EAAoB,MAAQA,EAAoB,KAAK,WAAW,KAAK,GAAKA,EAAoB,OAAS,oBAGrH,CACZ,QAAQ,IAAI,mBAAoBjC,EAAgB,QAASgC,CAAiB,EAE1E,GAAI,CAGA,IAAIG,EAAsB,GAI1B,MAAMC,EAAiB,CAAC,GAAGN,CAAQ,EAAE,KAAK,CAAC1C,EAAGC,IAAM,CAEhD,GAAID,EAAE,UAAYC,EAAE,SAChB,OAAOD,EAAE,SAAWC,EAAE,SAG1B,GAAID,EAAE,YAAcC,EAAE,WAAY,CAC9B,MAAMgD,EAAQ,OAAOjD,EAAE,YAAe,SAAW,IAAI,KAAKA,EAAE,UAAU,EAAE,QAAS,EAAGA,EAAE,WAAa,IAC7FkD,EAAQ,OAAOjD,EAAE,YAAe,SAAW,IAAI,KAAKA,EAAE,UAAU,EAAE,QAAS,EAAGA,EAAE,WAAa,IACnG,OAAOgD,EAAQC,CACvC,CACoB,MAAO,EAC3B,CAAiB,EAGKC,EAAc,CAAE,EACtB,IAAIC,EAAc,CAAE,KAAM,KAAM,UAAW,IAAM,EAEjD,UAAWlC,KAAO8B,EACV9B,EAAI,OAAS,QAETkC,EAAY,OAAS,OACrBD,EAAY,KAAK,CAAC,GAAGC,EAAa,EAClCA,EAAc,CAAE,KAAM,KAAM,UAAW,IAAM,GAEjDA,EAAY,KAAOlC,EAAI,SAChBA,EAAI,OAAS,cAEhBkC,EAAY,YAAc,OAC1BD,EAAY,KAAK,CAAC,GAAGC,EAAa,EAClCA,EAAc,CAAE,KAAM,KAAM,UAAW,IAAM,GAEjDA,EAAY,UAAYlC,EAAI,UAKhCkC,EAAY,OAAS,MAAQA,EAAY,YAAc,OACvDD,EAAY,KAAKC,CAAW,EAIhC,MAAMC,EAAcF,EAAY,MAAM,EAAE,EAGxC,QAASrB,EAAI,EAAGA,EAAIuB,EAAY,OAAQvB,IAAK,CACzC,MAAMwB,EAAOD,EAAYvB,CAAC,EAC1BiB,GAAuB,KAAKjB,EAAE,CAAC;AAAA,EAC3BwB,EAAK,OACLP,GAAuB,OAAOO,EAAK,IAAI;AAAA,GAEvCA,EAAK,YACLP,GAAuB,OAAOO,EAAK,SAAS;AAAA,GAEhDP,GAAuB;AAAA,CAC3C,CAKgB,GAHA,QAAQ,IAAI,mBAAoBA,EAAoB,OAAQ,IAAI,EAG5D,CAACA,EAAoB,OAAQ,CAC7B,QAAQ,IAAI,0BAA0B,EACtC,MAAMQ,EAAe,MAAMC,GAAmB5C,EAAgB,CAAE,cAAe,GAAM,EACrF,OAAK2C,EAAa,SACd,QAAQ,KAAK,mBAAoBA,EAAa,OAAO,EAElDA,EAAa,OACxC,CAGgB,KAAM,CAAE,qBAAAE,CAAoB,EAAK,MACjCC,GAAA,WAAQ,wBAAyB,EAAC,8BAElC,IAAIC,EAAiB,GACjBC,EAAiB,GAGrB,MAAMC,EAAS,MAAMJ,EAAqBV,EAAqB,CAC3D,SAAU,MAAMe,GAAW,CACvB,GAAIA,GAAUA,EAAO,KAAM,CACvB,MAAMC,EAAQD,EAAO,KAAK,KAAM,EAGhC,GAFA,QAAQ,IAAI,iBAAkBC,CAAK,EAE/BA,EAAO,CACPJ,EAAiB,GACjBC,EAAiBG,EAGjB,MAAMR,EAAe,MAAMC,GAAmB5C,EAAgB,CAAE,KAAMmD,EAAO,EAG7E,GAAIR,EAAa,QACb,QAAQ,IAAI,iBAAkBQ,CAAK,EAE/B,OAAOpE,EAAQ,YAAe,YAC9BA,EAAQ,WAAWoE,CAAK,MAEzB,CACH,QAAQ,MAAM,iBAAkBR,EAAa,OAAO,EAEpD,QAAQ,IAAI,qBAAqB,EACjC,MAAMS,EAAsB,MAAMR,GAAmB5C,EAAgB,CAAE,cAAe,GAAM,EACxFoD,EAAoB,SAAW,OAAOrE,EAAQ,YAAe,YAC7DA,EAAQ,WAAWqE,EAAoB,MAAQ,EAAE,CAEzF,CACA,CACA,CACqB,EACD,QAAS,MAAM7D,GAAU,CACrB,QAAQ,MAAM,kBAAmBA,CAAK,EAEtC,MAAMoD,EAAe,MAAMC,GAAmB5C,EAAgB,CAAE,cAAe,GAAM,EACjF2C,EAAa,SAAW,OAAO5D,EAAQ,YAAe,YACtDA,EAAQ,WAAW4D,EAAa,MAAQ,EAAE,CAEjD,EACD,WAAY,MAAMU,GAAY,CAE1B,GAAIA,GAAW,CAACN,EAAgB,CAC5B,QAAQ,KAAK,+BAA+B,EAC5C,MAAMJ,EAAe,MAAMC,GAAmB5C,EAAgB,CAAE,cAAe,GAAM,EACjF2C,EAAa,SAAW,OAAO5D,EAAQ,YAAe,YACtDA,EAAQ,WAAW4D,EAAa,MAAQ,EAAE,CAE1E,CACA,CACA,EAAmB,CACC,aAAc,YACd,OAAQ,iBAC5B,CAAiB,EAGD,OAAII,GACA,QAAQ,IAAI,oBAAqBC,CAAc,EACxC,IAINC,EAAO,QAML,IALH,QAAQ,KAAK,6BAA6B,GACrB,MAAML,GAAmB5C,EAAgB,CAAE,cAAe,GAAM,GACjE,QAK3B,OAAQsD,EAAe,CACpB,eAAQ,MAAM,+BAAgCA,CAAa,GAEtC,MAAMV,GAAmB5C,EAAgB,CAAE,cAAe,GAAM,GACjE,OACpC,CACA,CAEQ,MAAO,EACV,OAAQT,EAAO,CACZ,eAAQ,MAAM,mBAAoBA,CAAK,EAChC,EACf,CACA,EAUaqD,GAAqB,MAAM5C,EAAgBjB,EAAU,KAAO,CACrE,MAAMF,EAASF,GAAc,EAE7B,GAAI,CAEA,MAAM4E,EAAc,CAChB,KAAM1E,CACT,EAGGE,EAAQ,cACRwE,EAAY,cAAgB,GACrBxE,EAAQ,OACfwE,EAAY,KAAOxE,EAAQ,MAG/B,QAAQ,IAAI,iBAAiBiB,CAAc,GAAI,CAC3C,cAAejB,EAAQ,cACvB,KAAMA,EAAQ,KACd,MAAO,GAAGb,EAAW,OAAO,kBAAkB8B,CAAc,OACxE,CAAS,EAED,MAAMf,EAAW,MAAM,MAAM,GAAGf,EAAW,OAAO,kBAAkB8B,CAAc,QAAS,CACvF,OAAQ,OACR,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAU9B,EAAW,MAAM,EAC/C,EACD,KAAM,KAAK,UAAUqF,CAAW,CAC5C,CAAS,EAGKC,EAAe,MAAMvE,EAAS,KAAM,EAC1C,IAAIwE,EAEJ,GAAI,CAEAA,EAAe,KAAK,MAAMD,CAAY,CACzC,MAAW,CAERC,EAAeD,CAC3B,CAEQ,OAAKvE,EAAS,IAWd,QAAQ,IAAI,kBAAkBe,CAAc,GAAIyD,CAAY,EACrD,CACH,QAAS,GACT,GAAGA,CACN,IAdG,QAAQ,MAAM,kBAAkBxE,EAAS,MAAM,GAAIwE,CAAY,EAExD,CACH,QAAS,GACT,OAAQxE,EAAS,OACjB,MAAOwE,EACP,QAAS,YAAYxE,EAAS,MAAM,EACvC,EAQR,OAAQM,EAAO,CACZ,eAAQ,MAAM,iBAAkBA,CAAK,EAE9B,CACH,QAAS,GACT,MAAOA,EACP,QAASA,EAAM,SAAW,SAC7B,CACT,CACA,EAOamE,GAAqB,MAAM1D,GAAmB,CACvD,MAAMnB,EAASF,GAAc,EAE7B,GAAI,CAEA,MAAM4E,EAAc,CAChB,KAAM1E,CACT,EAEKI,EAAW,MAAM,MAAM,GAAGf,EAAW,OAAO,kBAAkB8B,CAAc,GAAI,CAClF,OAAQ,SACR,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAU9B,EAAW,MAAM,EAC/C,EACD,KAAM,KAAK,UAAUqF,CAAW,CAC5C,CAAS,EAED,GAAI,CAACtE,EAAS,GAAI,CACd,MAAMC,EAAY,MAAMD,EAAS,KAAM,EACvC,MAAM,IAAI,MAAM,WAAWA,EAAS,MAAM,IAAIC,CAAS,EAAE,CACrE,CAGQ,OADa,MAAMD,EAAS,KAAM,CAErC,OAAQM,EAAO,CACZ,cAAQ,MAAM,UAAWA,CAAK,EACxBA,CACd,CACA,EAOaoE,GAAyB,SAAW,CAC7C,GAAI,CAEA,MAAMC,EAAgB,MAAM9E,GAAuB,CAAE,MAAO,CAAC,CAAE,EAG/D,OAAI8E,GAAiBA,EAAc,OAAS,EACjCA,EAAc,CAAC,EAAE,GAIrB,EACV,OAAQrE,EAAO,CACZ,eAAQ,MAAM,YAAaA,CAAK,EACzB,EACf,CACA,EAQasE,GAAmB,MAAM7D,GAAmB,CACrD,GAAI,CAKA,MAAO,EACV,OAAQ8D,EAAK,CACV,eAAQ,MAAM,YAAaA,CAAG,EACvB,EACf,CACA,EAgBaC,GAAwB,MAAMC,GAAc,CACrD,GAAI,CACA,MAAMnF,EAASF,GAAc,EAGvBK,EAAMb,GAAa,aAAa6F,CAAS,YAAY,EAC3DhF,EAAI,aAAa,OAAO,OAAQH,CAAM,EAEtC,MAAMI,EAAW,MAAM,MAAMD,EAAK,CAC9B,OAAQ,MACR,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAUd,EAAW,MAAM,EAC5D,CACA,CAAS,EAED,GAAI,CAACe,EAAS,GACV,MAAM,IAAI,MAAM,aAAaA,EAAS,MAAM,EAAE,EAGlD,MAAME,EAAO,MAAMF,EAAS,KAAM,EAGlC,OAAIE,GAAQA,EAAK,MAAQ,MAAM,QAAQA,EAAK,IAAI,EAErCA,EAAK,KAEL,CAAE,CAEhB,OAAQI,EAAO,CACZ,eAAQ,MAAM,YAAaA,CAAK,EACzB,CAAE,CACjB,CACA,ECv1BqBrB,EAAW,QACZA,EAAW,OAqBxB,MAAM+F,GAAkB,MAAOnC,EAAU/C,EAAU,KAAO,CAC7D,GAAI,CACA,MAAMF,EAASF,GAAc,EAGvBK,EAAMb,GAAa,gBAAgB,EAMnCoF,EAAc,CAChB,MAJgBzB,EAASA,EAAS,OAAS,CAAC,EAIzB,QACnB,KAAMjD,EACN,cAAe,YACf,OAAQ,CAAE,CACb,EAGGE,EAAQ,kBACRwE,EAAY,gBAAkBxE,EAAQ,iBAItCA,EAAQ,OAAS,MAAM,QAAQA,EAAQ,KAAK,GAAKA,EAAQ,MAAM,OAAS,IACxEwE,EAAY,MAAQxE,EAAQ,OAGhC,QAAQ,IAAI,kBAAmBwE,CAAW,EAE1C,MAAMtE,EAAW,MAAM,MAAMD,EAAK,CAC9B,OAAQ,OACR,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAUd,EAAW,MAAM,EAC/C,EACD,KAAM,KAAK,UAAUqF,CAAW,EAChC,OAAQxE,EAAQ,MAC5B,CAAS,EAED,GAAI,CAACE,EAAS,GACV,MAAM,IAAI,MAAM,SAASA,EAAS,MAAM,EAAE,EAG9C,OAAOA,CACV,OAAQM,EAAO,CACZ,cAAQ,MAAM,YAAaA,CAAK,EAC1BA,CACd,CACA,EAOa2E,GAAuB,MAAOC,EAAiBC,EAAY,KAAO,WAC3E,KAAM,CAAE,UAAAC,EAAW,QAAAC,EAAS,WAAAC,EAAY,YAAAC,EAAa,gBAAAC,EAAiB,uBAAAC,EAAwB,kBAAAC,EAAmB,eAAAC,EAAgB,YAAAC,CAAa,EAAGT,EAEjJ,GAAI,CAEA,GAAID,EAAgB,QAAUA,EAAgB,OAAO,QAAS,CAC1D,QAAQ,IAAI,gBAAgB,EAC5BI,GAAA,MAAAA,EAAa,GAAO,SACpB,MACZ,CAEQ,MAAMtF,EAAW,MAAMkF,EAEvB,GAAI,CAAClF,EAAS,GAAI,CACd,MAAMC,EAAY,MAAMD,EAAS,KAAM,EACvC,cAAQ,MAAM,oBAAqBA,EAAS,OAAQC,CAAS,EACvD,IAAI,MAAM,YAAYD,EAAS,MAAM,IAAIC,CAAS,EAAE,CACtE,CAEQ,QAAQ,IAAI,mBAAmB,EAE/B,MAAM4F,EAAS7F,EAAS,KAAK,UAAW,EAClC8F,EAAU,IAAI,YACpB,IAAIC,EAAS,GACTC,EAAmB,GACnBC,EAAkB,KAClBC,EAAgB,GAChBC,EAAuB,KAG3B,GAAI,CACA,OAAa,CAET,GAAIjB,EAAgB,QAAUA,EAAgB,OAAO,QAAS,CAC1D,QAAQ,IAAI,0BAA0B,EACtC,KACpB,CAEgB,KAAM,CAAE,KAAAkB,EAAM,MAAAC,CAAO,EAAG,MAAMR,EAAO,KAAM,EAE3C,GAAIO,EAAM,CACN,QAAQ,IAAI,gBAAgB,EAC5B,KACpB,CAGgBL,GAAUD,EAAQ,OAAOO,EAAO,CAAE,OAAQ,GAAM,EAGhD,MAAMC,EAAQP,EAAO,MAAM;AAAA,CAAI,EAC/BA,EAASO,EAAM,IAAK,GAAI,GAExB,UAAWC,KAAQD,EACf,GAAI,GAACC,EAAK,KAAM,GAAI,CAACA,EAAK,WAAW,QAAQ,GAE7C,GAAI,CACA,MAAMrG,EAAO,KAAK,MAAMqG,EAAK,UAAU,CAAC,CAAC,EAmBzC,GAVIrG,EAAK,iBAAmB,CAAC+F,IACzBA,EAAkB/F,EAAK,gBACvB,QAAQ,IAAI,sBAAsB+F,CAAe,GAAI,oCAAoC,EAErFR,GACAA,EAAuBQ,CAAe,GAK1C/F,EAAK,QAAU,UAAW,CAC1B,MAAMsG,EAAStG,EAAK,QAAU,GAG9B,GAAIsG,EAAO,SAAS,SAAS,EAAG,CAC5BR,EAAmB,GACnB,MAAMS,EAAeD,EAAO,QAAQ,UAAW,EAAE,EACjD,QAAQ,IAAI,oBAAqB,oCAAoC,EACrEjB,GAAA,MAAAA,EAAckB,EACjB,SAAUD,EAAO,SAAS,UAAU,EAAG,CACpC,MAAME,EAAQF,EAAO,MAAM,UAAU,EACrC,QAAQ,IAAI,oBAAqB,oCAAoC,EACrEjB,GAAA,MAAAA,EAAcmB,EAAM,CAAC,GAErBV,EAAmB,GAEfU,EAAM,OAAS,IACftB,GAAA,MAAAA,EAAYsB,EAAM,CAAC,GAE1B,MAAUV,EAEPT,GAAA,MAAAA,EAAciB,GAGdpB,GAAA,MAAAA,EAAYoB,EAE5C,SAAmCtG,EAAK,QAAU,cACtB,QAAQ,IAAI,mCAAoC,oCAAoC,EAGhFA,EAAK,YAAcwF,GAEnBA,EAAkBxF,EAAK,UAAU,EAIjCA,EAAK,SAAWyF,GAChBA,EAAezF,EAAK,OAAO,UAExBA,EAAK,QAAU,gBAItB,GAHA,QAAQ,IAAI,kCAAmC,oCAAoC,EAG/E0F,GAAe1F,EAAK,KAAM,CAE1B,MAAMyG,EAAW,CACb,GAAIzG,EAAK,KAAK,GACd,SAAUA,EAAK,KAAK,UAAYA,EAAK,KAAK,KAC1C,KAAMA,EAAK,KAAK,MAAQ,WACxB,KAAMA,EAAK,KAAK,MAAQ,EACxB,IAAKA,EAAK,KAAK,KAAO,EACzB,EAGD0F,EAAYe,CAAQ,CACpD,UACmCzG,EAAK,QAAU,kBACtB,QAAQ,IAAI,uCAAwC,oCAAoC,EAExFkF,GAAA,MAAAA,EAAYlF,EAAK,QAAU,YACpBA,EAAK,QAAU,cACtB,QAAQ,IAAI,kCAAmC,oCAAoC,UAC5EA,EAAK,QAAU,kBACtB,QAAQ,IAAI,wCAAyC,oCAAoC,UAClFA,EAAK,QAAU,mBACtB,QAAQ,IAAI,yCAA0C,oCAAoC,UACnFA,EAAK,QAAU,eAAgB,CACtC,QAAQ,IAAI,oCAAqC,oCAAoC,EACrF,MAAM0G,GAAYC,EAAA3G,EAAK,OAAL,YAAA2G,EAAW,MACvBC,IAASC,EAAA7G,EAAK,OAAL,YAAA6G,EAAW,KAAM,QAAQb,EAAc,MAAM,GAE5D,GAAIU,EAAW,CAEX,MAAMI,EAAiB9C,GAAU,CAC7B,MAAM+C,EAAa/C,EAAM,YAAa,EAEtC,OAAI+C,IAAe,KAAa,QAC5BA,EAAW,SAAS,MAAM,GAAKA,EAAW,SAAS,IAAI,EAAU,OACjEA,EAAW,SAAS,IAAI,GAAKA,EAAW,SAAS,IAAI,EAAU,YAC/DA,EAAW,SAAS,IAAI,EAAU,OAClCA,EAAW,SAAS,IAAI,EAAU,SAClCA,EAAW,SAAS,IAAI,GAAKA,EAAW,SAAS,IAAI,EAAU,UAC/DA,EAAW,SAAS,KAAK,GAAKA,EAAW,SAAS,OAAO,EAAU,MACnEA,EAAW,SAAS,IAAI,EAAU,OAClCA,EAAW,SAAS,IAAI,GAAKA,EAAW,SAAS,IAAI,EAAU,QAC/DA,EAAW,SAAS,IAAI,EAAU,QAClCA,EAAW,SAAS,IAAI,EAAU,QAE/B,SACV,EAGKC,IAAWC,EAAAjH,EAAK,OAAL,YAAAiH,EAAW,OAAQH,EAAcJ,CAAS,EAS3D,GAPA,QAAQ,IAAI,0BAA2B,qCAAsC,CACzE,MAAOA,EACP,KAAMM,EACN,GAAIJ,CACxC,CAAiC,EAGGX,EAAsB,CACtB,MAAMiB,EAAgBlB,EAAc,UAAUmB,GAAQA,EAAK,KAAOlB,CAAoB,EAClFiB,IAAkB,KAClBlB,EAAckB,CAAa,EAAE,QAAU,GAGnC5B,GACAA,EAAgB,CAAC,GAAGU,CAAa,CAAC,EAG9E,CAGgC,MAAMoB,EAAU,CACZ,MAAOV,EACP,UAAWM,EACX,GAAIJ,EACJ,QAAS,EACZ,EAEDZ,EAAc,KAAKoB,CAAO,EAC1BnB,EAAuBW,EAEnBtB,GACAA,EAAgB,CAAC,GAAGU,CAAa,CAAC,CAEtE,CACA,SAAmChG,EAAK,QAAU,iBAItB,GAHA,QAAQ,IAAI,qCAAsC,oCAAoC,EAGlFiG,EAAsB,CACtB,MAAMoB,EAAYrB,EAAc,UAAUmB,GAAQA,EAAK,KAAOlB,CAAoB,EAC9EoB,IAAc,KACdrB,EAAcqB,CAAS,EAAE,QAAU,GAG/B/B,GACAA,EAAgB,CAAC,GAAGU,CAAa,CAAC,GAG1CC,EAAuB,IACvD,OACmCjG,EAAK,QAAU,qBACtB,QAAQ,IAAI,0CAA2C,oCAAoC,EAE3FgG,EAAgBA,EAAc,IAAImB,IAAS,CAAC,GAAGA,EAAM,QAAS,EAAK,EAAE,EAGjE7B,GACAA,EAAgB,CAAC,GAAGU,CAAa,CAAC,EAGtCA,EAAgB,GAChBC,EAAuB,MAChBjG,EAAK,QAAU,SACtB,QAAQ,MAAM,2BAA4B,oCAAoC,EAC9EmF,GAAA,MAAAA,EAAUnF,EAAK,SAAW,UACnBA,EAAK,QAAU,QACtB,QAAQ,IAAI,sBAAuB,qCAAqC,CAE/E,OAAQsH,EAAG,CACR,QAAQ,MAAM,sBAAuB,qCAAsCA,CAAC,CACpG,CAEA,CACS,OAAQC,EAAa,CAElB,QAAQ,MAAM,uBAAwB,qCAAsCA,CAAW,EACvF,MAAMC,EAAWD,EAAY,SAAW,GAGxC,GAAIA,EAAY,OAAS,cACrBC,EAAS,SAAS,SAAS,GAC3BA,EAAS,SAAS,OAAO,GACzBA,EAAS,SAAS,8BAA8B,GAChDA,EAAS,SAAS,wBAAwB,GAC1CA,EAAS,SAAS,6CAA6C,EAAG,CAElE,QAAQ,IAAI,mBAAoB,oCAAoC,EACpEpC,GAAA,MAAAA,EAAa,GAAO,aACpB,MAChB,CACY,MAAMmC,CAClB,QAAkB,CAEN,GAAI,CACA5B,EAAO,YAAa,EACpB,QAAQ,IAAI,iBAAiB,CAChC,OAAQ2B,EAAG,CACR,QAAQ,KAAK,qBAAsBA,CAAC,CACpD,CACA,CAEQ,QAAQ,IAAI,gBAAgB,EAC5BlC,GAAA,MAAAA,EAAa,GAChB,OAAQhF,EAAO,CACZ,QAAQ,MAAM,mBAAoBA,CAAK,EAGnCA,EAAM,OAAS,cACfA,EAAM,QAAQ,SAAS,SAAS,GAChCA,EAAM,QAAQ,SAAS,8BAA8B,GACrD,QAAQ,IAAI,iBAAiB,EAC7BgF,GAAA,MAAAA,EAAa,GAAO,WAEpB,QAAQ,MAAM,iBAAiB,EAC/BD,GAAA,MAAAA,EAAU/E,EAAM,SAAW,QAC3BgF,GAAA,MAAAA,EAAa,GAAOhF,EAAM,SAEtC,CACA,EASaqH,GAAgB,MAAO9E,EAAUsC,EAAY,GAAIrF,EAAU,KAAO,iCAC3E,GAAI,CAEA,MAAMiB,EAAiBjB,EAAQ,iBAAmB,GAC5C8H,EAAiB,CACnB,GAAG9H,EACH,gBAAiBiB,CACpB,EAED,QAAQ,IAAI,gBAAiB,CACzB,eAAgBA,EAChB,aAAc8B,EAAS,OACvB,UAAW,CAAC,CAAC/C,EAAQ,MACjC,CAAS,EAGD,MAAMoF,EAAkBF,GAAgBnC,EAAU+E,CAAc,EAGhE,GAAI,CACA,eAAQ,IAAI,iBAAiB,EAC7B,MAAM3C,GAAqBC,EAAiBC,CAAS,EACrD,QAAQ,IAAI,iBAAiB,EACtB,CAAE,QAAS,EAAM,CAC3B,OAAQsC,EAAa,CAKlB,OAHA,QAAQ,MAAM,mBAAoBA,CAAW,EAGzCA,EAAY,OAAS,eACrBZ,EAAAY,EAAY,UAAZ,MAAAZ,EAAqB,SAAS,aAC9BE,EAAAU,EAAY,UAAZ,MAAAV,EAAqB,SAAS,4BAC9BI,EAAAM,EAAY,UAAZ,MAAAN,EAAqB,SAAS,kCAC9BU,EAAAJ,EAAY,UAAZ,MAAAI,EAAqB,SAAS,gDAE9B,QAAQ,IAAI,eAAe,GAC3BC,EAAA3C,EAAU,aAAV,MAAA2C,EAAA,KAAA3C,EAAuB,GAAO,SACvB,CAAE,QAAS,GAAO,QAAS,GAAM,MAAOsC,CAAa,IAIhE,QAAQ,MAAM,gBAAiBA,EAAY,SAAW,MAAM,GAC5DM,EAAA5C,EAAU,UAAV,MAAA4C,EAAA,KAAA5C,EAAoBsC,EAAY,SAAW,UAC3CO,EAAA7C,EAAU,aAAV,MAAA6C,EAAA,KAAA7C,EAAuB,GAAOsC,EAAY,SACnC,CAAE,QAAS,GAAO,MAAOA,CAAa,EACzD,CACK,OAAQnH,EAAO,CAIZ,OAHA,QAAQ,MAAM,iBAAkBA,CAAK,EAGjCA,EAAM,OAAS,eACf2H,EAAA3H,EAAM,UAAN,MAAA2H,EAAe,SAAS,aACxBC,EAAA5H,EAAM,UAAN,MAAA4H,EAAe,SAAS,4BACxBC,EAAA7H,EAAM,UAAN,MAAA6H,EAAe,SAAS,kCACxBC,EAAA9H,EAAM,UAAN,MAAA8H,EAAe,SAAS,gDAExB,QAAQ,IAAI,gBAAgB,GAC5BC,EAAAlD,EAAU,aAAV,MAAAkD,EAAA,KAAAlD,EAAuB,GAAO,SACvB,CAAE,QAAS,GAAO,QAAS,GAAM,MAAA7E,CAAO,IAGnD,QAAQ,MAAM,iBAAkBA,EAAM,SAAW,MAAM,GACvDgI,EAAAnD,EAAU,UAAV,MAAAmD,EAAA,KAAAnD,EAAoB7E,EAAM,SAAW,SACrCiI,EAAApD,EAAU,aAAV,MAAAoD,EAAA,KAAApD,EAAuB,GAAO7E,EAAM,SAC7B,CAAE,QAAS,GAAO,MAAAA,CAAO,EACxC,CACA,EAKakI,GAAmB,SAAY,CACxC,GAAI,CAEA,MAAMxI,EAAW,MAAM,MAAM,gCAAgC,EAC7D,GAAIA,EAAS,GAAI,CACb,MAAME,EAAO,MAAMF,EAAS,KAAM,EAClC,OAAO,KAAK,UAAUE,CAAI,CACtC,KACY,gBAAQ,MAAM,cAAcF,EAAS,MAAM,EAAE,EACtC,CACH,KAAM,SACN,MAAO,CAAE,YAAa,EAAI,EAC1B,MAAO,EACV,CAER,OAAQM,EAAO,CACZ,eAAQ,MAAM,aAAcA,CAAK,EAC1B,CACH,KAAM,SACN,MAAO,CAAE,YAAa,EAAI,EAC1B,MAAO,EACV,CACT,CACA,EAKamI,GAAoB,IAAM,CACnC,GAAI,CACA,MAAO,EACV,OAAQ,EAAG,CACR,eAAQ,MAAM,UAAW,CAAC,EACnB,EACf,CACA,6NCpbMC,GAAgB,EAAI,KAAO,KAG3BC,GAAY,+GAflB,MAAMC,EAAOC,EAEPC,EAAQC,EAAI,EAAE,EACdC,EAAYD,EAA6B,IAAI,EAC7CE,EAAcF,EAAI,EAAK,EACvBG,EAAiBH,EAAI,CAAC,EACtBI,EAAgBJ,EAA6F,EAAE,EAG/GK,EAAsB,CAAC,MAAO,KAAM,MAAO,MAAO,OAAQ,OAAQ,MAAO,OAAQ,MAAO,MAAO,UAAU,EASzGC,EAAc,CAElB,IAAO,WACP,GAAM,WACN,IAAO,WACP,SAAY,WACZ,IAAO,WACP,KAAQ,WACR,IAAO,WACP,KAAQ,WACR,IAAO,WACP,KAAQ,WACR,IAAO,UACT,EAGMC,EAAc,CAClB,SAAY,aACZ,QAAW,MACb,EAEMC,EAAeC,GAAsB,CACzC,MAAMC,EAAWJ,EAAYG,EAAU,aAAa,GAAK,UAClD,OAAAF,EAAYG,CAAQ,GAAK,MAClC,EAEMC,EAAcrD,GAAkB,CACpC,GAAI,CAACA,EAAM,QAAU8C,EAAc,MAAM,SAAW,EAAG,OAEvD,IAAIQ,EAAUtD,EACd,MAAM7D,EAAQ2G,EAAc,MAAM,IAAa5H,IAAA,CAC7C,KAAM,WACN,gBAAiB,aACjB,eAAgBA,EAAK,GAErB,SAAUA,EAAK,KACf,KAAMA,EAAK,KACX,UAAWA,EAAK,UAChB,KAAMA,EAAK,MACX,EAEFqH,EAAK,OAAQ,CAAE,QAAAe,EAAS,MAAAnH,CAAA,CAAO,EAG/B2G,EAAc,MAAQ,CAAC,CACzB,EAEMS,EAAa,IAAM,CACvBhB,EAAK,MAAM,CACb,EAEMiB,EAAmB,IAAM,CACzB,GAAAV,EAAc,MAAM,QAAUR,GAAW,CAC7BmB,EAAA,QAAQ,SAASnB,EAAS,KAAK,EAC7C,OAGEK,EAAU,OACZA,EAAU,MAAM,MAAM,CAE1B,EAEMe,EAAcC,GAAkB,CACtBb,EAAA,MAAQA,EAAc,MAAM,OAAO,CAACc,EAAGhI,IAAMA,IAAM+H,CAAK,CACxE,EAEME,EAAkBC,GAAkB,CAGxC,MAAMC,EAAQ,CAAC,QAAS,KAAM,KAAM,IAAI,EAClCnI,EAAI,KAAK,MAAM,KAAK,IAAIkI,CAAK,EAAI,KAAK,IAAI,IAAC,CAAC,EAClD,OAAO,YAAYA,EAAQ,KAAK,IAAI,KAAGlI,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAI,IAAMmI,EAAMnI,CAAC,CACxE,EAEMoI,EAAkBC,GAA6B,CAC/C,GAAAA,EAAS,QAAU,GAAW,OAAAA,EAClC,MAAMd,EAAYc,EAAS,MAAMA,EAAS,YAAY,GAAG,CAAC,EACpDC,EAAOD,EAAS,MAAM,EAAGA,EAAS,YAAY,GAAG,CAAC,EACpD,OAAAC,EAAK,QAAU,EAAUD,EACtBC,EAAK,MAAM,EAAG,CAAC,EAAI,MAAQf,CACpC,EAEMgB,EAAuBC,GAA8B,CACnD,MAAAjB,EAAYiB,EAAS,OAAOA,EAAS,YAAY,GAAG,EAAI,IAAM,GAAK,CAAC,EAAE,YAAY,EACjF,OAAArB,EAAoB,SAASI,CAAS,CAC/C,EAGMkB,EAAmBJ,GAChBnB,EAAc,MAAM,KAAa5H,KAAK,OAAS+I,CAAQ,EAG1DK,EAAqB,MAAOC,GAAiB,CAEjD,MAAMpI,EADQoI,EAAM,OACA,MAEpB,GAAI,CAACpI,GAASA,EAAM,SAAW,EAC7B,OAGI,MAAAjB,EAAOiB,EAAM,CAAC,EAGhB,GAAA2G,EAAc,MAAM,QAAUR,GAAW,CAC7BmB,EAAA,QAAQ,SAASnB,EAAS,KAAK,EAEzCK,EAAU,QACZA,EAAU,MAAM,MAAQ,IAE1B,OAIE,GAAA0B,EAAgBnJ,EAAK,IAAI,EAAG,CAC9BuI,EAAc,QAAQ,MAAMvI,EAAK,IAAI,MAAM,EAEvCyH,EAAU,QACZA,EAAU,MAAM,MAAQ,IAE1B,OAIF,GAAI,CAACwB,EAAoBjJ,EAAK,IAAI,EAAG,CACnCuI,EAAc,QAAQ,YAAY,EAE9Bd,EAAU,QACZA,EAAU,MAAM,MAAQ,IAE1B,OAIE,GAAAzH,EAAK,KAAOmH,GAAe,CAC7BoB,EAAc,QAAQ,WAAWI,EAAexB,EAAa,CAAC,EAAE,EAE5DM,EAAU,QACZA,EAAU,MAAM,MAAQ,IAE1B,OAIFC,EAAY,MAAQ,GACpBC,EAAe,MAAQ,EAEnB,IAEI,MAAA2B,EAAW,IAAI,SACZA,EAAA,OAAO,OAAQtJ,CAAI,EAItB,MAAA5B,EADY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAChC,IAAI,QAAQ,EAExCkL,EAAS,OAAO,OAAQlL,GAAa,aAAa,QAAQ,cAAc,GAAK,WAAW,EAGlF,MAAAmL,EAAmB,YAAY,IAAM,CACrC5B,EAAe,MAAQ,KACzBA,EAAe,OAAS,IAEzB,GAAG,EAGAlJ,EAAW,MAAM,MAAM,GAAGf,EAAW,OAAO,gBAAiB,CACjE,OAAQ,OACR,QAAS,CACP,cAAiB,UAAUA,EAAW,MAAM,EAC9C,EACA,KAAM4L,CAAA,CACP,EAKG,GAHJ,cAAcC,CAAgB,EAC9B5B,EAAe,MAAQ,IAEnB,CAAClJ,EAAS,GACN,UAAI,MAAM,SAASA,EAAS,MAAM,IAAIA,EAAS,UAAU,EAAE,EAG7D,MAAAgE,EAAS,MAAMhE,EAAS,KAAK,EAGnCmJ,EAAc,MAAM,KAAK,CACvB,GAAInF,EAAO,GACX,KAAMA,EAAO,KACb,KAAMA,EAAO,KACb,UAAWA,EAAO,UAClB,UAAWA,EAAO,UACnB,EAGD8F,EAAc,QAAQ,MAAM,QACrBxJ,EAAY,CACX,cAAM,UAAWA,CAAK,EAChBwJ,EAAA,MAAMxJ,EAAM,SAAW,QAAQ,SAC7C,CAEA2I,EAAY,MAAQ,GAEhBD,EAAU,QACZA,EAAU,MAAM,MAAQ,GAC1B,CAEJ,+9CC1NA,MAAMJ,EAAOC,EAGPkC,EAAiBhC,EAAI9J,EAAW,YAAY,EAG5C+L,EAAeC,GAAS,IACnBhM,EAAW,OAAO,QAAcO,EAAM,KAAOuL,EAAe,KAAK,CAC3E,EAGKG,EAAeD,GAAS,IACnBhM,EAAW,OAAO,IAAcO,IAAA,CACnC,QAASA,EAAM,KACf,MAAOA,EAAM,GACb,WAAYA,EAAM,MACpB,CACL,EAGK2L,EAAqBjL,GAA4B,CACnD,MAAMkL,EAAalL,EAAK,MACpBkL,IAAeL,EAAe,QAC9BA,EAAe,MAAQK,EAER9L,GAAY8L,CAAU,GAGjCxC,EAAK,gBAAiB,CAClB,QAASwC,EACT,MAAOJ,EAAa,MACvB,EAGb,EAGA,OAAAK,GAAU,IAAM,CAERpM,EAAW,aACX8L,EAAe,MAAQ9L,EAAW,aAGlCK,GAAYyL,EAAe,KAAK,CACpC,CACH,40CC3BD,MAAMnC,EAAOC,EAGPyC,EAAkB,CAACpL,EAAMa,IAAmB,CAG9C,MAAMsF,EAAQnG,GAAA,YAAAA,EAAM,MAEpB,GAAKmG,EAGD,IAAAA,EAAM,WAAW,MAAM,EAAG,CAC1BuC,EAAK,mBAAoB7H,CAAc,EACvC,OAIA,GAAAsF,EAAM,WAAW,SAAS,EAAG,CAC7BuC,EAAK,sBAAuB7H,CAAc,EAC1C,OAIA,GAAAsF,EAAM,WAAW,SAAS,EAAG,CAC7BuC,EAAK,sBAAuB7H,CAAc,EAC1C,QAER,EAGMwK,EAAuB,CAACC,EAAcC,EAAY,KAC/CD,EAGDA,EAAa,KACNA,EAAa,KAAK,OAASC,EAC5BD,EAAa,KAAK,UAAU,EAAGC,CAAS,EAAI,MAC5CD,EAAa,KAInBA,EAAa,cAAgBA,EAAa,aAAa,OAChDA,EAAa,aAAa,OAASC,EACpCD,EAAa,aAAa,UAAU,EAAGC,CAAS,EAAI,MACpDD,EAAa,aAIhB,MAAMA,EAAa,GAAG,UAAU,EAAG,CAAC,CAAC,MAjBlB,ozEChGjBE,GAAY,CACvB,MAAO,QACP,KAAM,MACR,EAMO,SAASC,GAAaC,EAAM,CAC7BA,IAASF,GAAU,OAASE,IAASF,GAAU,OACjD,QAAQ,KAAK,uBAAuBE,CAAI,oBAAoBF,GAAU,KAAK,EAAE,EAC7EE,EAAOF,GAAU,OAGnB,SAAS,gBAAgB,aAAa,aAAcE,CAAI,EACxD,aAAa,QAAQ,aAAcA,CAAI,CACzC,CAMO,SAASC,IAAe,CAC7B,OAAO,SAAS,gBAAgB,aAAa,YAAY,GAAKH,GAAU,KAC1E,CAkBO,SAASI,IAAY,CAE1B,MAAMC,EAAa,aAAa,QAAQ,YAAY,EAEpD,GAAIA,EAEFJ,GAAaI,CAAU,MAClB,CAEL,MAAMC,EAAkB,OAAO,YAAc,OAAO,WAAW,8BAA8B,EAAE,QAC/FL,GAAaK,EAAkBN,GAAU,KAAOA,GAAU,KAAK,CACnE,CACA,qICwEMO,GAAkB,ieArCTC,GAAU,EAGzB,MAAMC,EAAQC,EAiCRC,EAAuBtD,EAAwB,IAAI,EAEnDuD,EAAcvD,EAAI,EAAK,EAGEkC,GAAS,IAAM,CAC5C,MAAMsB,EAAWJ,EAAM,qBAAqB,MAAM,OAAS,EACrDK,EAAeL,EAAM,qBAAqB,UAAU,OAAS,EAC7DM,EAAcN,EAAM,qBAAqB,SAAS,OAAS,EAC3DO,EAAWP,EAAM,qBAAqB,MAAM,OAAS,EAG3D,OAAOI,GAAYC,GAAgBC,GAAeC,GAAY,CAACP,EAAM,oBACtE,GAGD,MAAMQ,EAAe,IAAM,CACrB,IAACN,EAAqB,OAAS,CAACF,EAAM,sBAAwBG,EAAY,OAASH,EAAM,yBAC3F,OAGF,MAAMS,EAAUP,EAAqB,MACZO,EAAQ,aAAeA,EAAQ,UAAYA,EAAQ,aAGrDX,KACrBK,EAAY,MAAQ,GACpB1D,EAAK,WAAW,EAGhB,WAAW,IAAM,CACf0D,EAAY,MAAQ,IACnB,GAAI,EAEX,EAGMO,EAAe9D,EAAI8C,IAAc,EAgBvCR,GAAU,IAAM,CACdwB,EAAa,MAAQhB,GAAa,EACnC,EAGD,MAAMjD,EAAOC,w1GCrLb,MAAMsD,EAAQC,EAeRxD,EAAOC,EAEPiE,EAAS/D,EAAIoD,EAAM,MAAM,EACzBY,EAAQhE,EAAIoD,EAAM,KAAK,EAEvBa,EAAkB,CAACC,EAAMnN,IAAY,CACrCmN,IAAS,QACXH,EAAO,MAAQ,CAACA,EAAO,MACvBC,EAAM,MAAQ,GACd,QAAQ,IAAI,MAAM,GACTE,IAAS,OAClBF,EAAM,MAAQ,CAACA,EAAM,MACrBD,EAAO,MAAQ,GACf,QAAQ,IAAI,KAAK,GACRG,IAAS,UAClB,QAAQ,IAAI,QAAQ,EACpBrE,EAAK,YAAaqE,EAAMnN,CAAO,GACtBmN,IAAS,QAClB,QAAQ,IAAI,MAAM,CAEtB,4hCC4BA,MAAMd,EAAQC,EA4DRxD,EAAOC,EAGPmE,EAAkBA,CAACC,EAAMnN,IAAY,CACvC8I,EAAK,YAAaqE,EAAMnN,CAAO,CAClC,EAGKoN,EAAMnE,EAAI,SAAS,EAGnBoE,EAAYpE,EAAI,CAAC,EACvB,IAAIqE,EAAe,KAGnB/B,GAAU,IAAM,CACZ+B,EAAeC,YAAY,IAAM,CAC7BF,EAAU9G,MAAS8G,EAAU9G,MAAQ,EAAK,CAC7C,EAAE,GAAG,CACV,CAAC,EAGDiH,GAAY,IAAM,CACVF,GACAG,cAAcH,CAAY,CAElC,CAAC,EAGD,MAAMI,EAAsBvC,GAAS,IAC1BkB,EAAMjG,eAAiBiG,EAAMjG,cAAcuH,OAAS,GAAK,CAACtB,EAAMjG,cAAcwH,KAAKrG,GAAQA,EAAKsG,OAAO,CACjH,EAGKrE,EAAc,CAChB,SAAY,aACZ,MAAS,QACT,MAAS,cACT,MAAS,qBACT,OAAU,MACb,EAGKC,EAAe0D,GACV3D,EAAY2D,CAAI,GAAK,OAI1BW,EAAiB,CACnB,QAAW,sBACX,MAAS,qBACT,KAAQ,OACR,UAAa,OACb,KAAQ,OACR,OAAU,SACV,QAAW,SACX,IAAO,WACP,KAAQ,OACR,MAAS,YACT,MAAS,OACT,MAAS,cACZ,EAGKC,EAAkB,CACpB,QAAW,UACX,MAAS,UACT,MAAS,QACT,UAAa,UACb,MAAS,UACT,MAAS,SACZ,EAGKC,EAAe5G,GACA0G,EAAe1G,CAAQ,GAAK0G,EAAeG,QAK1DC,EAAgB9G,GACX2G,EAAgB3G,CAAQ,GAAK,UAIlC+G,EAAaA,CAAC/G,EAAUgH,IAAc,CACxC,MAAMC,EAAQ,YAAYH,EAAa9G,CAAQ,CAAC,UAC1CkH,EAAWN,EAAY5G,CAAQ,EAErC,MAAO,IAAAmH,EAAAC,EAAA,gBACWF,EAAQ,oBAAuBD,CAChD,OACJ,EAGKI,EAAiBA,IACF,SACDC,UAAU,EAAGrB,EAAU9G,KAAK,EAI1CgE,EAAkBC,GAAa,CACjC,GAAI,CAACA,EAAU,MAAO,GACtB,GAAIA,EAASmD,QAAU,GAAI,OAAOnD,EAElC,MAAMmE,EAAenE,EAASoE,YAAY,GAAG,EAC7C,GAAID,IAAiB,GAAI,OAAOnE,EAASqE,MAAM,EAAG,CAAC,EAAI,MAEvD,MAAMnF,EAAYc,EAASqE,MAAMF,CAAY,EACvClE,EAAOD,EAASqE,MAAM,EAAGF,CAAY,EAC3C,OAAIlE,EAAKkD,QAAU,EAAUnD,EACtBC,EAAKoE,MAAM,EAAG,CAAC,EAAI,MAAQnF,CACrC,EAGKoF,EAAqBC,GAAU,CACjC,MAAMC,EAAWD,EAAMA,EAAMpB,OAAS,CAAC,EAIvC,OAFqBoB,EAAMnB,KAAKrG,GAAQA,EAAKsG,OAAO,EAYhDU,EAAA,8BAAAA,KAAAC,EAAA,gBAEsBR,EAAYgB,EAASC,SAAS,EAAC,MAAS,YAAYf,EAAac,EAASC,SAAS,CAAC,SAASV,uBACpGS,EAAS5K,MAAQqK,GAAgB,KAXhDF,EAAA,8BAAAA,KAAAC,EAAA,gBAEsBR,EAAYgB,EAASC,SAAS,EAAC,MAAS,YAAYf,EAAac,EAASC,SAAS,CAAC,WAASV,qBAAAW,GAAA,WAa1H,gkLCjQYC,GAA0B,IAAM,CACzC,MAAMC,EAAa,IAAI,gBACjBC,EAASD,EAAW,OAkB1B,MAAO,CACH,WAAAA,EACA,OAAAC,EACA,aAlBiB,IAAM,CAEvB,GAAKD,EAAW,OAAO,QASnB,QAAQ,IAAI,gBAAgB,MAR5B,IAAI,CACA,QAAQ,IAAI,UAAU,EACtBA,EAAW,MAAO,EAClB,QAAQ,IAAI,QAAQ,CACvB,OAAQ5O,EAAO,CACZ,QAAQ,MAAM,WAAYA,CAAK,CAC/C,CAIK,CAMA,CACL,EAqBa8O,GAAqB,CAACC,EAAaC,IAAkB,CAC9D,KAAM,CAAE,QAAA3B,EAAS,aAAA4B,CAAY,EAAKD,EAG9B3B,GAAW,OAAOA,EAAQ,MAAU,MACpCA,EAAQ,MAAQ,IAGhB4B,GAAgB,OAAOA,EAAa,MAAU,MAC9CA,EAAa,MAAQ,IAIrBF,GAAeA,EAAY,OAAS,cAEhC,CAACA,EAAY,SAAWA,EAAY,UAAY,GAChDA,EAAY,QAAU,QACdA,EAAY,QAAQ,SAAS,OAAO,IAC5CA,EAAY,SAAW,UAIvBA,EAAY,YAAc,SAC1BA,EAAY,UAAY,UACjBA,EAAY,WAAa,CAACA,EAAY,UAAU,SAAS,KAAK,IACrEA,EAAY,WAAa,UAGrC,EA8HaG,GAAqB,MAAOC,EAAQ7P,IAAW,CACxD,GAAI,CAAC6P,GAAU,CAAC7P,EACZ,eAAQ,MAAM,0CAA2C,CAAE,OAAA6P,EAAQ,OAAA7P,CAAM,CAAE,EACpE,GAGX,QAAQ,IAAI,yBAA0B,CAAE,OAAA6P,EAAQ,OAAA7P,CAAM,CAAE,EAExD,GAAI,CAEA,MAAM8P,EAAUzQ,EAAW,QACrB0Q,EAAS1Q,EAAW,OAE1B,QAAQ,IAAI,yBAA0B,GAAGyQ,CAAO,kBAAkBD,CAAM,OAAO,EAE/E,MAAMzP,EAAW,MAAM,MAAM,GAAG0P,CAAO,kBAAkBD,CAAM,QAAS,CACpE,OAAQ,OACR,QAAS,CACL,eAAgB,mBAChB,cAAiB,UAAUE,CAAM,EACpC,EACD,KAAM,KAAK,UAAU,CACjB,KAAM/P,CACT,EACb,CAAS,EAEKoE,EAAS,MAAMhE,EAAS,KAAM,EAEpC,OAAIA,EAAS,IACT,QAAQ,IAAI,0BAA2B,CACnC,OAAQA,EAAS,OACjB,OAAQgE,CACxB,CAAa,EACM,KAEP,QAAQ,MAAM,0BAA2B,CACrC,OAAQhE,EAAS,OACjB,OAAQgE,CACxB,CAAa,EACM,GAEd,OAAQ1D,EAAO,CACZ,eAAQ,MAAM,0BAA2BA,CAAK,EACvC,EACf,CACA,ECvPO,SAASsP,IAAqB,CA2GnC,MAAO,CACL,sBArG4B,CAACC,EAAUC,EAAeC,IAAuB,CACxEA,EAAmB,QACtBA,EAAmB,MAAQ,IAG7B,GAAI,CAEE,CAACF,EAAS,WAAaA,EAAS,YAAc,SAChDA,EAAS,UAAYC,GAAiB,GAGtCD,EAAS,WAAaC,GAAiB,EAE1C,OAAQtI,EAAG,CACV,QAAQ,MAAM,YAAaA,CAAC,CAClC,CACG,EAsFC,oBA3E0B,CAC1BqI,EACAG,EACAD,EACAE,EACAC,EACA5N,IACG,CACEyN,EAAmB,QACtBA,EAAmB,MAAQ,IAG7B,GAAI,CAEGF,EAAS,QAGZA,EAAS,SAAWG,GAAQ,GAF5BH,EAAS,QAAUG,GAAQ,GAKzBA,GAAQ,CAACC,EAAY,OAEvB,WAAW,IAAM,CACX3N,EAAQ,OACV4N,EAAW5N,EAAQ,MAAO,EAAI,CAEjC,EAAE,EAAE,CAER,OAAQkF,EAAG,CACV,QAAQ,MAAM,YAAaA,CAAC,CAClC,CACG,EA6CC,gBAtCsB,CAACqI,EAAUlJ,IAAa,CAC9C,GAAI,CAEGkJ,EAAS,QACZA,EAAS,MAAQ,CAAE,GAIrBA,EAAS,MAAM,KAAKlJ,CAAQ,CAC7B,OAAQa,EAAG,CACV,QAAQ,MAAM,YAAaA,CAAC,CAClC,CACG,EA2BC,oBAlB0B,CAACqH,EAAOnN,EAAUiM,EAASoC,IAAuB,CAE5E,GADAA,EAAmB,MAAQ,GACvBrO,EAAS,MAAM,OAAS,EAAG,CAC7B,MAAMyO,EAA0BzO,EAAS,MAAM,CAAC,EAE5CyO,EAAwB,OAAS,aAAexC,EAAQ,QAE1DwC,EAAwB,cAAgBtB,EAExC,QAAQ,IAAI,WAAYA,EAAM,IAAIxH,GAAQ,GAAGA,EAAK,KAAK,IAAIA,EAAK,SAAS,IAAIA,EAAK,QAAU,QAAU,EAAE,EAAE,CAAC,EAEnH,CACG,CAOA,CACH,CChHO,MAAMkE,GAAuB,CAACC,EAAcC,EAAY,KACxDD,EAGDA,EAAa,KACRA,EAAa,KAAK,OAASC,EAAYD,EAAa,KAAK,UAAU,EAAGC,CAAS,EAAI,MAAQD,EAAa,KAI7GA,EAAa,cAAgBA,EAAa,aAAa,KAAI,EACtDA,EAAa,aAAa,OAASC,EAAYD,EAAa,aAAa,UAAU,EAAGC,CAAS,EAAI,MAAQD,EAAa,aAI1H,MAAMA,EAAa,GAAG,UAAU,EAAG,CAAC,CAAC,MAblB,MAqBf4E,GAA2BC,GAAoB,CAC1D,MAAMC,EAAQ,IAAI,KAClBA,EAAM,SAAS,EAAG,EAAG,EAAG,CAAC,EAEzB,MAAMC,EAAY,IAAI,KAAKD,CAAK,EAChCC,EAAU,QAAQA,EAAU,QAAO,EAAK,CAAC,EAEzC,MAAMC,EAAgB,IAAI,KAAKF,CAAK,EACpCE,EAAc,QAAQA,EAAc,QAAO,EAAK,CAAC,EAGjD,MAAMC,EAAS,CACb,MAAO,CAAE,EACT,UAAW,CAAE,EACb,SAAU,CAAE,EACZ,MAAO,CAAE,CACV,EAGD,OAAAJ,EAAiB,QAAQ7E,GAAgB,CAEvC,IAAIkF,EACAlF,EAAa,WAEfkF,EAAa,IAAI,KAAKlF,EAAa,WAAa,GAAI,EAEpDkF,EAAa,IAAI,KAInB,MAAMC,EAAa,IAAI,KAAKD,CAAU,EACtCC,EAAW,SAAS,EAAG,EAAG,EAAG,CAAC,EAE1BA,EAAW,QAAO,IAAOL,EAAM,QAAO,EACxCG,EAAO,MAAM,KAAKjF,CAAY,EACrBmF,EAAW,QAAS,IAAKJ,EAAU,QAAO,EACnDE,EAAO,UAAU,KAAKjF,CAAY,EACzBmF,EAAW,QAAS,GAAIH,EAAc,QAAO,EACtDC,EAAO,SAAS,KAAKjF,CAAY,EAEjCiF,EAAO,MAAM,KAAKjF,CAAY,CAEpC,CAAG,EAEMiF,CACT,EAQaG,GAAW,CAACC,EAAIC,IAAU,CACrC,IAAIC,EAAQ,KAEZ,OAAO,YAAaC,EAAM,CACpBD,GAAO,aAAaA,CAAK,EAC7BA,EAAQ,WAAW,IAAM,CACvBF,EAAG,MAAM,KAAMG,CAAI,EACnBD,EAAQ,IACT,EAAED,CAAK,CACT,CACH,EAYaG,GAAyB,CAAC,CACrC,sBAAAC,EACA,SAAAxP,EACA,mBAAAyP,EACA,iCAAAC,EACA,kBAAAC,EACA,sBAAAC,CACF,IAAM,CAEJA,EAAuB,EACvBJ,EAAsB,MAAQ,GAC9BxP,EAAS,MAAQ,CAAE,EAEnByP,EAAmB,MAAQ,CAAE,EAC7BC,EAAiC,MAAQ,GAErCC,IACFA,EAAkB,MAAQ,GAE9B,yIC6BME,GAAqB,kCAlBrB,MAAAC,EAAczI,EAAI,IAAI,EACtB4E,EAAU5E,EAAI,EAAK,EACnBwG,EAAexG,EAAI,EAAK,EACxB+D,EAAS/D,EAAI,EAAK,EAClBgE,EAAQhE,EAAI,EAAK,EACjBzG,EAAUyG,EAAI,IAAI,EAClBgH,EAAqBhH,EAAI,EAAK,EAC9BrH,EAAWqH,EAAI,EAAE,EACjBnH,EAAemH,EAAI,EAAE,EACrBkH,EAAclH,EAAI,EAAK,EAGvBsH,EAAmBtH,EAAI,EAAE,EACzBmI,EAAwBnI,EAAI,EAAE,EAC9B0I,EAAc1I,EAAI,CAAC,EACnB9H,EAAW8H,EAAI,EAAE,EACjB2I,EAAkB3I,EAAI,EAAI,EAC1BuD,EAAcvD,EAAI,EAAK,EAEvB4I,EAA0B5I,EAAI,EAAK,EAGnC6I,EAAuB7I,EAAI,EAAI,EAC/B8I,EAA2B9I,EAAI,EAAK,EACpC+I,EAAyB/I,EAAI,EAAI,EAGjCgJ,EAAmBhJ,EAAI,EAAK,EAC5BiJ,EAAcjJ,EAAI,EAAE,EACpBkJ,EAAmBlJ,EAAI,EAAE,EAGzBmJ,EAAmBnJ,EAAI,EAAK,EAC5BoJ,EAAoBpJ,EAAI,EAAE,EAG1BqJ,EAAgBrJ,EAAI,IAAI,EAExBsJ,EAAmBtJ,EAAI,EAAE,EAEzBoI,EAAqBpI,EAAI,EAAE,EAE3BqI,EAAmCrI,EAAI,EAAE,EAEzCuJ,EAA0BvJ,EAAI,IAAI,EAElCwJ,EAAuBxJ,EAAI,IAAI,EAE/ByJ,EAAiBzJ,EAAI,EAAK,EAE1BsI,EAAoBtI,EAAI,EAAI,EAG5B0J,GAA4B1J,EAAI,CAClC,WACA,YACA,UACH,EAGK2J,GAAY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EACtD9S,GAAS8S,GAAU,IAAI,QAAQ,EAC/BC,GAAWD,GAAU,IAAI,UAAU,EAEzC,QAAQ,IAAI,aAAc,CAAE,OAAA9S,GAAQ,SAAA+S,GAAU,EAE9CtH,GAAU,IAAM,CAEFS,GAAA,EACD,yBAAgB,aAAa,aAAc,OAAO,EAC9C8G,GAAA,EAChB,EAGK,MAAAC,GAA2B5H,GAAS,IAAM,CACtC,MAAAO,EAAe6E,EAAiB,MAAM,QAAUyC,EAAE,KAAO5B,EAAsB,KAAK,EACnF,OAAA3F,GAAqBC,EAAc,EAAE,EAC/C,EAGKuH,GAAuB9H,GAAS,IAC3BmF,GAAyBC,EAAiB,KAAK,CACzD,EAGKuC,GAAe,SAAY,CAEzB,IACahR,EAAA,MAAQ,MAAM4G,GAAiB,QACvClI,EAAO,CACJ,cAAM,aAAcA,CAAK,EAGrCqR,EAAwB,MAAQ,GAE5B,IAEM,MAAAqB,EAAsB,MAAMnT,GAAuB,CACrD,MAAO,GACP,QAAS,cACZ,EAED,GAAImT,GAAuB,MAAM,QAAQA,CAAmB,EAAG,CAC3D3C,EAAiB,MAAQ2C,EAGJpB,EAAA,MAAQoB,EAAoB,QAAU,GAGrD,MAAAC,EAAwB,MAAMvO,GAAuB,EACvDuO,GACA/B,EAAsB,MAAQ+B,EAC9B5B,EAAkB,MAAQ,GAC1B,MAAM6B,GAAwBD,CAAqB,IAGnD/B,EAAsB,MAAQ,GAC9BxP,EAAS,MAAQ,CAAC,EAClB2P,EAAkB,MAAQ,GAE1BmB,EAAe,MAAQ,IAIvBQ,EAAoB,SAAW,IAC/B9B,EAAsB,MAAQ,GAC9BxP,EAAS,MAAQ,CAAC,EAClB2P,EAAkB,MAAQ,GAC1BmB,EAAe,MAAQ,GAC3B,MAEQ,cAAM,qBAAsBQ,CAAmB,EAEvD9B,EAAsB,MAAQ,GAC9BxP,EAAS,MAAQ,CAAC,EAClB2P,EAAkB,MAAQ,GAC1BmB,EAAe,MAAQ,SAEtBlS,EAAO,CACJ,cAAM,eAAgBA,CAAK,EAEnC4Q,EAAsB,MAAQ,GAC9BxP,EAAS,MAAQ,CAAC,EAClB2P,EAAkB,MAAQ,GAC1BmB,EAAe,MAAQ,UACzB,CAEEb,EAAwB,MAAQ,GAExC,EAGMuB,GAA0B,MAAOnS,EAAgBoS,EAAY,GAAMhE,EAAS,OAAS,CACvF,GAAI,CAACpO,EACD,eAAQ,MAAM,iBAAiB,EACxB,GAGP,IAEYuL,EAAA,MAAQ,CAAA6G,EAEhBA,IACAX,EAAe,MAAQ,IAIvBW,IACAhC,EAAmB,MAAQ,CAAC,GAI5BgC,IACA1B,EAAY,MAAQ,EACpBC,EAAgB,MAAQ,GACxBhQ,EAAS,MAAQ,CAAC,GAGtB,MAAM5B,EAAU,CACZ,KAAM2R,EAAY,MAClB,SAAUxQ,EAAS,MACnB,OAAAkO,CACJ,EAEMiE,EAAkB,MAAMtS,GAA6BC,EAAgBjB,CAAO,EAGlF,GAAIqP,GAAA,MAAAA,EAAQ,SAAWpO,IAAmBmQ,EAAsB,MAC5D,eAAQ,IAAI,qBAAqB,EAC1B,GAGP,GAAAkC,EAAgB,OAAS,GAarB,GAXAD,EACAzR,EAAS,MAAQ0R,EAGjB1R,EAAS,MAAQ,CAAC,GAAG0R,EAAiB,GAAG1R,EAAS,KAAK,EAI3CgQ,EAAA,MAAQ0B,EAAgB,QAAUnS,EAAS,MAGvDkS,GAAaC,EAAgB,OAAS,EAAG,CAEnC,MAAAC,GAAoBD,EAAgB,OAAO/R,GAAOA,EAAI,OAAS,aAAeA,EAAI,EAAE,EACtF,GAAAgS,GAAkB,OAAS,EAAG,CAG9B,MAAMtO,EADuBsO,GAAkBA,GAAkB,OAAS,CAAC,EACpC,GAAG,QAAQ,aAAc,EAAE,EAGlEC,GAAwBvO,CAAS,EACrC,OAGAoO,IACAzR,EAAS,MAAQ,CAAC,GAEtBgQ,EAAgB,MAAQ,GAIxB,OAAAhQ,EAAS,OAAS,MAAM,QAAQA,EAAS,KAAK,GAAKA,EAAS,MAAM,OAAS,EAGxE,SACFpB,EAAO,CACJ,qBAAM,cAAeA,CAAK,EAElCoR,EAAgB,MAAQ,GACpByB,IACAzR,EAAS,MAAQ,CAAC,GAEf,UACT,CAEE4K,EAAY,MAAQ,GAEpBkG,EAAe,MAAQ,GAE/B,EAGMe,GAAuB3C,GAAS,MAAO7P,EAAgBmO,IAAe,CACpE,IAEInO,IAAmBmQ,EAAsB,OACzC,MAAMgC,GAAwBnS,EAAgB,GAAMmO,EAAW,MAAM,QAEpE5O,EAAO,CAERA,EAAM,OAAS,cACP,cAAM,YAAaA,CAAK,EAGpCkS,EAAe,MAAQ,UACzB,CAEMD,EAAqB,QAAUrD,IAC/BqD,EAAqB,MAAQ,KACjC,GAEL,GAAG,EAGAiB,GAA2B,MAAOC,GAAW,CAC/C,MAAMpN,EAAQoN,EAAO,MAGrB,GAAI,OAAOpN,GAAU,UAAYA,EAAM,WAAW,SAAS,EAAG,CACpD,MAAAtF,EAAiBsF,EAAM,UAAU,CAAC,EAGxC8L,EAAkB,MAAQpR,EAC1BmR,EAAiB,MAAQ,GAEzB,OAIJ,GAAI7L,IAAU,MAAO,CACM4K,GAAA,CACnB,sBAAAC,EACA,SAAAxP,EACA,mBAAAyP,EACA,iCAAAC,EACA,kBAAAC,EACA,sBAAuB5I,EAAA,CAC1B,EACD,OAIA,GAAApC,IAAU6K,EAAsB,MAAO,CAoBvC,GAlBAC,EAAmB,MAAQ,CAAC,EAC5BC,EAAiC,MAAQ,GAGzCF,EAAsB,MAAQ7K,EAE9BmM,EAAe,MAAQ,GAEvB9Q,EAAS,MAAQ,CAAC,EAElB2P,EAAkB,MAAQ,GAGtBiB,EAAwB,OACxB,aAAaA,EAAwB,KAAK,EAI1CC,EAAqB,MACjB,IACAA,EAAqB,MAAM,MAAM,EACjC,QAAQ,IAAI,cAAc,QACrBjS,EAAO,CACJ,cAAM,aAAcA,CAAK,EAKnC,MAAA4O,EAAa,IAAI,gBACvBqD,EAAqB,MAAQrD,EAG7BqE,GAAqBlN,EAAO6I,CAAU,EAE9C,EAGMwE,GAAkB,SAAY,CAChC,GAAI,GAAChC,EAAgB,OAAS,CAACR,EAAsB,OAAS5E,EAAY,OAEtE,IACAA,EAAY,MAAQ,GACpBmF,EAAY,OAAS,EACf,MAAAyB,GAAwBhC,EAAsB,MAAO,EAAK,SAClE,CACE5E,EAAY,MAAQ,GAE5B,EAIMK,GAAgBnF,GAAM,UAENX,EAAAW,EAAE,SAAF,YAAAX,EAAU,YAAa,IACxB0K,IAAsBG,EAAgB,OAASR,EAAsB,OAAS,CAAC5E,EAAY,OACxFoH,GAAA,CAExB,EAQMC,GAAe,CAACtN,EAAO,CAAE,MAAA2D,KAAY,CAC3C,EAGM4J,GAAe,gBAAkB,CAEnC,MAAMhP,GAAiB,EAEAqM,GAAA,CACnB,sBAAAC,EACA,SAAAxP,EACA,mBAAAyP,EACA,iCAAAC,EACA,kBAAAC,EACA,sBAAuB5I,EAAA,CAC1B,CACL,EAGMoL,GAAS,gBAAkB,CACzB,IAEA,GAAI,CAAClG,EAAQ,OAAS,CAAC4B,EAAa,MAAO,CACvC,QAAQ,IAAI,iBAAiB,EAC7B,OAIJ5B,EAAQ,MAAQ,GAChB4B,EAAa,MAAQ,GACrBQ,EAAmB,MAAQ,GAGrB,MAAAF,EAAWnO,EAAS,MAAM,CAAC,EAGjC0N,GAAmBS,EAAU,CAAE,QAAAlC,EAAS,aAAA4B,CAAA,CAAc,EAGtD,MAAMuE,EAAgBtC,EAAY,MAClCA,EAAY,MAAQ,KAGpB,MAAM/B,EAAS2C,EAAc,MAI7B,GAHAA,EAAc,MAAQ,KAGlB3C,EACI,IAEM,MAAAD,GAAmBC,EAAQ7P,EAAM,QAClCmU,EAAW,CACR,cAAM,aAAcA,CAAS,EAK7C,GAAID,EACI,IACcA,EAAA,QACTE,EAAY,CACT,cAAM,WAAYA,CAAU,SAGvC1T,EAAO,CACJ,cAAM,aAAcA,CAAK,EAEjCqN,EAAQ,MAAQ,GAChB4B,EAAa,MAAQ,GACrBiC,EAAY,MAAQ,KACpBY,EAAc,MAAQ,KAE9B,EAGMpF,GAAkB,SAAUC,EAAMnN,EAAS,CAE7C,MAAMkK,EAAQlK,EAAQ,MAEtB,GAAImN,IAAS,OACFH,EAAA,MAAQ,CAACA,EAAO,MACvBC,EAAM,MAAQ,WACPE,IAAS,MACVF,EAAA,MAAQ,CAACA,EAAM,MACrBD,EAAO,MAAQ,WACRG,IAAS,SAAU,CAC1B,MAAMgH,EAAYvS,EAAS,MAAMsI,EAAQ,CAAC,EAAE,QAC5CkK,GAAWD,CAAS,EAE5B,EAGMC,GAAa,SAAUC,EAAY,CACrC,GAAI5E,EAAa,MACb,OAIJ,IAAI6E,EAAc,GACd5R,EAAQ,CAAC,EASb,GAPI,OAAO2R,GAAe,SACRC,EAAAD,EACP,OAAOA,GAAe,WAC7BC,EAAcD,EAAW,SAAW,GAC5B3R,EAAA2R,EAAW,OAAS,CAAC,GAG7B,CAACC,GAAe5R,EAAM,SAAW,EACjC,OAIJ6O,EAAkB,MAAQ,GAGpB,MAAA/P,EAAciB,GAAkB6R,EAAa5R,CAAK,EAC/Cd,EAAA,MAAM,QAAQJ,CAAW,EAI5B,MAAAE,EAAmBiB,GAAuB,EAAI,EAC3Cf,EAAA,MAAM,QAAQF,CAAgB,EAGvC6S,GAAmBD,EAAa5R,CAAK,CACzC,EAGM6R,GAAqB,MAAOF,EAAY3R,EAAQ,KAAO,QACzDmL,EAAQ,MAAQ,GAChB4B,EAAa,MAAQ,GACrBQ,EAAmB,MAAQ,GAC3BqC,EAAc,MAAQ,KACtBC,EAAiB,MAAQ,KACnB,MAAAxC,EAAWnO,EAAS,MAAM,CAAC,EAG3B,CACF,sBAAA4S,EACA,oBAAAC,EACA,gBAAAC,GACA,oBAAAC,GACA7E,GAAmB,EAGjB5N,IAAqB6E,GAAAnF,EAAS,MAAM,CAAC,IAAhB,YAAAmF,GAAmB,QAAS,OAASnF,EAAS,MAAM,CAAC,EAAE,QAAUyS,EAEtFtR,GAAWpB,GAAoBC,EAAS,MAAOM,EAAoBJ,EAAa,KAAK,EAGrF,CAAc,OAAAuN,GAAQ,aAAAuF,IAAiBzF,GAAwB,EACrEuC,EAAY,MAAQkD,GAEhB,IAEA,MAAM9M,GAAiB,CACnB,OAAAuH,GACA,gBAAiB+B,EAAsB,OAAS,GAChD,MAAO1O,EAAM,OAAS,EAAIA,EAAQ,MACtC,EAEM,MAAAmF,GACF9E,GACA,CAEI,YAAciN,GAAkB,CAExB,CAACnC,EAAQ,OAAS,CAAC4B,EAAa,OAKd+E,EAAAzE,EAAUC,EAAeC,CAAkB,CACrE,EAGA,UAAYC,GAAS,CAEb,CAACrC,EAAQ,OAAS,CAAC4B,EAAa,OAKpCgF,EACI1E,EACAG,EACAD,EACAE,EACA0E,GACArS,CACJ,CACJ,EAGA,YAAcqE,GAAa,CAEnB,CAACgH,EAAQ,OAAS,CAAC4B,EAAa,OAKpCiF,GAAgB3E,EAAUlJ,CAAQ,CACtC,EAGA,QAAUiO,GAAiB,CACf,cAAM,WAAYA,CAAY,EACxB9K,EAAA,MAAM8K,GAAgB,MAAM,EAG1CjH,EAAQ,MAAQ,GAChB4B,EAAa,MAAQ,GACrBM,EAAS,QAAU,GACnBA,EAAS,aAAe,GACfA,EAAA,QAAU,SAAS+E,CAAY,EAC5C,EAGA,WAAY,CAACxQ,EAASuF,KAAY,CACtB,YAAI,YAAavF,EAASuF,EAAO,EAGzCgE,EAAQ,MAAQ,GAChB4B,EAAa,MAAQ,GAEjBM,IACAA,EAAS,QAAU,GACnBA,EAAS,aAAe,IAGvBzL,EAUG8M,EAAsB,OAEtBtO,GAA+BsO,EAAsB,MAAO,CACxD,SAAUxP,EAAS,MACnB,WAAamT,IAAa,CACtB,GAAI,CAACA,GAAU,CACX,QAAQ,IAAI,gBAAgB,EAC5B,OAGI,YAAI,eAAgBA,EAAQ,EAGpCxE,EAAiB,MAAQA,EAAiB,MAAM,IAAoB7E,IAC5DA,GAAa,KAAO0F,EAAsB,MACnC,CACH,GAAG1F,GACH,KAAMqJ,EACV,EAEGrJ,EACV,EACL,CACH,EAAE,MAAelL,IAAA,CACN,cAAM,aAAcA,EAAK,EACpC,GAlCG,aAAK,WAAYqJ,EAAO,EAC5BkG,IACKA,EAAS,UACDA,EAAA,QAAU,UAAUlG,IAAW,MAAM,MAoC1DmL,GAAS,IAAM,CACPxS,EAAQ,OACWqS,GAAArS,EAAQ,MAAO,EAAI,CAC1C,CACH,CACL,EAGA,uBAAyByS,GAAO,CACpB,YAAI,UAAWA,CAAE,EACrBA,GAAMA,IAAO7D,EAAsB,QACnCA,EAAsB,MAAQ6D,EAEDC,GAAA,EAErC,EAGA,kBAAoBD,GAAO,CACvB1C,EAAiB,MAAQ0C,EAErBA,GAAMlF,GAAYA,EAAS,OAAS,aACpCoF,GAA8BF,CAAE,CAExC,EAGA,eAAiBA,GAAO,CACpB3C,EAAc,MAAQ2C,CAC1B,EAGA,gBAAkBlG,GAAU,CAEJ4F,EAAA5F,EAAOnN,EAAUiM,EAASoC,CAAkB,EAExE,EACAnI,EACJ,QACK/C,GAAK,CACF,cAAM,UAAWA,EAAG,EAC5B8I,EAAQ,MAAQ,GAChB4B,EAAa,MAAQ,GAGjBM,IACAA,EAAS,QAAU,GACnBA,EAAS,aAAe,GACxBA,EAAS,QAAU,WAAWhL,GAAI,SAAW,MAAM,IAIvDiF,EAAc,MAAM,YAAcjF,GAAI,SAAW,OAAO,EAEhE,EAGMqQ,GAAwB,SAAY,CACtC,GAAI,GAACtD,EAAqB,OAASC,EAAyB,OAExD,IACAA,EAAyB,MAAQ,GAGjC,MAAMsD,EAAS9E,EAAiB,MAAM,OAAS,EACzCA,EAAiB,MAAMA,EAAiB,MAAM,OAAS,CAAC,EAAE,GAC1D,KAEN,GAAI,CAAC8E,EAAQ,CACTvD,EAAqB,MAAQ,GAC7B,OAIE,MAAAwD,EAAoB,MAAMvV,GAAuB,CACnD,QAASsV,EACT,MAAO,GACP,QAAS,cACZ,EAEGC,GAAqB,MAAM,QAAQA,CAAiB,GAAKA,EAAkB,OAAS,GAEpF/E,EAAiB,MAAQ,CAAC,GAAGA,EAAiB,MAAO,GAAG+E,CAAiB,EAGpDxD,EAAA,MAAQwD,EAAkB,QAAU,IAEzDxD,EAAqB,MAAQ,SAE5BtR,EAAO,CACJ,cAAM,YAAaA,CAAK,SAClC,CACEuR,EAAyB,MAAQ,GAEzC,EAGMwD,GAAwB,IAAM,CACTpE,GAAA,CACnB,sBAAAC,EACA,SAAAxP,EACA,mBAAAyP,EACA,iCAAAC,EACA,kBAAAC,EACA,sBAAuB5I,EAAA,CAC1B,CACL,EAGM6M,GAA2B,MAAO,CAAE,eAAAvU,EAAgB,KAAAwJ,KAAW,CAC7D,IAEA,MAAMvG,EAAS,MAAML,GAAmB5C,EAAgB,CAAE,KAAAwJ,EAAM,EAGhE8F,EAAiB,MAAQA,EAAiB,MAAM,IAAoB7E,GAC5DA,EAAa,KAAOzK,EACb,CACH,GAAGyK,EACH,KAAMxH,EAAO,MAAQuG,CACzB,EAEGiB,CACV,QAEIlL,EAAO,CACJ,cAAM,WAAYA,CAAK,EAGvC,EAGMiV,GAAwB,CAAC,CAAE,eAAAxU,KAAqB,CAElD,MAAMyK,EAAe6E,EAAiB,MAAM,KAAUyC,KAAE,KAAO/R,CAAc,EACxEyK,IAGL6E,EAAiB,MAAQA,EAAiB,MAAM,OAAYyC,KAAE,KAAO/R,CAAc,EAGlEsP,EAAA,MAAM,QAAQ7E,CAAY,EAC/C,EAGMgK,GAAsB,CAAC,CAAE,eAAAzU,KAAqB,CAChDkR,EAAiB,MAAQlR,EAGzB,MAAMyK,EAAe6E,EAAiB,MAAM,KAAUyC,KAAE,KAAO/R,CAAc,EACzEyK,IACAwG,EAAY,MAAQxG,EAAa,MAAQD,GAAqBC,EAAc,GAAG,GAGnFuG,EAAiB,MAAQ,EAC7B,EAGM0D,GAAgB,IAAM,CACpBxD,EAAiB,OAASD,EAAY,MAAM,QACnBsD,GAAA,CACrB,eAAgBrD,EAAiB,MACjC,KAAMD,EAAY,MAAM,KAAK,EAChC,EAELD,EAAiB,MAAQ,GACzBC,EAAY,MAAQ,GACpBC,EAAiB,MAAQ,EAC7B,EAGMyD,GAAe,IAAM,CACvB3D,EAAiB,MAAQ,GACzBC,EAAY,MAAQ,GACpBC,EAAiB,MAAQ,EAC7B,EAGM0D,GAAgB,SAAY,CAC1B,IAACxD,EAAkB,MAAO,CAC1BD,EAAiB,MAAQ,GACzB,OAGA,IAEA,MAAMlO,EAAS,MAAMS,GAAmB0N,EAAkB,KAAK,EAG9C9B,EAAA,MAAQA,EAAiB,MAAM,UAAYyC,EAAE,KAAOX,EAAkB,KAAK,EAGxFjB,EAAsB,QAAUiB,EAAkB,OAC3BlB,GAAA,CACnB,sBAAAC,EACA,SAAAxP,EACA,mBAAAyP,EACA,iCAAAC,EACA,kBAAAC,EACA,sBAAuB5I,EAAA,CAC1B,QAEAnI,EAAO,CACJ,cAAM,UAAWA,CAAK,SAEhC,CAEE4R,EAAiB,MAAQ,GACzBC,EAAkB,MAAQ,GAElC,EAGMyD,GAAe,IAAM,CACvB1D,EAAiB,MAAQ,GACzBC,EAAkB,MAAQ,EAC9B,EAGM0D,GAA2BC,GAAa,CAE1C5B,GAAW4B,CAAQ,EAEnB3E,EAAmB,MAAQ,CAAC,EAC5BC,EAAiC,MAAQ,EAC7C,EAGMkC,GAA0B,MAAOvO,GAAc,CACjD,GAAKA,EAED,IACM,MAAAgR,EAAY,MAAMjR,GAAsBC,CAAS,EACnDgR,GAAa,MAAM,QAAQA,CAAS,GAAKA,EAAU,OAAS,GAC5D5E,EAAmB,MAAQ4E,EAC3B3E,EAAiC,MAAQF,EAAsB,OAE/DC,EAAmB,MAAQ,CAAC,QAE3B7Q,EAAO,CACJ,cAAM,YAAaA,CAAK,EAChC6Q,EAAmB,MAAQ,CAAC,EAEpC,EAGM8D,GAAgCrE,GAAU7L,GAAc,CAC1DuO,GAAwBvO,CAAS,GAClC,GAAG,EAGAiQ,GAA+BpE,GAAS,SAAY,CAClD,IACM,MAAAjM,EAAgB,MAAM9E,GAAuB,CAC/C,MAAO,GACP,QAAS,cACZ,EACG8E,GAAiB,MAAM,QAAQA,CAAa,IAC5C0L,EAAiB,MAAQ1L,EACJiN,EAAA,MAAQjN,EAAc,QAAU,UAEpDrE,EAAO,CACJ,cAAM,YAAaA,CAAK,IAErC,GAAG,EAGA0V,GAAgB,IAAM,CACDlE,EAAA,MAAQ,CAACA,EAAuB,KAC3D,EAGAxE,GAAY,IAAM,CAEVgF,EAAwB,OACxB,aAAaA,EAAwB,KAAK,EAI1CC,EAAqB,OACrBA,EAAqB,MAAM,MAAM,CACrC,CACH,EAGK,MAAA0D,GAAsBC,GAAgD,CAChE,YAAI,0BAA2BA,CAAO,EAE9C1D,EAAe,MAAQ,GACvBb,EAAwB,MAAQ,GAChCjQ,EAAS,MAAQ,CAAC,EAElByP,EAAmB,MAAQ,CAAC,EAC5BC,EAAiC,MAAQ,GAI5BwB,GAAA,CACjB","names":["API_CONFIG","createApiUrl","path","customBaseUrl","urlString","switchModel","modelId","model","m","ensureUserId","urlUserId","userId","getServerConversations","options","url","response","errorText","data","a","b","dateA","error","extractThinkingContent","content","THINK_START_TAG","THINK_END_TAG","reasoning","processedContent","thinkMatch","getServerConversationHistory","conversationId","page","pageSize","convertServerMessagesToAppFormat","serverMessages","formattedMessages","msg","userMessage","file","assistantMessage","buildMessageHistory","chatList","currentMessage","systemPrompt","messageLimit","hasSystemPrompt","messagesToSend","currentUserMessage","i","processedMessages","item","messageKey","scrollToBottom","chatRef","createUserMessage","files","createAssistantMessage","isDeepThinking","baseMessage","autoRenameConversationIfNeeded","messages","messageCount","conversationTurns","currentConversation","conv","conversationContent","sortedMessages","timeA","timeB","dialogPairs","currentPair","recentPairs","pair","renameResult","renameConversation","generateArticleTitle","__vitePreload","titleGenerated","generatedTitle","result","output","title","defaultRenameResult","success","workflowError","requestBody","responseText","responseData","deleteConversation","getCurrentConversation","conversations","clearChatHistory","err","getSuggestedQuestions","messageId","sendChatRequest","handleStreamResponse","responsePromise","callbacks","onMessage","onError","onComplete","onReasoning","onWorkflowSteps","onConversationIdChange","onMessageIdChange","onTaskIdChange","onFileEvent","reader","decoder","buffer","isInThinkingMode","conversation_id","workflowSteps","currentLoadingNodeId","done","value","lines","line","answer","thinkContent","parts","fileData","nodeTitle","_a","nodeId","_b","inferNodeType","titleLower","nodeType","_c","prevNodeIndex","step","nodeObj","nodeIndex","e","streamError","errorMsg","chatWithModel","requestOptions","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","loadSystemPrompt","resetConversation","MAX_FILE_SIZE","MAX_FILES","emit","__emit","query","ref","fileInput","isUploading","uploadProgress","uploadedFiles","supportedExtensions","fileTypeMap","fileIconMap","getFileIcon","extension","fileType","handleSend","message","handleStop","triggerFileInput","MessagePlugin","removeFile","index","_","formatFileSize","bytes","sizes","formatFileName","fileName","name","isFileTypeSupported","filename","isFileDuplicate","handleFileSelected","event","formData","progressInterval","currentModelId","currentModel","computed","modelOptions","handleModelChange","newModelId","onMounted","handleMenuClick","getConversationTitle","conversation","maxLength","ThemeMode","setThemeMode","mode","getThemeMode","initTheme","savedTheme","prefersDarkMode","scrollThreshold","useRouter","props","__props","conversationsListRef","loadingMore","hasToday","hasYesterday","hasLastWeek","hasOlder","handleScroll","element","currentTheme","isGood","isBad","handleOperation","type","dot","dotsCount","dotsInterval","setInterval","onUnmounted","clearInterval","isWorkflowCompleted","length","some","loading","nodeTypeToIcon","nodeTypeToColor","getNodeIcon","default","getNodeColor","getNodeDot","isLoading","color","iconName","_createVNode2","_resolveComponent2","getLoadingDots","substring","lastDotIndex","lastIndexOf","slice","getCollapseHeader","steps","lastStep","node_type","_createTextVNode","createRequestController","controller","signal","handleRequestAbort","lastMessage","stateControls","isStreamLoad","stopStreamResponse","taskId","baseURL","apiKey","useMessageHandlers","lastItem","reasoningText","firstTokenReceived","text","isScrolling","scrollFunc","currentAssistantMessage","groupConversationsByDate","conversationList","today","yesterday","lastWeekStart","groups","updateTime","updateDate","debounce","fn","delay","timer","args","resetConversationState","currentConversationId","suggestedQuestions","suggestedQuestionsConversationId","isNewConversation","resetConversationFunc","scrollTopThreshold","fetchCancel","currentPage","hasMoreMessages","conversationListLoading","hasMoreConversations","loadingMoreConversations","showConversationDrawer","showRenameDialog","renameInput","currentEditingId","showDeleteDialog","currentDeletingId","currentTaskId","currentMessageId","switchConversationTimer","activeLoadController","historyLoading","defaultSuggestedQuestions","urlParams","userName","initChatData","currentConversationTitle","c","groupedConversations","serverConversations","defaultConversationId","loadConversationHistory","resetPage","historyMessages","assistantMessages","fetchSuggestedQuestions","debouncedLoadHistory","handleConversationSelect","option","loadMoreHistory","handleChange","clearConfirm","onStop","abortFunction","stopError","abortError","userQuery","inputEnter","inputValue","messageText","handleModelRequest","handleReasoningUpdate","handleMessageUpdate","handleFileEvent","handleWorkflowSteps","abortRequest","scrollChatToBottom","errorMessage","newTitle","nextTick","id","loadConversationListDebounce","getSuggestedQuestionsDebounce","loadMoreConversations","lastId","moreConversations","handleNewConversation","handleRenameConversation","handlePinConversation","showRenameDialogFor","confirmRename","cancelRename","confirmDelete","cancelDelete","handleSuggestedQuestion","question","questions","toggleSidebar","handleModelChanged","payload"],"ignoreList":[],"sources":["../../static/api/config.js","../../static/api/chat.js","../../static/api/model.js","../../src/app/index/comps/ChatSender.vue","../../src/app/index/comps/HeaderNav.vue","../../src/app/index/comps/ConversationGroup.vue","../../static/api/theme.js","../../src/app/index/comps/ConversationSidebar.vue","../../src/app/index/comps/ChatAction.vue","../../src/app/index/comps/ChatItem.vue","../../static/api/request.js","../../static/api/messageHandlers.js","../../static/api/conversationUtils.js","../../src/app/index/index.vue"],"sourcesContent":["/**\n * API配置文件\n * 统一管理API的基础URL和密钥\n */\n\n/**\n * API基础配置\n */\nexport const API_CONFIG = {\n    baseURL: 'https://api.dify.ai/v1', // 直接使用完整URL\n    workflowApiKey: 'app-6aRhLAp4zAppCJus5ViMgOsh', // 工作流API密钥（用于标题生成）\n    datasetApiKey: 'dataset-NU4Kg7Wtm1616AOnxnRAeFct', // 知识库API密钥\n    models: [{\n        id: 'DeepSeek-V3',\n        name: '作文评分 AI 智能体',\n        apiKey: 'app-mJY5qTsLUXT3jLAKgfNrTbxP',\n    }, {\n        id: 'DeepSeek-R1',\n        name: '星火深思(DeepSeek-R1)',\n        apiKey: 'app-2PAC8Jw4d0UxjZzFXL0nXRUa',\n    }, ],\n    defaultModel: 'DeepSeek-V3', // 默认选择的模型\n    apiKey: 'app-mJY5qTsLUXT3jLAKgfNrTbxP',\n    // defaultModel: 'ds-v3', // 默认选择的模型\n    // apiKey: 'app-g3VTn0kdurDWk5M2ehgsmmS9',\n\n    // 静态资源路径配置 - 根据服务器实际部署情况选择合适的路径\n    staticResourceBase: '../static', // 使用绝对路径，避开app前缀\n};\n\n/**\n * 创建API URL\n * @param {String} path - API路径\n * @param {String} customBaseUrl - 可选的自定义基础URL，默认使用API_CONFIG.baseURL\n * @returns {URL} 创建的URL对象\n */\nexport const createApiUrl = (path, customBaseUrl) => {\n    const baseUrl = customBaseUrl || API_CONFIG.baseURL;\n    const urlString = `${baseUrl}${path}`;\n    const isAbsoluteUrl = urlString.startsWith('http://') || urlString.startsWith('https://');\n    return isAbsoluteUrl ? new URL(urlString) : new URL(urlString, window.location.origin);\n};\n\n/**\n * 获取API配置\n * @returns {Object} API配置对象\n */\nexport const getApiConfig = () => {\n    return API_CONFIG;\n};\n\n/**\n * 重设API配置\n * @param {Object} newConfig - 新的配置对象\n */\nexport const updateAPIConfig = newConfig => {\n    if (newConfig.baseURL) {\n        API_CONFIG.baseURL = newConfig.baseURL;\n    }\n\n    if (newConfig.apiKey) {\n        API_CONFIG.apiKey = newConfig.apiKey;\n    }\n\n    if (newConfig.workflowApiKey) {\n        API_CONFIG.workflowApiKey = newConfig.workflowApiKey;\n    }\n\n    if (newConfig.datasetBaseURL) {\n        API_CONFIG.datasetBaseURL = newConfig.datasetBaseURL;\n    }\n\n    if (newConfig.datasetApiKey) {\n        API_CONFIG.datasetApiKey = newConfig.datasetApiKey;\n    }\n\n    if (newConfig.currentModel) {\n        const model = API_CONFIG.models.find(m => m.id === newConfig.currentModel);\n        if (model) {\n            API_CONFIG.currentModel = newConfig.currentModel;\n            // 自动更新API密钥\n            API_CONFIG.apiKey = model.apiKey;\n        }\n    }\n\n    console.log('API配置已更新:', API_CONFIG);\n    return API_CONFIG;\n};\n\n/**\n * 切换当前模型\n * @param {String} modelId - 模型ID\n * @returns {Object|null} 成功返回更新后的配置，失败返回null\n */\nexport const switchModel = modelId => {\n    const model = API_CONFIG.models.find(m => m.id === modelId);\n    if (!model) {\n        console.error('未找到指定的模型:', modelId);\n        return null;\n    }\n\n    // 更新当前模型和对应的API密钥\n    API_CONFIG.currentModel = modelId;\n    API_CONFIG.apiKey = model.apiKey;\n\n    console.log('已切换模型:', model.name);\n    return API_CONFIG;\n};","/**\n * 聊天历史管理和消息处理的公共函数\n */\n\n// 导入API配置\nimport { API_CONFIG, createApiUrl } from './config.js';\n\n/**\n * 确保用户ID存在\n * @returns {String} 用户ID\n */\nexport const ensureUserId = () => {\n    // 优先使用URL中的userId参数\n    const urlParams = new URLSearchParams(window.location.search);\n    const urlUserId = urlParams.get('userId');\n\n    // 如果URL中有userId，则使用它\n    if (urlUserId) {\n        // 将URL中的userId保存到localStorage，保持后续一致性\n        localStorage.setItem('dify_user_id', urlUserId);\n        return urlUserId;\n    }\n\n    // 否则使用localStorage中的用户ID，如果不存在则创建随机ID   \n    let userId = localStorage.getItem('dify_user_id');\n    if (!userId) {\n        // 生成随机用户ID\n        userId = 'user_' + Math.random().toString(36).substring(2, 15);\n        localStorage.setItem('dify_user_id', userId);\n    }\n    return userId;\n};\n\n/**\n * 获取服务器会话列表\n * @param {Object} options - 选项参数\n * @param {String} options.last_id - 当前页最后面一条记录的ID\n * @param {Number} options.limit - 一次请求返回多少条记录\n * @param {String} options.sort_by - 排序字段\n * @returns {Promise<Array>} 会话列表数组\n */\nexport const getServerConversations = async(options = {}) => {\n    try {\n        const userId = ensureUserId();\n\n        // 使用工具函数创建URL\n        const url = createApiUrl('/conversations');\n\n        // 添加用户ID，必选参数\n        url.searchParams.append('user', userId);\n\n        // 添加可选参数\n        if (options.last_id) {\n            url.searchParams.append('last_id', options.last_id);\n        }\n\n        if (options.limit) {\n            url.searchParams.append('limit', options.limit);\n        }\n\n        if (options.sort_by) {\n            url.searchParams.append('sort_by', options.sort_by);\n        }\n\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${API_CONFIG.apiKey}`\n            }\n        });\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`获取会话列表失败: ${response.status} ${errorText}`);\n        }\n\n        const data = await response.json();\n\n        // 按时间顺序排序会话，最新的在前面\n        if (data && Array.isArray(data.data)) {\n            data.data.sort((a, b) => {\n                const dateA = new Date(a.created_at || 0);\n                const dateB = new Date(b.created_at || 0);\n                return dateB - dateA;\n            });\n        }\n\n        return data.data || [];\n    } catch (error) {\n        console.error('获取会话列表失败:', error);\n        return [];\n    }\n};\n\n/**\n * 分析和提取思考内容\n * @param {string} content - 原始消息内容\n * @returns {Object} 包含处理后的内容和思考内容\n */\nconst extractThinkingContent = (content) => {\n    if (!content) return { content: '', reasoning: '' };\n\n    // 思考内容标签\n    const THINK_START_TAG = '<think>';\n    const THINK_END_TAG = '</think>';\n    let reasoning = '';\n    let processedContent = content;\n\n    if (content.includes(THINK_START_TAG) && content.includes(THINK_END_TAG)) {\n        try {\n            // 尝试提取<think>标签中的内容\n            const thinkMatch = content.match(/<think>([\\s\\S]*?)<\\/think>/);\n            if (thinkMatch && thinkMatch[1]) {\n                reasoning = thinkMatch[1].trim();\n            }\n\n            // 移除<think>标签及其内容\n            processedContent = content.replace(/<think>[\\s\\S]*?<\\/think>/, '').trim();\n        } catch (error) {\n            console.error('提取思考内容时出错:', error);\n            // 出错时回退到原始内容\n            processedContent = content;\n        }\n    }\n\n    return {\n        content: processedContent,\n        reasoning: reasoning\n    };\n};\n\n/**\n * 获取服务器会话历史\n * @param {String} conversationId - 会话ID\n * @param {Object} options - 选项\n * @param {Number} options.page - 页码\n * @param {Number} options.pageSize - 每页数量\n * @param {AbortSignal} options.signal - 用于取消请求的信号\n * @returns {Promise<Array>} 会话历史数组\n */\nexport const getServerConversationHistory = async(conversationId, options = {}) => {\n    if (!conversationId) {\n        return [];\n    }\n\n    try {\n        const userId = ensureUserId();\n\n        // 构建URL\n        const { page = 1, pageSize = 20 } = options;\n\n        // 使用工具函数创建URL\n        const url = createApiUrl('/messages');\n        url.searchParams.append('conversation_id', conversationId);\n        url.searchParams.append('user', userId);\n        url.searchParams.append('page', page);\n        url.searchParams.append('page_size', pageSize);\n\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${API_CONFIG.apiKey}`\n            },\n            // 添加AbortController的signal支持\n            signal: options.signal,\n        });\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`获取会话历史失败: ${response.status} ${errorText}`);\n        }\n\n        const data = await response.json();\n\n        if (data && data.data && Array.isArray(data.data)) {\n            // 转换服务器格式为应用程序格式\n            return convertServerMessagesToAppFormat(data.data, conversationId);\n        }\n\n        return [];\n    } catch (error) {\n        // AbortError是预期的错误，不用记录到控制台\n        if (error.name !== 'AbortError') {\n            console.error('获取服务器会话历史失败:', error);\n        }\n\n        // 将AbortError继续抛出以便上层处理\n        throw error;\n    }\n};\n\n/**\n * 将服务器返回的消息格式转换为应用程序格式\n * @param {Array} serverMessages - 服务器返回的消息数组\n * @param {String} conversationId - 对话ID\n * @returns {Array} 格式化后的消息数组\n */\nconst convertServerMessagesToAppFormat = (serverMessages, conversationId) => {\n    // 结果数组，将包含格式化后的消息\n    const formattedMessages = [];\n\n    // 分析服务器返回的每条消息\n    for (const msg of serverMessages) {\n        // 如果有query字段，创建用户消息\n        if (msg.query) {\n            // 创建基本用户消息\n            const userMessage = {\n                avatar: 'https://tdesign.gtimg.com/site/avatar.jpg', // 用户头像\n                name: '自己',\n                datetime: new Date(msg.created_at * 1000).toLocaleString(),\n                content: msg.query,\n                role: 'user',\n                id: msg.id + '_user'\n            };\n\n            // 如果有files字段，添加到用户消息中\n            if (msg.files && Array.isArray(msg.files) && msg.files.length > 0) {\n                userMessage.files = msg.files.map(file => ({\n                    id: file.id,\n                    filename: file.filename || file.name,\n                    type: file.type || 'document',\n                    size: file.size || 0,\n                    url: file.url || ''\n                }));\n            }\n\n            // 如果有message_files字段，添加到用户消息中\n            if (msg.message_files && Array.isArray(msg.message_files) && msg.message_files.length > 0) {\n                if (!userMessage.files) {\n                    userMessage.files = [];\n                }\n\n                msg.message_files.forEach(file => {\n                    userMessage.files.push({\n                        id: file.id,\n                        filename: file.filename || file.name,\n                        type: file.type || 'document',\n                        size: file.size || 0,\n                        url: file.url || ''\n                    });\n                });\n            }\n\n            formattedMessages.push(userMessage);\n        }\n\n        // 如果有answer字段，创建助手消息\n        if (msg.answer) {\n            // 提取思考内容\n            const { content, reasoning } = extractThinkingContent(msg.answer);\n\n            // 创建基本助手消息\n            const assistantMessage = {\n                avatar: `https://xinghuoshumei-chat-9d1az3cdd1955-1325585334.tcloudbaseapp.com/static/files/favicon.jpg`, // 修正路径，移除多余的static\n                name: '星火数媒',\n                datetime: new Date(msg.created_at * 1000).toLocaleString(),\n                content: content || '',\n                role: 'assistant',\n                ...(reasoning ? { reasoning } : {}), // 只有有思考内容时才添加\n                id: msg.id + '_assistant'\n            };\n\n            formattedMessages.push(assistantMessage);\n        }\n    }\n\n    // 后端API是倒序返回的(最新的在前面)，但前端显示需要正序，所以需要反转\n    formattedMessages.reverse();\n\n    return formattedMessages;\n};\n\n/**\n * 获取聊天历史\n * @param {String} conversationId - 会话ID\n * @param {Object} options - 分页选项\n * @returns {Promise<Array>} 聊天历史数组\n */\nexport const getChatHistory = async(conversationId, options = {}) => {\n    if (!conversationId) {\n        return [];\n    }\n\n    try {\n        // 从服务器获取会话历史\n        const messages = await getServerConversationHistory(conversationId, options);\n        if (messages && messages.length > 0) {\n            return messages;\n        } else {\n            return [];\n        }\n    } catch (err) {\n        console.error('获取聊天记录失败:', err);\n        return [];\n    }\n};\n\n/**\n * 构建消息历史用于API请求\n * @param {Array} chatList - 聊天记录\n * @param {string} currentMessage - 当前用户输入的消息\n * @param {string} systemPrompt - 系统提示词\n * @param {number} [messageLimit=10] - 消息数量限制\n * @returns {Array} 格式化后的消息历史\n */\nexport const buildMessageHistory = (chatList, currentMessage, systemPrompt, messageLimit = 10) => {\n    // 构建消息历史\n    let hasSystemPrompt = false;\n    let messagesToSend = [];\n\n    // 对于新消息，先确保我们明确知道当前的用户消息是什么\n    // 由于消息存储是倒序的，最新的用户消息应该在chatList的最前面（或者是currentMessage参数）\n    let currentUserMessage = currentMessage;\n\n    // 如果currentMessage为空，但chatList中有内容，则尝试从chatList获取最新用户消息\n    if (!currentUserMessage && chatList && chatList.length > 0) {\n        // 查找最新的用户消息（在chatList的前面）\n        for (let i = 0; i < chatList.length; i++) {\n            if (chatList[i].role === 'user' && chatList[i].content.trim() !== '') {\n                currentUserMessage = chatList[i].content;\n                break;\n            }\n        }\n    }\n\n    // 首先从chatList构建历史消息，但跳过最新的用户消息，因为我们会单独添加它\n    let processedMessages = new Set(); // 用于跟踪已处理过的消息\n\n    // 按照对话顺序处理消息（由于chatList是倒序的，我们需要反转处理）\n    for (let i = chatList.length - 1; i >= 0; i--) {\n        const item = chatList[i];\n\n        // 只考虑角色是用户、助手或系统且内容不为空的消息\n        if ((item.role === 'user' || item.role === 'assistant' || item.role === 'system') && item.content.trim() !== '') {\n            // 如果是用户消息，且与当前用户消息相同，则跳过，因为我们会在最后添加当前消息\n            if (item.role === 'user' && item.content === currentUserMessage) {\n                continue;\n            }\n\n            // 检查是否已经包含系统提示词\n            if (item.role === 'system') {\n                hasSystemPrompt = true;\n            }\n\n            // 将消息内容作为唯一键，防止重复\n            const messageKey = `${item.role}:${item.content}`;\n            if (!processedMessages.has(messageKey)) {\n                messagesToSend.push({\n                    role: item.role,\n                    content: item.content\n                });\n                processedMessages.add(messageKey);\n            }\n        }\n    }\n\n    // 添加当前的用户消息（确保只添加一次）\n    if (currentUserMessage && currentUserMessage.trim() !== '') {\n        const messageKey = `user:${currentUserMessage}`;\n        if (!processedMessages.has(messageKey)) {\n            messagesToSend.push({\n                role: 'user',\n                content: currentUserMessage\n            });\n        }\n    }\n\n    // 限制只取最近指定数量条消息\n    if (messagesToSend.length > messageLimit) {\n        messagesToSend = messagesToSend.slice(-messageLimit);\n    }\n\n    // 如果消息中没有系统提示词，且系统提示词存在，则添加到最前面\n    if (!hasSystemPrompt && systemPrompt) {\n        messagesToSend.unshift({\n            role: 'system',\n            content: systemPrompt\n        });\n    }\n\n    return messagesToSend;\n};\n\n/**\n * 滚动聊天窗口到底部\n * @param {Object} chatRef - 聊天容器的引用\n */\nexport const scrollToBottom = (chatRef) => {\n    if (chatRef) {\n        chatRef.scrollToBottom({\n            behavior: 'smooth',\n        });\n    }\n};\n\n/**\n * 创建用户消息对象\n * @param {string} content - 消息内容\n * @param {Array} files - 文件数组，可选\n * @returns {Object} 用户消息对象\n */\nexport const createUserMessage = (content, files = []) => {\n    const userMessage = {\n        avatar: 'https://tdesign.gtimg.com/site/avatar.jpg',\n        name: '自己',\n        datetime: new Date().toLocaleString(),\n        content: content || '',\n        role: 'user',\n    };\n\n    // 如果有文件，添加到消息对象\n    if (files && Array.isArray(files) && files.length > 0) {\n        userMessage.files = files.map(file => ({\n            id: file.upload_file_id || file.id,\n            filename: file.filename || file.name || '未命名文件',\n            type: file.type || 'document',\n            size: file.size || 0,\n            url: file.url || ''\n        }));\n    }\n\n    return userMessage;\n};\n\n/**\n * 创建助手消息对象\n * @param {boolean} isDeepThinking - 是否为深度思考模式\n * @returns {Object} 助手消息对象\n */\nexport const createAssistantMessage = (isDeepThinking = false) => {\n    const baseMessage = {\n        avatar: `https://xinghuoshumei-chat-9d1az3cdd1955-1325585334.tcloudbaseapp.com/static/files/favicon.jpg`, // 修正路径，移除多余的static\n        name: '星火数媒',\n        datetime: new Date().toLocaleString(),\n        content: '',\n        role: 'assistant',\n    };\n\n    if (isDeepThinking) {\n        return {\n            ...baseMessage,\n            reasoning: '思考中...'\n        };\n    }\n\n    return baseMessage;\n};\n\n/**\n * 自动重命名会话（如果需要）\n * 会在以下情况触发自动重命名：\n * 1. 新对话的前三次对话后\n * 2. 对话消息数量为5、10、15等（每5条消息）时\n * @param {String} conversationId - 会话ID\n * @param {Object} options - 选项\n * @param {Array} options.messages - 当前消息列表，可选，如提供则不再从服务器获取\n * @param {Function} options.onComplete - 完成回调函数\n */\nexport const autoRenameConversationIfNeeded = async(conversationId, options = {}) => {\n    try {\n        if (!conversationId) {\n            console.log('会话ID为空，跳过自动重命名');\n            return false;\n        }\n\n        // 获取当前会话的消息\n        let messages = options.messages || [];\n\n        if (!messages.length) {\n            messages = await getServerConversationHistory(conversationId);\n        }\n\n        const messageCount = messages.length;\n\n        // 计算用户和助手消息对的数量（一问一答算一轮对话）\n        // 由于每个消息都会创建用户和助手两条记录，所以总消息数除以2就是对话轮数\n        const conversationTurns = Math.floor(messageCount / 2);\n\n        // 获取当前会话信息，以检查是否已经有自定义名称\n        const conversations = await getServerConversations();\n        const currentConversation = conversations.find(conv => conv.id === conversationId);\n\n        // 判断是否需要执行自动重命名\n        // 条件：\n        // 1. 会话在前三轮对话后\n        // 2. 对话轮数为5、10、15等（每5轮执行一次）\n        // 3. 当前会话名称为空或是默认生成的名称\n        const needRename = (\n            // 新对话的前三轮，或者每5轮对话\n            (conversationTurns <= 3 || (conversationTurns >= 5 && conversationTurns % 5 === 0)) &&\n            // 会话没有名称或有默认名称\n            (!currentConversation || !currentConversation.name || currentConversation.name.startsWith('新对话') || currentConversation.name === 'New conversation')\n        );\n\n        if (needRename) {\n            console.log('[自动重命名] 需要重命名对话:', conversationId, '当前轮数:', conversationTurns);\n\n            try {\n                // 尝试使用工作流API生成标题\n                // 首先，提取对话内容\n                let conversationContent = '';\n\n                // 按照时间顺序添加消息内容（从旧到新）\n                // 确保按时间顺序排序\n                const sortedMessages = [...messages].sort((a, b) => {\n                    // 如果有datetime属性（毫秒时间戳），使用它来排序\n                    if (a.datetime && b.datetime) {\n                        return a.datetime - b.datetime;\n                    }\n                    // 如果有created_at属性（ISO日期字符串或秒级时间戳），使用它来排序\n                    if (a.created_at && b.created_at) {\n                        const timeA = typeof a.created_at === 'string' ? new Date(a.created_at).getTime() : a.created_at * 1000;\n                        const timeB = typeof b.created_at === 'string' ? new Date(b.created_at).getTime() : b.created_at * 1000;\n                        return timeA - timeB;\n                    }\n                    return 0; // 无法比较时保持原顺序\n                });\n\n                // 从所有消息中提取时间顺序下的\"对话轮次\"\n                const dialogPairs = [];\n                let currentPair = { user: null, assistant: null };\n\n                for (const msg of sortedMessages) {\n                    if (msg.role === 'user') {\n                        // 如果当前对中已有用户消息，创建新对\n                        if (currentPair.user !== null) {\n                            dialogPairs.push({...currentPair });\n                            currentPair = { user: null, assistant: null };\n                        }\n                        currentPair.user = msg.content;\n                    } else if (msg.role === 'assistant') {\n                        // 如果助手回复先于用户消息，创建新对\n                        if (currentPair.assistant !== null) {\n                            dialogPairs.push({...currentPair });\n                            currentPair = { user: null, assistant: null };\n                        }\n                        currentPair.assistant = msg.content;\n                    }\n                }\n\n                // 添加最后一对对话（如果有）\n                if (currentPair.user !== null || currentPair.assistant !== null) {\n                    dialogPairs.push(currentPair);\n                }\n\n                // 取最近的5轮完整对话（或全部，如果不足5轮）\n                const recentPairs = dialogPairs.slice(-5);\n\n                // 构建完整对话内容\n                for (let i = 0; i < recentPairs.length; i++) {\n                    const pair = recentPairs[i];\n                    conversationContent += `[第${i+1}轮]\\n`;\n                    if (pair.user) {\n                        conversationContent += `用户: ${pair.user}\\n`;\n                    }\n                    if (pair.assistant) {\n                        conversationContent += `助手: ${pair.assistant}\\n`;\n                    }\n                    conversationContent += '\\n';\n                }\n\n                console.log('[自动重命名] 提取的对话内容:', conversationContent.length, '字节');\n\n                // 如果消息内容为空，则使用默认重命名\n                if (!conversationContent.trim()) {\n                    console.log('[自动重命名] 消息内容为空，使用默认重命名方式');\n                    const renameResult = await renameConversation(conversationId, { auto_generate: true });\n                    if (!renameResult.success) {\n                        console.warn('[自动重命名] 默认重命名失败:', renameResult.message);\n                    }\n                    return renameResult.success;\n                }\n\n                // 导入工作流API\n                const { generateArticleTitle } = await\n                import ('/static/api/workflow.js');\n\n                let titleGenerated = false;\n                let generatedTitle = '';\n\n                // 调用工作流API生成标题\n                const result = await generateArticleTitle(conversationContent, {\n                    onOutput: async(output) => {\n                        if (output && output.text) {\n                            const title = output.text.trim();\n                            console.log('[自动重命名] 生成的标题:', title);\n\n                            if (title) {\n                                titleGenerated = true;\n                                generatedTitle = title;\n\n                                // 使用生成的标题重命名会话\n                                const renameResult = await renameConversation(conversationId, { name: title });\n\n                                // 处理重命名结果\n                                if (renameResult.success) {\n                                    console.log('[自动重命名] 重命名成功:', title);\n                                    // 调用完成回调\n                                    if (typeof options.onComplete === 'function') {\n                                        options.onComplete(title);\n                                    }\n                                } else {\n                                    console.error('[自动重命名] 重命名失败:', renameResult.message);\n                                    // 尝试使用默认重命名\n                                    console.log('[自动重命名] 尝试使用默认方式重命名');\n                                    const defaultRenameResult = await renameConversation(conversationId, { auto_generate: true });\n                                    if (defaultRenameResult.success && typeof options.onComplete === 'function') {\n                                        options.onComplete(defaultRenameResult.name || '');\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    onError: async(error) => {\n                        console.error('[自动重命名] 生成标题失败:', error);\n                        // 发生错误时使用默认方式重命名\n                        const renameResult = await renameConversation(conversationId, { auto_generate: true });\n                        if (renameResult.success && typeof options.onComplete === 'function') {\n                            options.onComplete(renameResult.name || '');\n                        }\n                    },\n                    onComplete: async(success) => {\n                        // 如果没有生成标题，但工作流执行成功，可能是没有返回标题或其他情况\n                        if (success && !titleGenerated) {\n                            console.warn('[自动重命名] 工作流执行成功但未生成标题，使用默认重命名');\n                            const renameResult = await renameConversation(conversationId, { auto_generate: true });\n                            if (renameResult.success && typeof options.onComplete === 'function') {\n                                options.onComplete(renameResult.name || '');\n                            }\n                        }\n                    }\n                }, {\n                    responseMode: 'streaming', // 改为流式传输模式\n                    userId: 'title-generator'\n                });\n\n                // 如果标题已生成，则已经处理过了，返回true\n                if (titleGenerated) {\n                    console.log('[自动重命名] 标题已生成并应用:', generatedTitle);\n                    return true;\n                }\n\n                // 如果工作流执行失败，使用默认重命名\n                if (!result.success) {\n                    console.warn('[自动重命名] 生成标题工作流执行失败，使用默认重命名');\n                    const renameResult = await renameConversation(conversationId, { auto_generate: true });\n                    return renameResult.success;\n                }\n\n                return true;\n\n            } catch (workflowError) {\n                console.error('[自动重命名] 使用工作流生成标题失败，回退到默认方式:', workflowError);\n                // 如果工作流API调用失败，使用默认API重命名\n                const renameResult = await renameConversation(conversationId, { auto_generate: true });\n                return renameResult.success;\n            }\n        }\n\n        return false;\n    } catch (error) {\n        console.error('[自动重命名] 自动重命名失败:', error);\n        return false;\n    }\n};\n\n/**\n * 重命名会话\n * @param {String} conversationId - 会话ID\n * @param {Object} options - 选项\n * @param {String} options.name - 名称，若auto_generate为true时可不传\n * @param {Boolean} options.auto_generate - 是否自动生成标题，默认false\n * @returns {Promise<Object>} 请求结果\n */\nexport const renameConversation = async(conversationId, options = {}) => {\n    const userId = ensureUserId();\n\n    try {\n        // 创建请求体\n        const requestBody = {\n            user: userId\n        };\n\n        // 添加name或auto_generate\n        if (options.auto_generate) {\n            requestBody.auto_generate = true;\n        } else if (options.name) {\n            requestBody.name = options.name;\n        }\n\n        console.log(`[重命名] 尝试重命名会话 ${conversationId}`, {\n            auto_generate: options.auto_generate,\n            name: options.name,\n            API地址: `${API_CONFIG.baseURL}/conversations/${conversationId}/name`\n        });\n\n        const response = await fetch(`${API_CONFIG.baseURL}/conversations/${conversationId}/name`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${API_CONFIG.apiKey}`\n            },\n            body: JSON.stringify(requestBody)\n        });\n\n        // 获取响应文本，无论成功还是失败\n        const responseText = await response.text();\n        let responseData;\n\n        try {\n            // 尝试解析为JSON\n            responseData = JSON.parse(responseText);\n        } catch (e) {\n            // 如果不是JSON，保留原始文本\n            responseData = responseText;\n        }\n\n        if (!response.ok) {\n            console.error(`[重命名] 重命名会话失败: ${response.status}`, responseData);\n            // 不抛出异常，而是返回错误对象\n            return {\n                success: false,\n                status: response.status,\n                error: responseData,\n                message: `重命名会话失败: ${response.status}`\n            };\n        }\n\n        console.log(`[重命名] 会话重命名成功: ${conversationId}`, responseData);\n        return {\n            success: true,\n            ...responseData\n        };\n    } catch (error) {\n        console.error('[重命名] 重命名会话错误:', error);\n        // 不抛出异常，返回错误信息\n        return {\n            success: false,\n            error: error,\n            message: error.message || '重命名会话失败'\n        };\n    }\n};\n\n/**\n * 删除会话\n * @param {String} conversationId - 会话ID\n * @returns {Promise<Object>} 请求结果\n */\nexport const deleteConversation = async(conversationId) => {\n    const userId = ensureUserId();\n\n    try {\n        // 创建请求体\n        const requestBody = {\n            user: userId,\n        };\n\n        const response = await fetch(`${API_CONFIG.baseURL}/conversations/${conversationId}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${API_CONFIG.apiKey}`\n            },\n            body: JSON.stringify(requestBody)\n        });\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`删除会话失败: ${response.status} ${errorText}`);\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('删除会话错误:', error);\n        throw error;\n    }\n};\n\n/**\n * 获取当前会话或创建新会话\n * 返回会话列表中的第一个会话，如果没有则返回空字符串\n * @returns {Promise<String>} 会话ID\n */\nexport const getCurrentConversation = async() => {\n    try {\n        // 获取会话列表\n        const conversations = await getServerConversations({ limit: 1 });\n\n        // 如果有会话，返回第一个会话的ID\n        if (conversations && conversations.length > 0) {\n            return conversations[0].id;\n        }\n\n        // 如果没有会话，返回空字符串，表示创建新会话\n        return '';\n    } catch (error) {\n        console.error('获取当前会话失败:', error);\n        return '';\n    }\n};\n\n/**\n * 清空聊天历史\n * 在服务端没有直接清空历史的API，此函数仅重置当前状态\n * @param {String} conversationId - 会话ID\n * @returns {Promise<boolean>} 是否清空成功\n */\nexport const clearChatHistory = async(conversationId) => {\n    try {\n        if (conversationId) {\n            // 如果有会话ID，删除该会话\n            await deleteConversation(conversationId);\n        }\n        return true;\n    } catch (err) {\n        console.error('清空聊天记录失败:', err);\n        return false;\n    }\n};\n\n/**\n * 保存聊天历史到本地（兼容性实现，不再执行实际操作）\n * @param {Array} chatList - 聊天记录数组\n * @returns {Promise<boolean>} 始终返回true\n */\nexport const saveChatHistory = () => {\n    return Promise.resolve(true);\n};\n\n/**\n * 获取消息建议问题\n * @param {String} messageId - 消息ID\n * @returns {Promise<Array>} 建议问题列表\n */\nexport const getSuggestedQuestions = async(messageId) => {\n    try {\n        const userId = ensureUserId();\n\n        // 使用正确的API端点\n        const url = createApiUrl(`/messages/${messageId}/suggested`);\n        url.searchParams.append('user', userId);\n\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${API_CONFIG.apiKey}`\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error(`获取建议问题失败: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        // 检查返回数据结构\n        if (data && data.data && Array.isArray(data.data)) {\n            // 返回建议问题列表\n            return data.data;\n        } else {\n            return [];\n        }\n    } catch (error) {\n        console.error('获取建议问题失败:', error);\n        return [];\n    }\n};","// 导入chat.js中的函数\nimport {\n    ensureUserId,\n    getServerConversations as getConversationList,\n    getServerConversationHistory as getConversationHistory\n} from './chat.js';\n\n// 导入API配置\nimport { API_CONFIG, createApiUrl } from './config.js';\n\n/**\n * 模型配置\n */\nexport const modelConfig = {\n    'dify-api': {\n        instance: {\n            baseURL: API_CONFIG.baseURL,\n            apiKey: API_CONFIG.apiKey,\n            dangerouslyAllowBrowser: true\n        },\n        description: 'Dify API 模型'\n    }\n};\n\n/**\n * 获取模型实例\n * @returns {Object} 模型实例\n */\nexport const getModelInstance = () => {\n    return modelConfig['dify-api'].instance;\n};\n\n/**\n * 发送聊天请求\n * @param {Array} messages - 消息数组\n * @param {Object} options - 其他选项\n * @returns {Promise} 请求Promise\n */\nexport const sendChatRequest = async (messages, options = {}) => {\n    try {\n        const userId = ensureUserId();\n\n        // 使用工具函数创建URL\n        const url = createApiUrl('/chat-messages');\n        \n        // 获取最后一条用户消息\n        const lastMessage = messages[messages.length - 1];\n        \n        // 构建请求体\n        const requestBody = {\n            query: lastMessage.content, // 用最后一条消息作为query\n            user: userId,\n            response_mode: 'streaming',\n            inputs: {},\n        };\n        \n        // 添加对话ID (如果存在)\n        if (options.conversation_id) {\n            requestBody.conversation_id = options.conversation_id;\n        }\n        \n        // 添加文件列表 (如果存在)\n        if (options.files && Array.isArray(options.files) && options.files.length > 0) {\n            requestBody.files = options.files;\n        }\n\n        console.log('[Request] 发送请求:', requestBody);\n\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${API_CONFIG.apiKey}`\n            },\n            body: JSON.stringify(requestBody),\n            signal: options.signal\n        });\n\n        if (!response.ok) {\n            throw new Error(`请求失败: ${response.status}`);\n        }\n\n        return response;\n    } catch (error) {\n        console.error('发送聊天请求失败:', error);\n        throw error;\n    }\n};\n\n/**\n * 处理流式响应\n * @param {Promise} responsePromise - 响应Promise\n * @param {Object} callbacks - 回调函数对象\n */\nexport const handleStreamResponse = async (responsePromise, callbacks = {}) => {\n    const { onMessage, onError, onComplete, onReasoning, onWorkflowSteps, onConversationIdChange, onMessageIdChange, onTaskIdChange, onFileEvent } = callbacks;\n\n    try {\n        // 检查responsePromise是否已经被中断\n        if (responsePromise.signal && responsePromise.signal.aborted) {\n            console.log('[Stream] 请求已中断');\n            onComplete?.(false, '请求已中断');\n            return;\n        }\n\n        const response = await responsePromise;\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error('[Stream] API请求失败:', response.status, errorText);\n            throw new Error(`API请求失败: ${response.status} ${errorText}`);\n        }\n\n        console.log('[Stream] 开始处理流式响应');\n\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        let buffer = '';\n        let isInThinkingMode = false; // 追踪是否在思考模式中\n        let conversation_id = null; // 存储会话ID\n        let workflowSteps = []; // 初始化工作流步骤数组\n        let currentLoadingNodeId = null; // 追踪当前正在加载的节点ID\n\n        // 添加错误捕获包装\n        try {\n            while (true) {\n                // 检查是否请求已被中断（AbortController信号）\n                if (responsePromise.signal && responsePromise.signal.aborted) {\n                    console.log('[Stream] 检测到请求中断信号，停止处理流');\n                    break;\n                }\n\n                const { done, value } = await reader.read();\n\n                if (done) {\n                    console.log('[Stream] 流读取完成');\n                    break;\n                }\n\n                // 解码接收到的数据\n                buffer += decoder.decode(value, { stream: true });\n\n                // 处理缓冲区中的数据行\n                const lines = buffer.split('\\n');\n                buffer = lines.pop() || ''; // 最后一行可能不完整，保留到下一次\n\n                for (const line of lines) {\n                    if (!line.trim() || !line.startsWith('data: ')) continue;\n\n                    try {\n                        const data = JSON.parse(line.substring(6));\n\n                        // 输出事件类型\n                        // if (data.event) {\n                        //     console.log(`%c[Stream Event] 收到事件: ${data.event}`, 'color: #4CAF50; font-weight: bold;');\n                        //     console.log('%c[Stream Data]', 'color: #2196F3; font-weight: bold;', data);\n                        // }\n\n                        // 保存会话ID，不使用localStorage\n                        if (data.conversation_id && !conversation_id) {\n                            conversation_id = data.conversation_id;\n                            console.log(`%c[Stream] 获取会话ID: ${conversation_id}`, 'color: #9C27B0; font-weight: bold;');\n                            // 使用回调通知上层组件\n                            if (onConversationIdChange) {\n                                onConversationIdChange(conversation_id);\n                            }\n                        }\n\n                        // 处理Dify API返回格式\n                        if (data.event === 'message') {\n                            const answer = data.answer || '';\n\n                            // 检查是否包含思考过程\n                            if (answer.includes('<think>')) {\n                                isInThinkingMode = true;\n                                const thinkContent = answer.replace('<think>', '');\n                                console.log('%c[Stream] 进入思考模式', 'color: #FF9800; font-weight: bold;');\n                                onReasoning?.(thinkContent);\n                            } else if (answer.includes('</think>')) {\n                                const parts = answer.split('</think>');\n                                console.log('%c[Stream] 结束思考模式', 'color: #FF9800; font-weight: bold;');\n                                onReasoning?.(parts[0]);\n\n                                isInThinkingMode = false;\n\n                                if (parts.length > 1) {\n                                    onMessage?.(parts[1]);\n                                }\n                            } else if (isInThinkingMode) {\n                                // 在思考模式中\n                                onReasoning?.(answer);\n                            } else {\n                                // 普通消息内容\n                                onMessage?.(answer);\n                            }\n                        } else if (data.event === 'message_end') {\n                            console.log('%c[Stream] 收到消息结束事件: message_end', 'color: #4CAF50; font-weight: bold;');\n\n                            // 消息结束时，只保存消息ID，不直接获取建议问题\n                            if (data.message_id && onMessageIdChange) {\n                                // 通知消息ID变更\n                                onMessageIdChange(data.message_id);\n                            }\n\n                            // 保存任务ID\n                            if (data.task_id && onTaskIdChange) {\n                                onTaskIdChange(data.task_id);\n                            }\n                        } else if (data.event === 'message_file') {\n                            console.log('%c[Stream] 收到文件事件: message_file', 'color: #4CAF50; font-weight: bold;');\n                            \n                            // 处理文件事件数据\n                            if (onFileEvent && data.file) {\n                                // 构建文件数据对象\n                                const fileData = {\n                                    id: data.file.id,\n                                    filename: data.file.filename || data.file.name,\n                                    type: data.file.type || 'document',\n                                    size: data.file.size || 0,\n                                    url: data.file.url || ''\n                                };\n                                \n                                // 调用文件事件回调\n                                onFileEvent(fileData);\n                            }\n                        } else if (data.event === 'message_replace') {\n                            console.log('%c[Stream] 收到消息替换事件: message_replace', 'color: #4CAF50; font-weight: bold;');\n                            // 替换消息内容为审查后的内容\n                            onMessage?.(data.answer || '');\n                        } else if (data.event === 'tts_message') {\n                            console.log('%c[Stream] 收到TTS事件: tts_message', 'color: #4CAF50; font-weight: bold;');\n                        } else if (data.event === 'tts_message_end') {\n                            console.log('%c[Stream] 收到TTS结束事件: tts_message_end', 'color: #4CAF50; font-weight: bold;');\n                        } else if (data.event === 'workflow_started') {\n                            console.log('%c[Stream] 收到工作流开始事件: workflow_started', 'color: #4CAF50; font-weight: bold;');\n                        } else if (data.event === 'node_started') {\n                            console.log('%c[Stream] 收到节点开始事件: node_started', 'color: #4CAF50; font-weight: bold;');\n                            const nodeTitle = data.data?.title;\n                            const nodeId = data.data?.id || `node-${workflowSteps.length}`; // 获取或生成节点ID\n                            \n                            if (nodeTitle) {\n                                // 添加：根据节点标题推断节点类型\n                                const inferNodeType = (title) => {\n                                    const titleLower = title.toLowerCase();\n                                    \n                                    if (titleLower === '开始') return 'start';\n                                    if (titleLower.includes('http') || titleLower.includes('请求')) return 'http';\n                                    if (titleLower.includes('条件') || titleLower.includes('分支')) return 'condition';\n                                    if (titleLower.includes('时间')) return 'time';\n                                    if (titleLower.includes('搜索')) return 'search';\n                                    if (titleLower.includes('提取') || titleLower.includes('参数')) return 'extract';\n                                    if (titleLower.includes('web') || titleLower.includes('bocha')) return 'web';\n                                    if (titleLower.includes('文件')) return 'file';\n                                    if (titleLower.includes('模型') || titleLower.includes('总结')) return 'model';\n                                    if (titleLower.includes('回复')) return 'reply';\n                                    if (titleLower.includes('错误')) return 'error';\n                                    \n                                    return 'default';\n                                };\n                                \n                                // 优先使用API返回的类型，如果没有则根据标题推断\n                                const nodeType = data.data?.type || inferNodeType(nodeTitle);\n                                \n                                console.log('%c[Stream Node Started]', 'color: #2196F3; font-weight: bold;', { \n                                    title: nodeTitle,\n                                    type: nodeType,\n                                    id: nodeId\n                                });\n                                \n                                // 如果存在上一个加载中的节点，将其标记为已完成\n                                if (currentLoadingNodeId) {\n                                    const prevNodeIndex = workflowSteps.findIndex(step => step.id === currentLoadingNodeId);\n                                    if (prevNodeIndex !== -1) {\n                                        workflowSteps[prevNodeIndex].loading = false;\n                                        \n                                        // 发送更新后的工作流步骤\n                                        if (onWorkflowSteps) {\n                                            onWorkflowSteps([...workflowSteps]);\n                                        }\n                                    }\n                                }\n                                \n                                // 使用对象格式添加新节点，并标记为加载中\n                                const nodeObj = {\n                                    title: nodeTitle,\n                                    node_type: nodeType,\n                                    id: nodeId,\n                                    loading: true // 新节点初始状态为加载中\n                                };\n                                \n                                workflowSteps.push(nodeObj);\n                                currentLoadingNodeId = nodeId; // 更新当前加载节点ID\n                                \n                                if (onWorkflowSteps) {\n                                    onWorkflowSteps([...workflowSteps]);\n                                }\n                            }\n                        } else if (data.event === 'node_finished') {\n                            console.log('%c[Stream] 收到节点完成事件: node_finished', 'color: #4CAF50; font-weight: bold;');\n                            \n                            // 如果有当前加载中的节点，将其标记为已完成\n                            if (currentLoadingNodeId) {\n                                const nodeIndex = workflowSteps.findIndex(step => step.id === currentLoadingNodeId);\n                                if (nodeIndex !== -1) {\n                                    workflowSteps[nodeIndex].loading = false;\n                                    \n                                    // 发送更新后的工作流步骤\n                                    if (onWorkflowSteps) {\n                                        onWorkflowSteps([...workflowSteps]);\n                                    }\n                                }\n                                currentLoadingNodeId = null; // 清空当前加载节点ID\n                            }\n                        } else if (data.event === 'workflow_finished') {\n                            console.log('%c[Stream] 收到工作流完成事件: workflow_finished', 'color: #4CAF50; font-weight: bold;');\n                            // 确保所有节点都标记为已完成\n                            workflowSteps = workflowSteps.map(step => ({...step, loading: false}));\n                            \n                            // 发送最终的工作流步骤（全部已完成）\n                            if (onWorkflowSteps) {\n                                onWorkflowSteps([...workflowSteps]);\n                            }\n                            \n                            workflowSteps = []; // 清空工作流步骤数组\n                            currentLoadingNodeId = null; // 清空当前加载节点ID\n                        } else if (data.event === 'error') {\n                            console.error('%c[Stream] 收到错误事件: error', 'color: #F44336; font-weight: bold;');\n                            onError?.(data.message || '流处理错误');\n                        } else if (data.event === 'ping') {\n                            console.log('%c[Stream] 收到ping事件', 'color: #607D8B; font-style: italic;');\n                        }\n                    } catch (e) {\n                        console.error('%c[Stream] 解析流数据失败:', 'color: #F44336; font-weight: bold;', e);\n                    }\n                }\n            }\n        } catch (streamError) {\n            // 处理流处理过程中的错误\n            console.error('%c[Stream] 流处理过程中出错:', 'color: #F44336; font-weight: bold;', streamError);\n            const errorMsg = streamError.message || '';\n\n            // 扩展中断错误识别条件\n            if (streamError.name === 'AbortError' ||\n                errorMsg.includes('aborted') ||\n                errorMsg.includes('abort') ||\n                errorMsg.includes('BodyStreamBuffer was aborted') ||\n                errorMsg.includes('message channel closed') ||\n                errorMsg.includes('listener indicated an asynchronous response')) {\n\n                console.log('%c[Stream] 请求被中断', 'color: #FF9800; font-weight: bold;');\n                onComplete?.(false, '请求处理过程已中断');\n                return; // 直接返回，不再抛出错误\n            }\n            throw streamError; // 只有非中断类错误才重新抛出\n        } finally {\n            // 确保释放资源\n            try {\n                reader.releaseLock();\n                console.log('[Stream] 读取器已释放');\n            } catch (e) {\n                console.warn('[Stream] 释放读取锁时出错:', e);\n            }\n        }\n\n        console.log('[Stream] 流处理完成');\n        onComplete?.(true);\n    } catch (error) {\n        console.error('[Stream] 流式请求错误:', error);\n\n        // 判断是否是AbortError（请求被中断）\n        if (error.name === 'AbortError' ||\n            error.message.includes('aborted') ||\n            error.message.includes('BodyStreamBuffer was aborted')) {\n            console.log('[Stream] 请求中断错误');\n            onComplete?.(false, '请求已中断');\n        } else {\n            console.error('[Stream] 请求失败错误');\n            onError?.(error.message || '请求失败');\n            onComplete?.(false, error.message);\n        }\n    }\n};\n\n/**\n * 封装的请求方法\n * @param {Array} messages - 消息数组\n * @param {Object} callbacks - 回调函数\n * @param {Object} options - 其他选项\n * @returns {Object} 请求结果\n */\nexport const chatWithModel = async (messages, callbacks = {}, options = {}) => {\n    try {\n        // 直接使用传入的会话ID\n        const conversationId = options.conversation_id || '';\n        const requestOptions = {\n            ...options,\n            conversation_id: conversationId\n        };\n\n        console.log('[Chat] 开始聊天请求', {\n            conversationId: conversationId,\n            messageCount: messages.length,\n            hasSignal: !!options.signal\n        });\n\n        // 发送请求\n        const responsePromise = sendChatRequest(messages, requestOptions);\n\n        // 处理流式响应\n        try {\n            console.log('[Chat] 开始处理流式响应');\n            await handleStreamResponse(responsePromise, callbacks);\n            console.log('[Chat] 流式响应处理成功');\n            return { success: true };\n        } catch (streamError) {\n            // 专门处理流处理过程中的错误\n            console.error('[Chat] 流处理过程中出错:', streamError);\n\n            // 检查是否是中断或通道关闭错误\n            if (streamError.name === 'AbortError' ||\n                streamError.message?.includes('aborted') ||\n                streamError.message?.includes('message channel closed') ||\n                streamError.message?.includes('BodyStreamBuffer was aborted') ||\n                streamError.message?.includes('listener indicated an asynchronous response')) {\n\n                console.log('[Chat] 流处理被中断');\n                callbacks.onComplete?.(false, '请求已中断');\n                return { success: false, aborted: true, error: streamError };\n            }\n\n            // 其他错误传递给回调\n            console.error('[Chat] 流处理失败:', streamError.message || '未知错误');\n            callbacks.onError?.(streamError.message || '流处理失败');\n            callbacks.onComplete?.(false, streamError.message);\n            return { success: false, error: streamError };\n        }\n    } catch (error) {\n        console.error('[Chat] 聊天请求错误:', error);\n\n        // 检查是否是中断或通道关闭错误\n        if (error.name === 'AbortError' ||\n            error.message?.includes('aborted') ||\n            error.message?.includes('message channel closed') ||\n            error.message?.includes('BodyStreamBuffer was aborted') ||\n            error.message?.includes('listener indicated an asynchronous response')) {\n\n            console.log('[Chat] 聊天请求被中断');\n            callbacks.onComplete?.(false, '请求已中断');\n            return { success: false, aborted: true, error };\n        }\n\n        console.error('[Chat] 聊天请求失败:', error.message || '未知错误');\n        callbacks.onError?.(error.message || '请求失败');\n        callbacks.onComplete?.(false, error.message);\n        return { success: false, error };\n    }\n};\n\n/**\n * 加载系统提示词\n */\nexport const loadSystemPrompt = async () => {\n    try {\n        // 使用标准Fetch API替代uni.request\n        const response = await fetch('/static/files/prompt-copy.json');\n        if (response.ok) {\n            const data = await response.json();\n            return JSON.stringify(data);\n        } else {\n            console.error(`加载系统提示词失败: ${response.status}`);\n            return {\n                role: \"您是一个助手\",\n                tools: { description: \"\" },\n                rules: []\n            };\n        }\n    } catch (error) {\n        console.error('加载系统提示词失败:', error);\n        return {\n            role: \"您是一个助手\",\n            tools: { description: \"\" },\n            rules: []\n        };\n    }\n};\n\n/**\n * 重置对话\n */\nexport const resetConversation = () => {\n    try {\n        return true;\n    } catch (e) {\n        console.error('重置会话出错:', e);\n        return false;\n    }\n};","<template>\n  <div class=\"chat-sender\">\n    <!-- 上传文件项展示 -->\n    <div class=\"uploaded-files\" v-if=\"uploadedFiles.length > 0\">\n      <div class=\"files-scroll-container\">\n        <t-tag v-for=\"(file, index) in uploadedFiles\" :key=\"index\" theme=\"default\" variant=\"light\" shape=\"round\"\n          size=\"medium\" class=\"file-tag\">\n          <t-icon :name=\"getFileIcon(file.extension)\" class=\"file-icon\" />\n          <span class=\"file-name\">{{ formatFileName(file.name) }}</span>\n          <t-button theme=\"default\" variant=\"text\" size=\"small\" class=\"close-btn\" @click=\"removeFile(index)\">\n            <t-icon name=\"close\" />\n          </t-button>\n        </t-tag>\n      </div>\n    </div>\n    <div class=\"input-container\">\n      <div class=\"attach-button-wrapper\">\n        <input type=\"file\" ref=\"fileInput\" @change=\"handleFileSelected\" class=\"file-input\"\n          accept=\".txt,.md,.mdx,.pdf,.html,.xlsx,.xls,.docx,.csv,.htm,.markdown\" />\n        <t-button v-if=\"!isUploading\" theme=\"default\" variant=\"text\" class=\"attachment-btn\" @click=\"triggerFileInput\">\n          <template #icon><t-icon name=\"attach\" size=\"22px\" /></template>\n        </t-button>\n        <div v-else class=\"loading-container\">\n          <t-progress theme=\"circle\" size=\"40\" :percentage=\"uploadProgress\"\n            :color=\"{ from: '#108ee9', to: '#87d068' }\" />\n        </div>\n      </div>\n      <t-chat-input v-model=\"query\" :stop-disabled=\"loading\" :textarea-props=\"{\n        placeholder: '请输入消息...',\n        class: 'custom-textarea'\n      }\" @send=\"handleSend\" @stop=\"handleStop\" autosize>\n      </t-chat-input>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onUnmounted } from 'vue';\nimport { MessagePlugin, DialogPlugin, Progress as TProgress, Tag as TTag, Space as TSpace, Button as TButton } from 'tdesign-vue-next';\nimport { API_CONFIG } from '/static/api/config.js';\n\nconst props = defineProps({\n  loading: {\n    type: Boolean,\n    default: false\n  }\n});\n\nconst emit = defineEmits(['send', 'stop']);\n\nconst query = ref('');\nconst fileInput = ref<HTMLInputElement | null>(null);\nconst isUploading = ref(false);\nconst uploadProgress = ref(0);\nconst uploadedFiles = ref<Array<{ id: string, name: string, size: number, extension: string, mime_type: string }>>([]);\n\n// 支持的文件类型\nconst supportedExtensions = ['txt', 'md', 'mdx', 'pdf', 'html', 'xlsx', 'xls', 'docx', 'csv', 'htm', 'markdown'];\n\n// 最大文件大小(字节)\nconst MAX_FILE_SIZE = 2 * 1024 * 1024; // 2MB\n\n// 最大文件数量\nconst MAX_FILES = 3;\n\n// 文件类型映射\nconst fileTypeMap = {\n  // 文档\n  'txt': 'document',\n  'md': 'document',\n  'mdx': 'document',\n  'markdown': 'document',\n  'pdf': 'document',\n  'html': 'document',\n  'htm': 'document',\n  'xlsx': 'document',\n  'xls': 'document',\n  'docx': 'document',\n  'csv': 'document'\n};\n\n// 文件图标映射\nconst fileIconMap = {\n  'document': 'file-excel',\n  'default': 'file'\n};\n\nconst getFileIcon = (extension: string) => {\n  const fileType = fileTypeMap[extension.toLowerCase()] || 'default';\n  return fileIconMap[fileType] || 'file';\n};\n\nconst handleSend = (value: string) => {\n  if (!value.trim() && uploadedFiles.value.length === 0) return;\n\n  let message = value;\n  const files = uploadedFiles.value.map(file => ({\n    type: 'document', // 所有支持的类型都是文档类型\n    transfer_method: 'local_file',\n    upload_file_id: file.id,\n    // 使用filename属性以与chat.js一致\n    filename: file.name,\n    name: file.name,\n    extension: file.extension,\n    size: file.size\n  }));\n  \n  emit('send', { message, files });\n\n  // 清空已上传文件列表\n  uploadedFiles.value = [];\n};\n\nconst handleStop = () => {\n  emit('stop');\n};\n\nconst triggerFileInput = () => {\n  if (uploadedFiles.value.length >= MAX_FILES) {\n    MessagePlugin.warning(`最多只能上传${MAX_FILES}个附件`);\n    return;\n  }\n\n  if (fileInput.value) {\n    fileInput.value.click();\n  }\n};\n\nconst removeFile = (index: number) => {\n  uploadedFiles.value = uploadedFiles.value.filter((_, i) => i !== index);\n};\n\nconst formatFileSize = (bytes: number) => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\nconst formatFileName = (fileName: string): string => {\n  if (fileName.length <= 10) return fileName;\n  const extension = fileName.slice(fileName.lastIndexOf('.'));\n  const name = fileName.slice(0, fileName.lastIndexOf('.'));\n  if (name.length <= 7) return fileName; // 如果名称部分已经很短，保留全名\n  return name.slice(0, 7) + '...' + extension;\n};\n\nconst isFileTypeSupported = (filename: string): boolean => {\n  const extension = filename.slice((filename.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase();\n  return supportedExtensions.includes(extension);\n};\n\n// 检查文件是否已存在\nconst isFileDuplicate = (fileName: string): boolean => {\n  return uploadedFiles.value.some(file => file.name === fileName);\n};\n\nconst handleFileSelected = async (event: Event) => {\n  const input = event.target as HTMLInputElement;\n  const files = input.files;\n\n  if (!files || files.length === 0) {\n    return;\n  }\n\n  const file = files[0];\n  \n  // 检查是否已达到最大文件数量\n  if (uploadedFiles.value.length >= MAX_FILES) {\n    MessagePlugin.warning(`最多只能上传${MAX_FILES}个附件`);\n    // 重置文件输入框\n    if (fileInput.value) {\n      fileInput.value.value = '';\n    }\n    return;\n  }\n\n  // 检查是否重复文件\n  if (isFileDuplicate(file.name)) {\n    MessagePlugin.warning(`文件\"${file.name}\"已存在`);\n    // 重置文件输入框\n    if (fileInput.value) {\n      fileInput.value.value = '';\n    }\n    return;\n  }\n\n  // 检查文件类型\n  if (!isFileTypeSupported(file.name)) {\n    MessagePlugin.warning('暂不支持此类型的文件');\n    // 重置文件输入框\n    if (fileInput.value) {\n      fileInput.value.value = '';\n    }\n    return;\n  }\n\n  // 检查文件大小\n  if (file.size > MAX_FILE_SIZE) {\n    MessagePlugin.warning(`文件大小不能超过${formatFileSize(MAX_FILE_SIZE)}`);\n    // 重置文件输入框\n    if (fileInput.value) {\n      fileInput.value.value = '';\n    }\n    return;\n  }\n\n  // 设置上传状态\n  isUploading.value = true;\n  uploadProgress.value = 0;\n\n  try {\n    // 准备FormData\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // 获取URL中的userId参数\n    const urlParams = new URLSearchParams(window.location.search);\n    const urlUserId = urlParams.get('userId');\n    // 优先使用URL中的userId，如果没有则使用localStorage中的，如果都没有则使用'anonymous'\n    formData.append('user', urlUserId || localStorage.getItem('dify_user_id') || 'anonymous');\n\n    // 模拟进度\n    const progressInterval = setInterval(() => {\n      if (uploadProgress.value < 90) {\n        uploadProgress.value += 5;\n      }\n    }, 100);\n\n    // 发送上传请求\n    const response = await fetch(`${API_CONFIG.baseURL}/files/upload`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${API_CONFIG.apiKey}`\n      },\n      body: formData\n    });\n\n    clearInterval(progressInterval);\n    uploadProgress.value = 100;\n\n    if (!response.ok) {\n      throw new Error(`上传失败: ${response.status} ${response.statusText}`);\n    }\n\n    const result = await response.json();\n    \n    // 添加到上传文件列表\n    uploadedFiles.value.push({\n      id: result.id,\n      name: result.name,\n      size: result.size,\n      extension: result.extension,\n      mime_type: result.mime_type\n    });\n\n    // 显示成功消息\n    MessagePlugin.success(`上传成功`);\n  } catch (error: any) {\n    console.error('上传文件出错:', error);\n    MessagePlugin.error(error.message || '上传文件失败');\n  } finally {\n    // 重置上传状态\n    isUploading.value = false;\n    // 重置文件输入框\n    if (fileInput.value) {\n      fileInput.value.value = '';\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\">\n@import '/static/styles/variables.scss';\n\n.chat-sender {\n  padding: $comp-margin-s $comp-margin-xs 0;\n  display: flex;\n  flex-direction: column;\n}\n\n.uploaded-files {\n  padding: 4px 0;\n  width: 100%;\n}\n\n.files-scroll-container {\n  display: flex;\n  flex-wrap: nowrap;\n  overflow-x: auto;\n  scrollbar-width: thin;\n  -webkit-overflow-scrolling: touch;\n  padding: 4px 8px;\n  white-space: nowrap;\n}\n\n/* 隐藏滚动条但保留功能 */\n.files-scroll-container::-webkit-scrollbar {\n  height: 4px;\n}\n\n.files-scroll-container::-webkit-scrollbar-thumb {\n  background-color: rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n}\n\n.file-tag {\n  display: inline-flex;\n  align-items: center;\n  margin: 0 4px;\n  padding: 2px 6px 2px 10px;\n  background-color: var(--td-bg-color-container, $gray-color-1);\n  border-color: var(--td-component-border, $gray-color-3);\n  flex-shrink: 0;\n\n  .file-icon {\n    color: $success-color-7;\n    font-size: 16px;\n    margin-right: 6px;\n    flex-shrink: 0;\n  }\n\n  .file-name {\n    color: var(--td-text-color-primary, $font-gray-1);\n    max-width: 120px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  .close-btn {\n    width: 16px;\n    height: 16px;\n    margin-left: 8px;\n    padding: 0;\n    line-height: 1;\n    color: var(--td-text-color-secondary, $font-gray-3);\n\n    .t-icon {\n      font-size: 14px;\n    }\n\n    &:hover {\n      color: $error-color-6;\n      background: none;\n    }\n  }\n}\n\n.input-container {\n  display: flex;\n  align-items: center;\n  position: relative;\n}\n\n.attach-button-wrapper {\n  position: absolute;\n  left: 15px;\n  top: 50%;\n  transform: translateY(-50%);\n  z-index: 10;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.file-input {\n  position: absolute;\n  width: 0;\n  height: 0;\n  opacity: 0;\n  z-index: -1;\n}\n\n.attachment-btn {\n  color: var(--td-text-color-placeholder, $font-gray-4);\n  font-size: 22px;\n  padding: 2px 4px;\n\n  &:hover {\n    color: $brand-color-6;\n  }\n}\n\n.loading-container {\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.btn {\n  color: var(--td-text-color-placeholder, $font-gray-4);\n  border: none;\n\n  &:hover {\n    color: $brand-color-6;\n    border: none;\n    background: none;\n  }\n}\n\n.t-chat__footer .t-chat__footer__content {\n  margin-top: 0 !important;\n}\n\n/* 增加左侧内边距，为附件按钮腾出空间 */\n.t-textarea__inner {\n  padding-left: 55px !important;\n}\n</style>\n","<template>\n    <!-- 固定的头部导航栏 -->\n    <div class=\"fixed-header\" :class=\"{ 'sidebar-open': sidebarVisible, 'sidebar-closed': !sidebarVisible }\">\n        <!-- 左侧菜单图标，根据侧边栏状态控制显示 -->\n        <t-button variant=\"text\" class=\"menu-btn\" @click=\"$emit('open-drawer')\"\n            :class=\"{ 'menu-icon-visible': !sidebarVisible, 'menu-icon-hidden': sidebarVisible }\">\n            <t-icon name=\"menu\" />\n        </t-button>\n\n        <t-button variant=\"text\" class=\"menu-btn\" @click=\"$emit('new-conversation')\"\n            :class=\"{ 'menu-icon-visible': !sidebarVisible, 'menu-icon-hidden': sidebarVisible }\">\n            <t-icon name=\"chat-add\" />\n        </t-button>\n\n        <!-- 添加模型选择下拉菜单 -->\n        <div class=\"model-selector\">\n            <t-dropdown :options=\"modelOptions\" @click=\"handleModelChange\" trigger=\"click\" maxColumnWidth=\"300px\">\n                <t-button variant=\"text\" class=\"model-select-btn\">\n                    <template v-if=\"currentModel\">\n                        <span class=\"model-name\">{{ currentModel.name }}</span>\n                    </template>\n                    <t-icon name=\"chevron-down\" />\n                </t-button>\n            </t-dropdown>\n        </div>\n\n        <!-- 中间标题 -->\n        <!-- <div class=\"header-title\" :class=\"{'slide-right': sidebarVisible}\">\n            {{ title }}\n        </div>\n\n        <t-button variant=\"text\" class=\"header-icon\" style=\"visibility: hidden;\">\n            <t-icon name=\"add\" />\n        </t-button> -->\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, onMounted } from 'vue';\nimport { API_CONFIG, switchModel } from '/static/api/config.js';\n\ndefineProps({\n    title: {\n        type: String,\n        default: '新对话'\n    },\n    sidebarVisible: {\n        type: Boolean,\n        default: false\n    }\n});\n\nconst emit = defineEmits(['open-drawer', 'new-conversation', 'model-changed']);\n\n// 当前选中的模型\nconst currentModelId = ref(API_CONFIG.defaultModel);\n\n// 计算当前模型对象\nconst currentModel = computed(() => {\n    return API_CONFIG.models.find(model => model.id === currentModelId.value);\n});\n\n// 转换模型数据为下拉选项格式\nconst modelOptions = computed(() => {\n    return API_CONFIG.models.map(model => ({\n        content: model.name,\n        value: model.id,\n        prefixIcon: model.icon\n    }));\n});\n\n// 处理模型切换\nconst handleModelChange = (data: { value: string }) => {\n    const newModelId = data.value;\n    if (newModelId !== currentModelId.value) {\n        currentModelId.value = newModelId;\n        // 调用切换模型API\n        const config = switchModel(newModelId);\n        if (config) {\n            // 通知父组件模型已更改\n            emit('model-changed', {\n                modelId: newModelId,\n                model: currentModel.value\n            });\n        }\n    }\n};\n\n// 组件挂载时，确保当前模型已设置\nonMounted(() => {\n    // 如果API_CONFIG中已有currentModel，则使用它\n    if (API_CONFIG.currentModel) {\n        currentModelId.value = API_CONFIG.currentModel;\n    } else {\n        // 否则使用默认模型并初始化\n        switchModel(currentModelId.value);\n    }\n});\n</script>\n\n<style lang=\"scss\">\n@import '/static/styles/variables.scss';\n\n.fixed-header {\n    width: 100%;\n    padding: $comp-paddingTB-m $comp-paddingLR-m;\n    z-index: 100;\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    transition: transform 0.3s ease, margin-left 0.3s ease;\n    will-change: transform, margin-left;\n\n    .t-button {\n        transition: all 0.25s ease;\n\n        &:hover {\n            transform: translateY(-1px);\n        }\n    }\n\n    /* 模型选择器 */\n    .model-selector {\n        margin-right: 16px;\n\n        .model-select-btn {\n            display: flex;\n            align-items: center;\n            padding: 6px 12px;\n            border-radius: 4px;\n            background-color: transparent;\n\n            &:hover {\n                border-color: $brand-color;\n                background-color: rgba($brand-color, 0.05);\n            }\n\n            .model-icon {\n                margin-right: 6px;\n                font-size: 16px;\n            }\n\n            .model-name {\n                margin-right: 8px;\n                font-size: $font-size-body-small;\n                // max-width: 150px;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n            }\n        }\n    }\n\n    .header-icon {\n        color: $text-color-secondary;\n\n        &:hover {\n            color: $brand-color;\n        }\n    }\n\n    .header-placeholder {\n        /* 占位元素 */\n        width: 32px;\n        height: 32px;\n        transition: all 0.3s ease, opacity 0.3s ease, visibility 0.3s ease;\n\n        &.placeholder-visible {\n            visibility: visible;\n            opacity: 1;\n        }\n\n        &.placeholder-hidden {\n            visibility: hidden;\n            opacity: 0;\n        }\n    }\n\n    .header-title {\n        font-size: $font-size-body-medium;\n        color: $text-color-primary;\n        font-weight: 500;\n        text-align: center;\n        max-width: 80%;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        transition: transform 0.3s ease, margin-left 0.3s ease;\n\n        &.slide-right {\n            /* 侧边栏打开时，标题适应推动效果 */\n            transform: translateX(0);\n        }\n    }\n\n    &.sidebar-open {\n        /* 侧边栏打开 */\n        margin-left: 0;\n    }\n\n    &.sidebar-closed {\n        /* 侧边栏关闭 */\n        margin-left: 0;\n    }\n\n    /* 菜单图标显隐动画 */\n    .menu-btn {\n        padding: 0 8px;\n        margin-right: 8px;\n        /* 定义过渡属性 */\n        transition: opacity 0.3s ease,\n            transform 0.3s ease,\n            max-width 0.3s ease,\n            padding 0.3s ease,\n            margin 0.3s ease,\n            min-width 0.3s ease;\n\n        &.menu-icon-visible {\n            opacity: 1;\n            transform: scale(1);\n            max-width: 40px;\n            min-width: 32px;\n            padding: 0 8px;\n            margin-right: 8px;\n        }\n\n        &.menu-icon-hidden {\n            opacity: 0;\n            transform: scale(0.8);\n            max-width: 0;\n            min-width: 0;\n            padding-left: 0;\n            padding-right: 0;\n            margin-right: 0;\n            overflow: hidden;\n        }\n    }\n}\n\n:root[theme-mode=\"light\"] {\n    .fixed-header {\n        // background-color: $gray-color-1 !important;\n    }\n}\n\n:root[theme-mode=\"dark\"] {\n    .fixed-header {\n        // background-color: $bg-color-container !important;\n    }\n}\n</style>","<template>\n    <div class=\"conversation-group\">\n        <div class=\"group-title\">{{ title }}</div>\n        <t-list-item \n            v-for=\"conversation in conversations\" \n            :key=\"conversation.id\"\n            @click=\"$emit('select', conversation.id)\"\n            class=\"conversation-item\"\n            :class=\"{ 'active': conversation.id === currentConversationId }\"\n        >\n            <t-icon name=\"chat\" class=\"conversation-icon\" />\n            <span class=\"conversation-text\">{{ getConversationTitle(conversation) }}</span>\n            \n            <!-- 更多操作按钮及下拉菜单 - 改为hover触发 -->\n            <t-dropdown @click=\"handleMenuClick($event, conversation.id)\" trigger=\"hover\" :hide-after-click=\"false\">\n                <t-button \n                    variant=\"text\" \n                    shape=\"circle\" \n                    size=\"small\" \n                    class=\"more-btn\"\n                    @click.stop\n                >\n                    <t-icon name=\"more\" />\n                </t-button>\n                \n                <template #dropdown>\n                    <t-dropdown-menu>\n                        <t-dropdown-item :value=\"`pin-${conversation.id}`\">\n                            <div class=\"menu-item-content\">\n                                <t-icon name=\"pin\" class=\"menu-icon\" />\n                                <span>置顶对话</span>\n                            </div>\n                        </t-dropdown-item>\n                        <t-dropdown-item :value=\"`rename-${conversation.id}`\">\n                            <div class=\"menu-item-content\">\n                                <t-icon name=\"edit\" class=\"menu-icon\" />\n                                <span>重命名</span>\n                            </div>\n                        </t-dropdown-item>\n                        <t-dropdown-item :value=\"`delete-${conversation.id}`\" theme=\"error\">\n                            <div class=\"menu-item-content\">\n                                <t-icon name=\"delete\" class=\"menu-icon\" />\n                                <span>删除</span>\n                            </div>\n                        </t-dropdown-item>\n                    </t-dropdown-menu>\n                </template>\n            </t-dropdown>\n        </t-list-item>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\n// 组件属性\nconst props = defineProps({\n    title: {\n        type: String,\n        required: true\n    },\n    conversations: {\n        type: Array,\n        required: true\n    },\n    currentConversationId: {\n        type: String,\n        default: ''\n    }\n});\n\n// 定义事件\nconst emit = defineEmits(['select', 'pin-conversation', 'rename-conversation', 'delete-conversation']);\n\n// 处理菜单点击\nconst handleMenuClick = (data, conversationId) => {\n    // TDesign的dropdown @click事件返回的不是原生事件对象\n    // 所以不要尝试使用stopPropagation\n    const value = data?.value;\n    \n    if (!value) return;\n\n    // 处理置顶对话\n    if (value.startsWith('pin-')) {\n        emit('pin-conversation', conversationId);\n        return;\n    }\n\n    // 处理重命名对话\n    if (value.startsWith('rename-')) {\n        emit('rename-conversation', conversationId);\n        return;\n    }\n\n    // 处理删除对话\n    if (value.startsWith('delete-')) {\n        emit('delete-conversation', conversationId);\n        return;\n    }\n};\n\n// 获取对话显示标题的方法\nconst getConversationTitle = (conversation, maxLength = 20) => {\n    if (!conversation) return '新对话';\n\n    // 优先使用name字段\n    if (conversation.name) {\n        return conversation.name.length > maxLength\n            ? conversation.name.substring(0, maxLength) + '...'\n            : conversation.name;\n    }\n\n    // 其次尝试使用最近的用户消息作为标题\n    if (conversation.last_message && conversation.last_message.trim()) {\n        return conversation.last_message.length > maxLength\n            ? conversation.last_message.substring(0, maxLength) + '...'\n            : conversation.last_message;\n    }\n\n    // 如果没有名称和最近消息，使用ID的一部分\n    return `对话 ${conversation.id.substring(0, 8)}...`;\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import '/static/styles/variables.scss';\n\n/* 对话列表抽屉样式 */\n.conversation-group {\n    margin-bottom: $comp-margin-m;\n    \n    .group-title {\n        font-size: $font-size-body-small;\n        color: $text-color-secondary;\n        padding: $comp-paddingTB-xs $comp-paddingLR-m;\n        margin-bottom: $size-1;\n        font-weight: 500;\n        position: sticky;\n        top: 0;\n        background-color: $bg-color-container;\n        z-index: 10;\n        backdrop-filter: blur(5px);\n    }\n}\n\n.conversation-item {\n    display: flex;\n    align-items: center;\n    padding: $comp-paddingTB-s $comp-paddingLR-m;\n    margin-bottom: $size-1;\n    border-radius: $radius-default;\n    transition: all 0.3s ease;\n    position: relative;\n    \n    &:hover {\n        background-color: $bg-color-container-hover;\n        \n        .more-btn {\n            opacity: 1;\n            visibility: visible;\n        }\n    }\n    \n    &.active {\n        background-color: $brand-color-light;\n        color: $brand-color;\n        \n        .conversation-icon {\n            color: $brand-color;\n        }\n        \n        .more-btn {\n            opacity: 1;\n            visibility: visible;\n        }\n    }\n    \n    .conversation-icon {\n        margin-right: $size-2;\n        color: $text-color-secondary;\n    }\n    \n    .conversation-text {\n        flex: 1;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n    }\n    \n    .more-btn {\n        opacity: 0;\n        visibility: hidden; /* 增加可见性属性，提升过渡效果 */\n        color: $text-color-secondary;\n        transition: all 0.3s ease, opacity 0.3s ease, visibility 0.3s ease;\n        \n        &:hover {\n            color: $text-color-primary;\n            background-color: $bg-color-container-hover;\n        }\n\n        /* 活跃状态样式 */\n        &:active {\n            transform: scale(0.95);\n        }\n    }\n}\n\n/* 下拉菜单图标样式 */\n.menu-icon {\n    margin-right: $size-2;\n    font-size: $font-size-body-medium;\n    vertical-align: middle;\n}\n\n/* 菜单项内容容器样式 */\n.menu-item-content {\n    display: flex;\n    align-items: center;\n    width: 100%;\n}\n\n/* 确保菜单中的文字也垂直居中 */\n:deep(.t-dropdown-item) {\n    padding: $comp-paddingTB-xs $comp-paddingLR-m;\n}\n</style> ","/**\n * 主题管理工具\n */\n\n// 主题类型\nexport const ThemeMode = {\n  LIGHT: 'light',\n  DARK: 'dark',\n};\n\n/**\n * 设置主题模式\n * @param {string} mode - 主题模式，可选值: 'light' | 'dark'\n */\nexport function setThemeMode(mode) {\n  if (mode !== ThemeMode.LIGHT && mode !== ThemeMode.DARK) {\n    console.warn(`Invalid theme mode: ${mode}, using default: ${ThemeMode.LIGHT}`);\n    mode = ThemeMode.LIGHT;\n  }\n  \n  document.documentElement.setAttribute('theme-mode', mode);\n  localStorage.setItem('theme-mode', mode);\n}\n\n/**\n * 获取当前主题模式\n * @returns {string} 当前主题模式\n */\nexport function getThemeMode() {\n  return document.documentElement.getAttribute('theme-mode') || ThemeMode.LIGHT;\n}\n\n/**\n * 切换主题模式\n * @returns {string} 切换后的主题模式\n */\nexport function toggleThemeMode() {\n  const currentMode = getThemeMode();\n  const newMode = currentMode === ThemeMode.DARK ? ThemeMode.LIGHT : ThemeMode.DARK;\n  \n  setThemeMode(newMode);\n  return newMode;\n}\n\n/**\n * 初始化主题\n * 从本地存储加载主题设置，如果没有则使用系统偏好\n */\nexport function initTheme() {\n  // 从本地存储中获取主题设置\n  const savedTheme = localStorage.getItem('theme-mode');\n  \n  if (savedTheme) {\n    // 使用保存的主题设置\n    setThemeMode(savedTheme);\n  } else {\n    // 检查系统是否偏好暗色模式\n    const prefersDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    setThemeMode(prefersDarkMode ? ThemeMode.DARK : ThemeMode.LIGHT);\n  }\n} ","<template>\n  <!-- 左侧对话列表面板，使用transition添加动画 -->\n  <transition name=\"sidebar-slide\">\n    <div class=\"sidebar-container\" v-show=\"visible\">\n      <div class=\"sidebar-header\">\n        <t-button variant=\"text\" class=\"close-icon\" @click=\"$emit('update:visible', false)\">\n          <t-icon name=\"menu\" />\n        </t-button>\n\n        <div @click=\"$emit('new-conversation')\" class=\"conversation-item\"\n          :class=\"{ 'active': currentConversationId === '' }\">\n          <span class=\"conversation-text\">新对话</span>\n          <t-icon name=\"chat-add\" class=\"conversation-icon\" />\n        </div>\n\n      </div>\n      <div class=\"drawer-container\">\n        <div class=\"new-conversation-container\">\n\n\n          <!-- 添加知识库管理入口 -->\n          <!-- <t-list-item @click=\"goToDatasetManagement\" class=\"conversation-item feature-item\">\n            <t-icon name=\"folder\" class=\"conversation-icon\" />\n            <span class=\"conversation-text\">知识库管理</span>\n          </t-list-item> -->\n        </div>\n\n        <!-- 可滚动的会话列表 -->\n        <div class=\"conversations-list\" ref=\"conversationsListRef\" @scroll=\"handleScroll\">\n          <!-- 骨架屏加载状态 -->\n          <sidebar-skeleton v-if=\"isLoading\" />\n\n          <!-- 显示实际会话列表 -->\n          <t-list v-else>\n            <!-- 使用抽取的组件来显示不同组的对话 -->\n            <conversation-group v-if=\"groupedConversations.today.length > 0\" title=\"今日\"\n              :conversations=\"groupedConversations.today\" :current-conversation-id=\"currentConversationId\"\n              @select=\"(value) => $emit('select', { value })\"\n              @pin-conversation=\"(id) => $emit('pin-conversation', { conversationId: id })\"\n              @rename-conversation=\"(id) => $emit('rename-conversation', { conversationId: id })\"\n              @delete-conversation=\"(id) => $emit('select', { value: `delete-${id}` })\" />\n\n            <conversation-group v-if=\"groupedConversations.yesterday.length > 0\" title=\"昨日\"\n              :conversations=\"groupedConversations.yesterday\" :current-conversation-id=\"currentConversationId\"\n              @select=\"(value) => $emit('select', { value })\"\n              @pin-conversation=\"(id) => $emit('pin-conversation', { conversationId: id })\"\n              @rename-conversation=\"(id) => $emit('rename-conversation', { conversationId: id })\"\n              @delete-conversation=\"(id) => $emit('select', { value: `delete-${id}` })\" />\n\n            <conversation-group v-if=\"groupedConversations.lastWeek.length > 0\" title=\"过去7天\"\n              :conversations=\"groupedConversations.lastWeek\" :current-conversation-id=\"currentConversationId\"\n              @select=\"(value) => $emit('select', { value })\"\n              @pin-conversation=\"(id) => $emit('pin-conversation', { conversationId: id })\"\n              @rename-conversation=\"(id) => $emit('rename-conversation', { conversationId: id })\"\n              @delete-conversation=\"(id) => $emit('select', { value: `delete-${id}` })\" />\n\n            <conversation-group v-if=\"groupedConversations.older.length > 0\" title=\"更早\"\n              :conversations=\"groupedConversations.older\" :current-conversation-id=\"currentConversationId\"\n              @select=\"(value) => $emit('select', { value })\"\n              @pin-conversation=\"(id) => $emit('pin-conversation', { conversationId: id })\"\n              @rename-conversation=\"(id) => $emit('rename-conversation', { conversationId: id })\"\n              @delete-conversation=\"(id) => $emit('select', { value: `delete-${id}` })\" />\n\n            <!-- 加载中提示 -->\n            <div v-if=\"loadingMoreConversations\" class=\"loading-indicator\">\n              <t-loading size=\"small\" />\n            </div>\n          </t-list>\n        </div>\n\n        <!-- 固定底部的主题切换按钮 -->\n        <!-- <div class=\"theme-toggle-container\">\n          <t-button variant=\"text\" size=\"small\" class=\"theme-toggle-btn\" @click=\"toggleTheme\">\n            <t-icon :name=\"currentTheme === 'dark' ? 'sunny' : 'moon'\" />\n            <span class=\"theme-text\">{{ currentTheme === 'dark' ? '切换到亮色模式' : '切换到暗色模式' }}</span>\n          </t-button>\n        </div> -->\n      </div>\n    </div>\n  </transition>\n\n  <!-- 添加遮罩层，在移动端显示 -->\n  <transition name=\"fade\">\n    <div v-if=\"visible\" class=\"sidebar-overlay\" @click=\"$emit('update:visible', false)\"></div>\n  </transition>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, computed, nextTick } from 'vue';\nimport { useRouter } from 'vue-router';\nimport ConversationGroup from './ConversationGroup.vue';\nimport SidebarSkeleton from './SidebarSkeleton.vue';\nimport { getThemeMode, toggleThemeMode, ThemeMode } from '/static/api/theme.js';\n\n// 获取路由器实例\nconst router = useRouter();\n\n// 组件属性\nconst props = defineProps({\n  visible: {\n    type: Boolean,\n    default: false\n  },\n  currentConversationId: {\n    type: String,\n    default: ''\n  },\n  groupedConversations: {\n    type: Object,\n    default: () => ({\n      today: [],\n      yesterday: [],\n      lastWeek: [],\n      older: []\n    })\n  },\n  hasMoreConversations: {\n    type: Boolean,\n    default: false\n  },\n  loadingMoreConversations: {\n    type: Boolean,\n    default: false\n  },\n  isLoading: {\n    type: Boolean,\n    default: false\n  }\n});\n\n// 滚动相关\nconst conversationsListRef = ref<HTMLElement | null>(null);\nconst scrollThreshold = 100; // 滚动触发阈值（距离底部多少像素时触发）\nconst loadingMore = ref(false); // 防止重复触发\n\n// 计算属性：检查会话列表是否已加载\nconst hasLoadedConversations = computed(() => {\n  const hasToday = props.groupedConversations.today.length > 0;\n  const hasYesterday = props.groupedConversations.yesterday.length > 0;\n  const hasLastWeek = props.groupedConversations.lastWeek.length > 0;\n  const hasOlder = props.groupedConversations.older.length > 0;\n\n  // 如果任一组有数据，或者没有更多会话需要加载，则认为已加载\n  return hasToday || hasYesterday || hasLastWeek || hasOlder || !props.hasMoreConversations;\n});\n\n// 处理滚动事件\nconst handleScroll = () => {\n  if (!conversationsListRef.value || !props.hasMoreConversations || loadingMore.value || props.loadingMoreConversations) {\n    return;\n  }\n\n  const element = conversationsListRef.value;\n  const distanceToBottom = element.scrollHeight - element.scrollTop - element.clientHeight;\n\n  // 当滚动到接近底部时，触发加载更多\n  if (distanceToBottom < scrollThreshold) {\n    loadingMore.value = true;\n    emit('load-more');\n\n    // 防止短时间内重复触发\n    setTimeout(() => {\n      loadingMore.value = false;\n    }, 1000);\n  }\n};\n\n// 添加主题相关状态\nconst currentTheme = ref(getThemeMode());\n\n// 主题切换方法\nconst toggleTheme = () => {\n  toggleThemeMode();\n  currentTheme.value = getThemeMode();\n};\n\n// 前往知识库管理页面\nconst goToDatasetManagement = () => {\n  router.push('/app/dataset');\n  // 关闭侧边栏（在移动端）\n  emit('update:visible', false);\n};\n\n// 在组件挂载时获取当前主题\nonMounted(() => {\n  currentTheme.value = getThemeMode();\n});\n\n// 定义事件\nconst emit = defineEmits(['update:visible', 'select', 'new-conversation', 'load-more', 'rename-conversation', 'pin-conversation']);\n</script>\n\n<style lang=\"scss\" scoped>\n@import '/static/styles/variables.scss';\n\n/* 侧边栏动画 */\n.sidebar-slide-enter-active,\n.sidebar-slide-leave-active {\n  transition: transform 0.3s ease, opacity 0.3s ease;\n}\n\n.sidebar-slide-enter-from,\n.sidebar-slide-leave-to {\n  transform: translateX(-100%);\n  opacity: 0;\n}\n\n/* 遮罩层动画 */\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.3s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n\n/* 遮罩层样式 */\n.sidebar-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 999;\n  display: none;\n}\n\n.sidebar-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 280px;\n  height: 100%;\n  box-sizing: border-box;\n  background-color: $bg-color-container;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n  padding: $comp-paddingTB-m $comp-paddingLR-m $comp-paddingTB-m;\n}\n\n.sidebar-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 0 $comp-paddingTB-m;\n}\n\n.sidebar-title {\n  font-size: $font-size-body-medium;\n  font-weight: bold;\n  color: $text-color-primary;\n}\n\n.close-icon {\n  cursor: pointer;\n  color: $text-color-secondary;\n  font-size: 20px;\n\n  &:hover {\n    color: $text-color-primary;\n  }\n}\n\n.drawer-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  position: relative;\n}\n\n.new-conversation-container {\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  background-color: $bg-color-container;\n  padding-bottom: $comp-paddingTB-xs;\n}\n\n.feature-item {\n  margin-top: 8px;\n  padding-top: 8px;\n}\n\n.conversations-list {\n  &::-webkit-scrollbar {\n    width: 0;\n    height: 0;\n    display: none;\n  }\n\n  flex: 1;\n  overflow-y: auto;\n  padding-bottom: 20px;\n}\n\n.conversation-item {\n  margin-left: $comp-margin-s;\n  padding: $comp-paddingTB-s $comp-paddingLR-m;\n  display: flex;\n  align-items: center;\n  flex: 1;\n  border-radius: 5px;\n  transition: all 0.3s ease;\n  position: relative;\n\n  &:hover {\n    background-color: $bg-color-container-hover;\n  }\n\n  &.active {\n    background-color: $brand-color-light;\n    color: $brand-color;\n\n    .conversation-icon {\n      font-size: 16px;\n      color: $brand-color;\n    }\n  }\n\n  .conversation-icon {\n    margin-right: $size-2;\n    color: $text-color-secondary;\n  }\n\n  .conversation-text {\n    flex: 1;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n}\n\n.loading-indicator {\n  display: flex;\n  justify-content: center;\n  padding: $comp-paddingTB-s 0;\n  margin-top: $comp-margin-s;\n}\n\n.theme-toggle-container {\n  position: sticky;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  justify-content: center;\n  padding: $comp-paddingTB-s 0;\n  background-color: $bg-color-container;\n  z-index: 10;\n}\n\n.theme-toggle-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: $text-color-secondary;\n  transition: color 0.3s ease;\n\n  &:hover {\n    color: $brand-color;\n  }\n\n  .t-icon {\n    margin-right: $size-2;\n    font-size: 16px;\n  }\n\n  .theme-text {\n    font-size: $font-size-body-small;\n    line-height: 1.2;\n  }\n}\n</style>","<template>\n  <t-chat-action class=\"chat-action\" :is-good=\"isGood\" :is-bad=\"isBad\" :content=\"content\"\n    :operation-btn=\"['good', 'bad', 'replay', 'copy']\" @operation=\"handleOperation\" />\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst props = defineProps({\n  isGood: {\n    type: Boolean,\n    default: false\n  },\n  isBad: {\n    type: Boolean,\n    default: false\n  },\n  content: {\n    type: String,\n    default: ''\n  }\n});\n\nconst emit = defineEmits(['operation']);\n\nconst isGood = ref(props.isGood);\nconst isBad = ref(props.isBad);\n\nconst handleOperation = (type, options) => {\n  if (type === 'good') {\n    isGood.value = !isGood.value;\n    isBad.value = false;\n    console.log(\"good\");\n  } else if (type === 'bad') {\n    isBad.value = !isBad.value;\n    isGood.value = false;\n    console.log(\"bad\");\n  } else if (type === 'replay') {\n    console.log(\"replay\");\n    emit('operation', type, options);\n  } else if (type === 'copy') {\n    console.log(\"copy\");\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>","<template>\n    <t-chat-item :avatar=\"avatar\" :name=\"name\" :role=\"role\" :datetime=\"datetime\" :content=\"content\">\n        <template #content cla>\n\n            <t-collapse :expand-icon=\"null\" :borderless=\"true\" :default-expand-all=\"isWorkflowCompleted\"\n                class=\"transparent-collapse\" v-if=\"role === 'assistant' && workflowSteps && workflowSteps.length > 0\">\n                <t-collapse-panel value=\"0\" :header=\"getCollapseHeader(workflowSteps)\">\n                    <t-timeline mode=\"same\" :theme=\"dot\" class=\"workflow-timeline\">\n                        <t-timeline-item v-for=\"(step, stepIndex) in workflowSteps\" :key=\"stepIndex\" :content=\"step.title\"\n                            :dot=\"getNodeDot(step.node_type, step.loading)\" :dot-color=\"getNodeColor(step.node_type)\">\n                            <div v-if=\"step.loading\" class=\"step-loading\">\n                                <span>{{ step.title }}</span><span class=\"loading-dots\">{{ getLoadingDots() }}</span>\n                            </div>\n                            <div v-else-if=\"step.content\">{{ step.content }}</div>\n                        </t-timeline-item>\n                    </t-timeline>\n                </t-collapse-panel>\n            </t-collapse>\n\n\n            <!-- 只有助手消息且有思考内容才显示思考框 -->\n            <t-chat-reasoning v-if=\"reasoning && reasoning.trim() && role === 'assistant' && reasoning !== '思考中...'\"\n                expand-icon-placement=\"right\"\n                @expand-change=\"(expandValue) => $emit('reasoning-expand-change', expandValue)\">\n                <template #header>\n                    <t-chat-loading v-if=\"isFirstMessage && loading\" text=\"思考中...\" indicator />\n                    <div v-else class=\"reasoning-header\">\n                        <t-icon name=\"dart-board\"></t-icon>\n                        <span>思考过程</span>\n                    </div>\n                </template>\n                <t-chat-content :content=\"reasoning || ''\" />\n            </t-chat-reasoning>\n            <!-- 显示消息内容，如果没有则显示占位 -->\n            <t-chat-content v-if=\"content && content.trim().length > 0\" :content=\"content\" class=\"zero-margins\" />\n\n            <div class=\"message-files\" v-if=\"files && files.length > 0\">\n                <div class=\"files-scroll-container\">\n                    <t-tag v-for=\"(file, index) in files\" :key=\"index\" theme=\"default\" variant=\"light\" shape=\"round\"\n                        size=\"medium\" class=\"file-tag\">\n                        <t-icon :name=\"getFileIcon(file.type)\" class=\"file-icon\" size=\"240\" />\n                        <span class=\"file-name\">{{ formatFileName(file.filename) }}</span>\n                    </t-tag>\n                </div>\n            </div>\n\n        </template>\n\n        <!-- 第一条消息且正在加载时显示加载动画 -->\n        <template v-if=\"isFirstMessage && loading && !firstTokenReceived\" #content>\n            <div class=\"loading-space\">\n                <t-space>\n                    <t-chat-loading animation=\"moving\" text=\"思考中...\" />\n                </t-space>\n            </div>\n        </template>\n\n\n        <!-- 操作按钮，只对助手消息显示 -->\n        <template #actions>\n            <chat-action class=\"chat-actions-container\" v-if=\"!isStreamLoad && role === 'assistant'\" :is-good=\"isGood\" :is-bad=\"isBad\"\n                :content=\"content || ''\" @operation=\"handleOperation\" />    \n        </template>\n    </t-chat-item>\n</template>\n\n<script setup lang=\"jsx\">\nimport { defineProps, defineEmits, ref, onMounted, onUnmounted, computed } from 'vue';\nimport ChatAction from './ChatAction.vue';\n\n// 组件属性\nconst props = defineProps({\n    avatar: {\n        type: String,\n        default: ''\n    },\n    name: {\n        type: String,\n        default: ''\n    },\n    role: {\n        type: String,\n        default: 'user'\n    },\n    datetime: {\n        type: String,\n        default: ''\n    },\n    content: {\n        type: String,\n        default: ''\n    },\n    reasoning: {\n        type: String,\n        default: ''\n    },\n    isFirstMessage: {\n        type: Boolean,\n        default: false\n    },\n    loading: {\n        type: Boolean,\n        default: false\n    },\n    firstTokenReceived: {\n        type: Boolean,\n        default: false\n    },\n    isStreamLoad: {\n        type: Boolean,\n        default: false\n    },\n    isGood: {\n        type: Boolean,\n        default: false\n    },\n    isBad: {\n        type: Boolean,\n        default: false\n    },\n    files: {\n        type: Array,\n        default: () => []\n    },\n    workflowSteps: {\n        type: Array,\n        default: () => []\n    }\n});\n\n// 定义事件\nconst emit = defineEmits(['reasoning-expand-change', 'operation']);\n\n// 处理操作事件，确保正确传递参数\nconst handleOperation = (type, options) => {\n    emit('operation', type, options);\n};\n\n// 默认时间轴样式\nconst dot = ref('default');\n\n// 动态省略号状态\nconst dotsCount = ref(1);\nlet dotsInterval = null;\n\n// 创建动态省略号动画\nonMounted(() => {\n    dotsInterval = setInterval(() => {\n        dotsCount.value = (dotsCount.value % 6) + 1;\n    }, 100);\n});\n\n// 清理定时器\nonUnmounted(() => {\n    if (dotsInterval) {\n        clearInterval(dotsInterval);\n    }\n});\n\n// 计算属性：判断工作流是否已完成\nconst isWorkflowCompleted = computed(() => {\n    return props.workflowSteps && props.workflowSteps.length > 0 && !props.workflowSteps.some(step => step.loading);\n});\n\n// 文件图标映射\nconst fileIconMap = {\n    'document': 'file-excel',\n    'image': 'photo',\n    'audio': 'play-circle',\n    'video': 'play-circle-stroke',\n    'custom': 'file'\n};\n\n// 获取文件图标\nconst getFileIcon = (type) => {\n    return fileIconMap[type] || 'file';\n};\n\n// 添加：节点类型到图标的映射\nconst nodeTypeToIcon = {\n    'default': 'check-circle-filled', // 默认节点\n    'start': 'play-circle-filled',    // 开始节点\n    'http': 'link',                   // HTTP请求节点\n    'condition': 'swap',              // 条件分支节点\n    'time': 'time',                   // 时间相关节点\n    'search': 'search',               // 搜索节点\n    'extract': 'filter',              // 参数提取节点\n    'web': 'internet',                // Web搜索节点\n    'file': 'file',                   // 文件节点\n    'model': 'root-list',             // 模型节点\n    'reply': 'chat',                  // 回复节点\n    'error': 'error-circle',          // 错误节点\n};\n\n// 添加：节点类型到颜色的映射\nconst nodeTypeToColor = {\n    'default': 'primary',            // 默认节点颜色\n    'start': 'primary',              // 开始节点颜色\n    'error': 'error',                // 错误节点颜色\n    'condition': 'warning',          // 条件分支节点颜色\n    'model': 'success',              // 模型节点颜色\n    'reply': 'success',              // 回复节点颜色\n};\n\n// 添加：获取节点图标函数 - 使用JSX方式\nconst getNodeIcon = (nodeType) => {\n    const iconName = nodeTypeToIcon[nodeType] || nodeTypeToIcon.default;\n    return iconName;\n};\n\n// 添加：获取节点颜色函数\nconst getNodeColor = (nodeType) => {\n    return nodeTypeToColor[nodeType] || 'primary';\n};\n\n// 使用JSX创建自定义dot\nconst getNodeDot = (nodeType, isLoading) => {\n    const color = `var(--td-${getNodeColor(nodeType)}-color)`;\n    const iconName = getNodeIcon(nodeType);\n\n    return () => (\n        <t-icon name={iconName} size=\"medium\" color={color} />\n    );\n};\n\n// 添加：获取动态省略号函数\nconst getLoadingDots = () => {\n    const fullDots = '......'; // 6个点\n    return fullDots.substring(0, dotsCount.value);\n};\n\n// 格式化文件名\nconst formatFileName = (fileName) => {\n    if (!fileName) return '';\n    if (fileName.length <= 10) return fileName;\n\n    const lastDotIndex = fileName.lastIndexOf('.');\n    if (lastDotIndex === -1) return fileName.slice(0, 7) + '...';\n\n    const extension = fileName.slice(lastDotIndex);\n    const name = fileName.slice(0, lastDotIndex);\n    if (name.length <= 7) return fileName; // 如果名称部分已经很短，保留全名\n    return name.slice(0, 7) + '...' + extension;\n};\n\n// 添加：获取折叠面板标题函数\nconst getCollapseHeader = (steps) => {\n    const lastStep = steps[steps.length - 1];\n    // 检查是否所有步骤都已完成（没有正在加载的步骤）\n    const isCompleted = !steps.some(step => step.loading);\n\n    if (isCompleted) {\n        // 流程完成后显示\"执行过程\"\n        return (\n            <div class=\"workflow-header\">\n                <t-icon name={getNodeIcon(lastStep.node_type)} color={`var(--td-${getNodeColor(lastStep.node_type)}-color)`} />\n                <span>执行过程</span>\n            </div>\n        );\n    } else {\n        // 流程未完成，显示最后一步的标题和加载动画\n        return (\n            <div class=\"workflow-header\">\n                <t-icon name={getNodeIcon(lastStep.node_type)} color={`var(--td-${getNodeColor(lastStep.node_type)}-color)`} />\n                <span>{lastStep.title + getLoadingDots()}</span>\n            </div>\n        );\n    }\n};\n</script>\n\n<style lang=\"scss\">\n@import '/static/styles/variables.scss';\n\n/* 添加基础过渡效果 */\n.t-chat-item {\n    transition: all 0.3s ease, width 0.3s ease, max-width 0.3s ease, transform 0.3s ease;\n}\n\n/* 消息内容容器 */\n:deep(.t-chat__bubble) {\n    transition: all 0.3s ease, width 0.3s ease, max-width 0.3s ease;\n}\n\n/* 透明折叠面板 */\n.transparent-collapse {\n    background-color: transparent;\n    transition: all 0.3s ease;\n\n    :deep(.t-collapse-panel__header) {\n        background-color: transparent;\n        transition: all 0.3s ease;\n    }\n\n    :deep(.t-collapse-panel__content) {\n        background-color: transparent;\n        transition: all 0.3s ease;\n    }\n}\n\n/* 工作流时间线 */\n.workflow-timeline {\n    width: 100%;\n    margin-top: 8px;\n    transition: all 0.3s ease;\n\n    .t-timeline-item {\n        transition: all 0.3s ease;\n    }\n}\n\n/* 思考框样式 */\n:deep(.t-chat-reasoning) {\n    transition: all 0.3s ease, max-width 0.3s ease, width 0.3s ease;\n    \n    .t-chat-reasoning__header, \n    .t-chat-reasoning__content {\n        transition: all 0.3s ease;\n    }\n}\n\n/* 思考框头部样式 */\n.reasoning-header {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    transition: all 0.3s ease;\n\n    .t-icon {\n        font-size: 16px;\n        color: var(--td-brand-color);\n    }\n}\n\n/* 消息内容无边距 */\n.zero-margins {\n    margin: 0 !important;\n    transition: all 0.3s ease;\n}\n\n/* 文件展示区域 */\n.message-files {\n    margin-top: 12px;\n    transition: all 0.3s ease;\n}\n\n/* 文件滚动容器 */\n.files-scroll-container {\n    display: flex;\n    flex-wrap: nowrap;\n    overflow-x: auto;\n    gap: 8px;\n    padding-bottom: 4px;\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n    transition: all 0.3s ease;\n\n    &::-webkit-scrollbar {\n        display: none;\n    }\n}\n\n/* 文件标签 */\n.file-tag {\n    display: flex;\n    align-items: center;\n    transition: all 0.3s ease, transform 0.2s ease;\n    \n    // &:hover {\n    //     transform: translateY(-2px);\n    // }\n}\n\n/* 文件图标 */\n.file-icon {\n    transition: all 0.3s ease;\n    transform: translate(0px,-1px);\n}\n\n/* 文件名称 */\n.file-name {\n    transition: all 0.3s ease;\n    white-space: nowrap;\n    margin-right: 3px;\n}\n\n/* 步骤加载中 */\n.step-loading {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    transition: all 0.3s ease;\n}\n\n/* 加载点动画 */\n.loading-dots {\n    width: 24px;\n    display: inline-block;\n    transition: all 0.3s ease;\n}\n\n/* 加载空间 */\n.loading-space {\n    transition: all 0.3s ease;\n    width: 100%;\n}\n\n.t-tag .t-icon{\n    width: 12px;\n    height: 12px;\n}\n\n</style>","/**\n * 请求状态管理和中断处理的公共函数\n */\n\n// 导入API配置\nimport { API_CONFIG } from './config.js';\n\n/**\n * 创建请求控制器\n * @returns {Object} 请求控制对象，包含控制器和中断函数\n */\nexport const createRequestController = () => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n    \n    // 创建中断函数\n    const abortRequest = () => {\n        // 只有在未中断的情况下才执行中断操作\n        if (!controller.signal.aborted) {\n            try {\n                console.log('执行请求中断操作');\n                controller.abort();\n                console.log('请求中断完成');\n            } catch (error) {\n                console.error('中断请求时出错:', error);\n            }\n        } else {\n            console.log('请求已经被中断，不再重复执行');\n        }\n    };\n    \n    return {\n        controller,\n        signal,\n        abortRequest\n    };\n};\n\n/**\n * 创建超时保护\n * @param {Function} abortFunction - 中断函数\n * @param {number} timeout - 超时时间（毫秒）\n * @returns {number} 超时计时器ID\n */\nexport const createTimeoutProtection = (abortFunction, timeout = 30000) => {\n    return setTimeout(() => {\n        if (typeof abortFunction === 'function') {\n            abortFunction();\n        }\n    }, timeout);\n};\n\n/**\n * 处理请求中断后的UI状态更新\n * @param {Object} lastMessage - 最后一条助手消息\n * @param {Object} stateControls - 状态控制对象，包含loading和isStreamLoad\n */\nexport const handleRequestAbort = (lastMessage, stateControls) => {\n    const { loading, isStreamLoad } = stateControls;\n    \n    // 重置加载状态\n    if (loading && typeof loading.value !== 'undefined') {\n        loading.value = false;\n    }\n    \n    if (isStreamLoad && typeof isStreamLoad.value !== 'undefined') {\n        isStreamLoad.value = false;\n    }\n    \n    // 处理消息状态\n    if (lastMessage && lastMessage.role === 'assistant') {\n        // 如果消息为空，添加一个提示\n        if (!lastMessage.content || lastMessage.content === '') {\n            lastMessage.content = '回复已中断';\n        } else if (!lastMessage.content.includes('[已中断]')) {\n            lastMessage.content += ' [已中断]';\n        }\n\n        // 如果有思考内容并且是\"思考中...\"，则更新为已中断\n        if (lastMessage.reasoning === '思考中...') {\n            lastMessage.reasoning = '思考过程已中断';\n        } else if (lastMessage.reasoning && !lastMessage.reasoning.includes('已中断')) {\n            lastMessage.reasoning += ' [已中断]';\n        }\n    }\n};\n\n/**\n * 处理请求错误\n * @param {Object} error - 错误对象\n * @param {Object} lastMessage - 最后一条助手消息\n * @param {Object} stateControls - 状态控制对象\n * @returns {boolean} 是否为中断错误\n */\nexport const handleRequestError = (error, lastMessage, stateControls) => {\n    const { loading, isStreamLoad } = stateControls;\n    const errorMessage = error?.message || error || '请求失败';\n    \n    console.log('处理请求错误:', errorMessage);\n    \n    // 重置加载状态\n    if (loading && typeof loading.value !== 'undefined') {\n        loading.value = false;\n    }\n    \n    if (isStreamLoad && typeof isStreamLoad.value !== 'undefined') {\n        isStreamLoad.value = false;\n    }\n    \n    // 检查是否是中断导致的错误或消息通道关闭错误\n    const isAborted = \n        errorMessage.includes('abort') || \n        errorMessage.includes('中断') || \n        errorMessage.includes('cancel') ||\n        errorMessage.includes('BodyStreamBuffer was aborted') ||\n        errorMessage.includes('message channel closed') ||\n        errorMessage.includes('listener indicated an asynchronous response') ||\n        error?.name === 'AbortError';\n    \n    if (isAborted) {\n        // 处理中断状态\n        if (lastMessage) {\n            if (!lastMessage.content || lastMessage.content === '') {\n                lastMessage.content = '回复已中断';\n            } else if (!lastMessage.content.includes('[已中断]')) {\n                lastMessage.content += ' [已中断]';\n            }\n            \n            // 处理思考状态\n            if (lastMessage.reasoning === '思考中...') {\n                lastMessage.reasoning = '思考过程已中断';\n            } else if (lastMessage.reasoning && !lastMessage.reasoning.includes('已中断')) {\n                lastMessage.reasoning += ' [已中断]';\n            }\n        }\n    } else if (lastMessage) {\n        // 处理错误状态\n        lastMessage.role = 'error';\n        lastMessage.content = errorMessage;\n    }\n    \n    return isAborted;\n};\n\n/**\n * 处理请求完成\n * @param {boolean} isOk - 请求是否成功\n * @param {string} msg - 完成消息\n * @param {Object} lastMessage - 最后一条助手消息\n * @param {Object} stateControls - 状态控制对象\n * @param {Object} controllers - 控制器对象\n */\nexport const handleRequestComplete = (isOk, msg, lastMessage, stateControls, controllers) => {\n    const { loading, isStreamLoad } = stateControls || {};\n    const { timeoutId, fetchCancel } = controllers || {};\n    \n    // 清除超时保护\n    if (timeoutId) {\n        clearTimeout(timeoutId);\n    }\n    \n    // 检查是否是中断导致的完成\n    const isAborted = !isOk && (msg && (\n        msg.includes('abort') || \n        msg.includes('中断') || \n        msg.includes('cancel') ||\n        msg.includes('BodyStreamBuffer was aborted') ||\n        msg.includes('message channel closed') ||\n        msg.includes('listener indicated an asynchronous response')\n    ));\n    \n    // 确保lastMessage存在再进行操作\n    if (lastMessage) {\n        if (isAborted) {\n            if (!lastMessage.content || lastMessage.content === '') {\n                lastMessage.content = '回复已中断';\n            } else if (!lastMessage.content.includes('[已中断]')) {\n                lastMessage.content += ' [已中断]';\n            }\n        } else if (!isOk || !lastMessage.content) {\n            lastMessage.role = 'error';\n            lastMessage.content = msg || '请求失败';\n        }\n    }\n    \n    // 重置状态\n    if (isStreamLoad && typeof isStreamLoad?.value !== 'undefined') {\n        isStreamLoad.value = false;\n    }\n    \n    if (loading && typeof loading?.value !== 'undefined') {\n        loading.value = false;\n    }\n    \n    // 清空中断函数，防止内存泄漏\n    if (fetchCancel && typeof fetchCancel?.value !== 'undefined') {\n        // 确保中断函数存在且未执行过时再尝试设置为null\n        try {\n            fetchCancel.value = null;\n        } catch (error) {\n            console.warn('清空中断函数时出错:', error);\n        }\n    }\n};\n\n/**\n * 向服务器发送停止流式响应的请求\n * @param {String} taskId - 任务ID\n * @param {String} userId - 用户ID\n * @returns {Promise<boolean>} 是否成功停止\n */\nexport const stopStreamResponse = async (taskId, userId) => {\n    if (!taskId || !userId) {\n        console.error('[Stream Stop] 停止响应失败: taskId或userId不能为空', { taskId, userId });\n        return false;\n    }\n\n    console.log('[Stream Stop] 尝试停止流式响应', { taskId, userId });\n\n    try {\n        // 使用统一的API配置\n        const baseURL = API_CONFIG.baseURL;\n        const apiKey = API_CONFIG.apiKey;\n        \n        console.log('[Stream Stop] 发送停止请求到:', `${baseURL}/chat-messages/${taskId}/stop`);\n        \n        const response = await fetch(`${baseURL}/chat-messages/${taskId}/stop`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${apiKey}`\n            },\n            body: JSON.stringify({\n                user: userId\n            })\n        });\n        \n        const result = await response.json();\n        \n        if (response.ok) {\n            console.log('[Stream Stop] 流式响应已成功停止', { \n                status: response.status,\n                result: result \n            });\n            return true;\n        } else {\n            console.error('[Stream Stop] 停止响应请求失败:', { \n                status: response.status, \n                result: result \n            });\n            return false;\n        }\n    } catch (error) {\n        console.error('[Stream Stop] 停止响应请求错误:', error);\n        return false;\n    }\n};","/**\n * 聊天消息处理相关工具函数\n */\n\n/**\n * 消息处理钩子函数\n * 提供统一的消息处理函数，减少重复代码\n * @returns {Object} 包含处理函数的对象\n */\nexport function useMessageHandlers() {\n  /**\n   * 处理思考内容更新\n   * @param {Object} lastItem - 当前助手消息对象\n   * @param {string} reasoningText - 思考内容\n   * @param {Object} firstTokenReceived - 是否已收到第一个token的状态引用\n   */\n  const handleReasoningUpdate = (lastItem, reasoningText, firstTokenReceived) => {\n    if (!firstTokenReceived.value) {\n      firstTokenReceived.value = true;\n    }\n\n    try {\n      // 如果是首次收到思考内容，则替换\"思考中...\"\n      if (!lastItem.reasoning || lastItem.reasoning === '思考中...') {\n        lastItem.reasoning = reasoningText || '';\n      } else {\n        // 否则，追加思考内容\n        lastItem.reasoning += reasoningText || '';\n      }\n    } catch (e) {\n      console.error('处理思考内容出错:', e);\n    }\n  };\n\n  /**\n   * 处理消息内容更新\n   * @param {Object} lastItem - 当前助手消息对象\n   * @param {string} text - 新的消息内容\n   * @param {Object} firstTokenReceived - 是否已收到第一个token的状态引用\n   * @param {Object} isScrolling - 是否正在滚动的状态引用\n   * @param {Function} scrollFunc - 滚动到底部的函数\n   * @param {Object} chatRef - 聊天容器的引用\n   */\n  const handleMessageUpdate = (\n    lastItem, \n    text, \n    firstTokenReceived,\n    isScrolling,\n    scrollFunc,\n    chatRef\n  ) => {\n    if (!firstTokenReceived.value) {\n      firstTokenReceived.value = true;\n    }\n\n    try {\n      // 设置或追加内容\n      if (!lastItem.content) {\n        lastItem.content = text || '';\n      } else {\n        lastItem.content += text || '';\n      }\n\n      if (text && !isScrolling.value) {\n        // 添加一些延迟以确保更新后滚动\n        setTimeout(() => {\n          if (chatRef.value) {\n            scrollFunc(chatRef.value, true);\n          }\n        }, 10);\n      }\n    } catch (e) {\n      console.error('处理消息内容出错:', e);\n    }\n  };\n\n  /**\n   * 处理文件事件\n   * @param {Object} lastItem - 当前助手消息对象\n   * @param {Object} fileData - 文件数据\n   */\n  const handleFileEvent = (lastItem, fileData) => {\n    try {\n      // 确保lastItem.files是一个数组\n      if (!lastItem.files) {\n        lastItem.files = [];\n      }\n\n      // 添加文件到助手消息的文件列表\n      lastItem.files.push(fileData);\n    } catch (e) {\n      console.error('处理文件事件出错:', e);\n    }\n  };\n\n  /**\n   * 处理工作流步骤更新\n   * @param {Array} steps - 工作流步骤\n   * @param {Object} chatList - 聊天列表\n   * @param {Object} loading - 加载状态\n   * @param {Object} firstTokenReceived - 是否已收到第一个token的状态引用\n   */\n  const handleWorkflowSteps = (steps, chatList, loading, firstTokenReceived) => {\n    firstTokenReceived.value = true;\n    if (chatList.value.length > 0) {\n      const currentAssistantMessage = chatList.value[0];\n      // 确保第一条消息是正在生成的助手消息\n      if (currentAssistantMessage.role === 'assistant' && loading.value) {\n        // 更新第一条消息的 workflowSteps\n        currentAssistantMessage.workflowSteps = steps;\n        // 输出更详细的日志信息\n        console.log('收到工作流步骤:', steps.map(step => `${step.title}(${step.node_type})${step.loading ? '[加载中]' : ''}`));\n      }\n    }\n  };\n\n  return {\n    handleReasoningUpdate,\n    handleMessageUpdate,\n    handleFileEvent,\n    handleWorkflowSteps\n  };\n} ","/**\n * 会话和对话处理相关工具函数\n */\n\n/**\n * 获取对话显示标题\n * @param {Object} conversation - 会话对象\n * @param {number} maxLength - 最大显示长度\n * @returns {string} 格式化后的会话标题\n */\nexport const getConversationTitle = (conversation, maxLength = 20) => {\n  if (!conversation) return '新对话';\n\n  // 优先使用name字段\n  if (conversation.name) {\n    return conversation.name.length > maxLength ? conversation.name.substring(0, maxLength) + '...' : conversation.name;\n  }\n\n  // 其次尝试使用最近的用户消息作为标题\n  if (conversation.last_message && conversation.last_message.trim()) {\n    return conversation.last_message.length > maxLength ? conversation.last_message.substring(0, maxLength) + '...' : conversation.last_message;\n  }\n\n  // 如果没有名称和最近消息，使用ID的一部分\n  return `对话 ${conversation.id.substring(0, 8)}...`;\n};\n\n/**\n * 按时间分组对话列表\n * @param {Array} conversationList - 会话列表\n * @returns {Object} 分组后的会话对象\n */\nexport const groupConversationsByDate = conversationList => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  const yesterday = new Date(today);\n  yesterday.setDate(yesterday.getDate() - 1);\n\n  const lastWeekStart = new Date(today);\n  lastWeekStart.setDate(lastWeekStart.getDate() - 7);\n\n  // 初始化分组\n  const groups = {\n    today: [],\n    yesterday: [],\n    lastWeek: [],\n    older: [],\n  };\n\n  // 分类每个对话\n  conversationList.forEach(conversation => {\n    // 解析更新时间 - 服务器返回的是Unix时间戳（秒级）\n    let updateTime;\n    if (conversation.updated_at) {\n      // 将秒级时间戳转换为毫秒级\n      updateTime = new Date(conversation.updated_at * 1000);\n    } else {\n      updateTime = new Date(); // 如果没有更新时间，默认为当前时间\n    }\n\n    // 只比较日期，不比较时间\n    const updateDate = new Date(updateTime);\n    updateDate.setHours(0, 0, 0, 0);\n\n    if (updateDate.getTime() === today.getTime()) {\n      groups.today.push(conversation);\n    } else if (updateDate.getTime() === yesterday.getTime()) {\n      groups.yesterday.push(conversation);\n    } else if (updateDate.getTime() >= lastWeekStart.getTime()) {\n      groups.lastWeek.push(conversation);\n    } else {\n      groups.older.push(conversation);\n    }\n  });\n\n  return groups;\n};\n\n/**\n * 创建防抖函数\n * @param {Function} fn - 要执行的函数\n * @param {number} delay - 延迟时间\n * @returns {Function} 防抖处理后的函数\n */\nexport const debounce = (fn, delay) => {\n  let timer = null;\n\n  return function (...args) {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn.apply(null, args);\n      timer = null;\n    }, delay);\n  };\n};\n\n/**\n * 重置会话状态\n * @param {Object} options - 会话相关的状态和函数对象\n * @param {Object} options.currentConversationId - 当前会话ID的引用\n * @param {Object} options.chatList - 聊天列表的引用\n * @param {Object} options.suggestedQuestions - 建议问题列表的引用\n * @param {Object} options.suggestedQuestionsConversationId - 建议问题相关会话ID的引用\n * @param {Object} options.isNewConversation - 标识是否为新会话的引用\n * @param {Function} options.resetConversationFunc - 重置会话的函数\n */\nexport const resetConversationState = ({\n  currentConversationId,\n  chatList,\n  suggestedQuestions,\n  suggestedQuestionsConversationId,\n  isNewConversation,\n  resetConversationFunc,\n}) => {\n  // 重置会话状态\n  resetConversationFunc();\n  currentConversationId.value = '';\n  chatList.value = [];\n  // 清空建议问题列表\n  suggestedQuestions.value = [];\n  suggestedQuestionsConversationId.value = '';\n  // 设置为新会话\n  if (isNewConversation) {\n    isNewConversation.value = true;\n  }\n};\n","<template>\n    <div class=\"app-container\">\n        <!-- 侧边栏区域 -->\n        <ConversationSidebar v-model:visible=\"showConversationDrawer\" :current-conversation-id=\"currentConversationId\"\n            :grouped-conversations=\"groupedConversations\" :has-more-conversations=\"hasMoreConversations\"\n            :loading-more-conversations=\"loadingMoreConversations\" :is-loading=\"conversationListLoading\"\n            @select=\"handleConversationSelect\"\n            @new-conversation=\"handleNewConversation\" @load-more=\"loadMoreConversations\"\n            @rename-conversation=\"showRenameDialogFor\" @pin-conversation=\"handlePinConversation\" />\n\n        <!-- 主内容区域 -->\n        <div class=\"main-content\"\n            :class=\"{ 'sidebar-open': showConversationDrawer, 'sidebar-closed': !showConversationDrawer }\">\n            <!-- 顶部导航栏 -->\n            <HeaderNav :title=\"currentConversationTitle\" :sidebar-visible=\"showConversationDrawer\"\n                @open-drawer=\"toggleSidebar\" @new-conversation=\"handleNewConversation\"\n                @model-changed=\"handleModelChanged\" />\n\n            <!-- 聊天内容区域 -->\n            <div class=\"chat-wrapper\">\n                <transition name=\"fade\">\n                    <t-chat class=\"chat-container\" ref=\"chatRef\" layout=\"both\" :clear-history=\"false\"\n                        @clear=\"clearConfirm\" @scroll=\"handleScroll\">\n                        <!-- 1. 内容加载骨架屏 -->\n                        <template v-if=\"historyLoading\">\n                            <transition name=\"skeleton-fade\" appear>\n                                <ChatSkeleton />\n                            </transition>\n                        </template>\n\n                        <!-- 2. 聊天消息内容列表 -->\n                        <template v-else-if=\"chatList.length > 0\">\n                            <transition-group name=\"chat-items\" appear>\n                                <chat-item v-for=\"(item, index) in chatList\" :key=\"index\" :avatar=\"item.avatar\"\n                                    :name=\"item.name\" :role=\"item.role\" :datetime=\"item.datetime\"\n                                    :content=\"item.content\" :reasoning=\"item.reasoning\" :is-first-message=\"index === 0\"\n                                    :loading=\"loading\" :first-token-received=\"firstTokenReceived\"\n                                    :is-stream-load=\"isStreamLoad\" :is-good=\"isGood\" :is-bad=\"isBad\" :files=\"item.files\"\n                                    :workflow-steps=\"item.workflowSteps\"\n                                    :style=\"{ '--item-index': chatList.length - index }\"\n                                    @reasoning-expand-change=\"(expandValue) => handleChange(expandValue, { index })\"\n                                    @operation=\"(type, e) => handleOperation(type, { index, e })\" />\n                            </transition-group>\n                        </template>\n\n                        <!-- 3. 欢迎面板（新会话时显示） -->\n                        <template v-else-if=\"isNewConversation\">\n                            <transition name=\"welcome-fade\" appear>\n                                <WelcomePanel :suggested-questions=\"defaultSuggestedQuestions\"\n                                    logoSrc=\"/static/images/logo.png\" @question-click=\"handleSuggestedQuestion\" />\n                            </transition>\n                        </template>\n\n                        <!-- 底部发送区域 -->\n                        <template #footer>\n                            <!-- 建议问题标签 -->\n                            <transition name=\"suggestions-slide\">\n                                <div v-if=\"suggestedQuestions.length > 0\" class=\"suggested-questions-container\">\n                                    <div class=\"suggested-questions\">\n                                        <t-tag v-for=\"(question, qIndex) in suggestedQuestions\" :key=\"qIndex\"\n                                            theme=\"primary\" variant=\"light\" class=\"question-tag\" size=\"medium\"\n                                            @click=\"handleSuggestedQuestion(question)\">\n                                            {{ question }}\n                                        </t-tag>\n                                    </div>\n                                </div>\n                            </transition>\n                            <!-- 聊天输入发送组件 -->\n                            <chat-sender :loading=\"loading\" @send=\"inputEnter\" @stop=\"onStop\" />\n                        </template>\n                    </t-chat>\n                </transition>\n            </div>\n        </div>\n\n        <!-- 对话操作弹窗 -->\n        <!-- 1. 重命名对话弹窗 -->\n        <t-dialog width=\"35%\" v-model:visible=\"showRenameDialog\" header=\"重命名对话\"\n            :confirm-btn=\"{ content: '确定', theme: 'primary' }\" :cancel-btn=\"{ content: '取消', theme: 'default' }\"\n            @confirm=\"confirmRename\" @close=\"cancelRename\">\n            <t-input v-model=\"renameInput\" type=\"text\" :maxlength=\"100\" placeholder=\"请输入新名称\" clearable autofocus\n                @enter=\"confirmRename\" />\n        </t-dialog>\n\n        <!-- 2. 删除对话确认框 -->\n        <t-dialog width=\"35%\" v-model:visible=\"showDeleteDialog\" header=\"删除对话\"\n            :confirm-btn=\"{ content: '确定', theme: 'danger' }\" :cancel-btn=\"{ content: '取消', theme: 'default' }\"\n            @confirm=\"confirmDelete\" @close=\"cancelDelete\">\n            <p class=\"dialog-content\">确定要删除该对话吗？此操作不可恢复。</p>\n        </t-dialog>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, onUnmounted, computed, nextTick, watch } from 'vue';\nimport { chatWithModel, loadSystemPrompt, resetConversation } from '/static/api/model.js'\nimport ChatAction from './comps/ChatAction.vue';\nimport ChatSender from './comps/ChatSender.vue';\nimport HeaderNav from './comps/HeaderNav.vue';\nimport ConversationSidebar from './comps/ConversationSidebar.vue';\nimport ChatItem from './comps/ChatItem.vue';\nimport WelcomePanel from './comps/WelcomePanel.vue'; // 导入欢迎组件\nimport ChatSkeleton from './comps/ChatSkeleton.vue'; // 导入骨架加载组件\nimport { MessagePlugin } from 'tdesign-vue-next';\nimport {\n    getChatHistory,\n    saveChatHistory,\n    clearChatHistory,\n    buildMessageHistory,\n    scrollToBottom as scrollChatToBottom,\n    createUserMessage,\n    createAssistantMessage,\n    getServerConversations,\n    getServerConversationHistory,\n    renameConversation,\n    deleteConversation,\n    getCurrentConversation,\n    autoRenameConversationIfNeeded,\n    getSuggestedQuestions\n} from '/static/api/chat.js';\nimport {\n    createRequestController,\n    createTimeoutProtection,\n    handleRequestAbort,\n    handleRequestError,\n    handleRequestComplete,\n    stopStreamResponse\n} from '/static/api/request.js';\nimport { initTheme, setThemeMode, ThemeMode } from '/static/api/theme.js';\nimport { useMessageHandlers } from '/static/api/messageHandlers.js'; // 导入消息处理工具函数\nimport {\n    getConversationTitle,\n    groupConversationsByDate,\n    debounce,\n    resetConversationState\n} from '/static/api/conversationUtils.js'; // 导入会话处理工具函数\n\nconst fetchCancel = ref(null); // 用于取消请求的AbortController\nconst loading = ref(false); // 是否正在加载中\nconst isStreamLoad = ref(false); // 是否正在流式加载\nconst isGood = ref(false); // 用户是否点击了\"好\"评价\nconst isBad = ref(false); // 用户是否点击了\"差\"评价\nconst chatRef = ref(null); // 聊天容器的引用\nconst firstTokenReceived = ref(false); // 是否已收到第一个token\nconst chatList = ref([]);\nconst systemPrompt = ref('');\nconst isScrolling = ref(false); // 是否正在滚动，用于控制自动滚动行为\n\n// 新增变量：会话列表\nconst conversationList = ref([]);\nconst currentConversationId = ref('');\nconst currentPage = ref(1);\nconst pageSize = ref(20);\nconst hasMoreMessages = ref(true);\nconst loadingMore = ref(false);\nconst scrollTopThreshold = 50; // 滚动到顶部触发阈值\nconst conversationListLoading = ref(false); // 新增：会话列表加载状态\n\n// 添加新的状态变量\nconst hasMoreConversations = ref(true); // 是否有更多会话可加载\nconst loadingMoreConversations = ref(false); // 是否正在加载更多会话\nconst showConversationDrawer = ref(true); // 是否显示对话列表抽屉\n\n// 重命名对话相关状态\nconst showRenameDialog = ref(false);\nconst renameInput = ref('');\nconst currentEditingId = ref('');\n\n// 删除对话相关状态\nconst showDeleteDialog = ref(false);\nconst currentDeletingId = ref('');\n\n// 添加变量保存当前任务ID\nconst currentTaskId = ref(null);\n// 添加变量保存当前消息ID\nconst currentMessageId = ref('');\n// 添加变量保存建议问题列表\nconst suggestedQuestions = ref([]);\n// 添加变量保存建议问题关联的会话ID\nconst suggestedQuestionsConversationId = ref('');\n// 添加用于防抖的计时器引用\nconst switchConversationTimer = ref(null);\n// 添加当前活动的加载请求控制器\nconst activeLoadController = ref(null);\n// 添加历史消息是否正在加载的状态\nconst historyLoading = ref(false);\n// 添加标识是否为新会话的状态\nconst isNewConversation = ref(true);\n\n// 添加欢迎界面的默认建议问题\nconst defaultSuggestedQuestions = ref([\n    \"介绍一下金钟集团\",\n    \"金钟集团有哪些产品\",\n    \"金钟集团的优势\",\n]);\n\n// 在iframe内部页面\nconst urlParams = new URLSearchParams(window.location.search);\nconst userId = urlParams.get('userId');\nconst userName = urlParams.get('userName');\n\nconsole.log('从URL获取的参数:', { userId, userName });\n\nonMounted(() => {\n    // 初始化主题（默认或者根据系统偏好）\n    initTheme();\n    document.documentElement.setAttribute('theme-mode', 'light');\n    initChatData();\n});\n\n// 当前会话标题，优先显示最近一次的用户消息，如果没有则显示会话ID的前8位\nconst currentConversationTitle = computed(() => {\n    const conversation = conversationList.value.find(c => c.id === currentConversationId.value);\n    return getConversationTitle(conversation, 15);\n});\n\n// 将对话按日期分组：今天、昨天、过去7天、更早\nconst groupedConversations = computed(() => {\n    return groupConversationsByDate(conversationList.value);\n});\n\n// 初始化聊天数据\nconst initChatData = async () => {\n    // 获取系统提示词\n    try {\n        systemPrompt.value = await loadSystemPrompt();\n    } catch (error) {\n        console.error('系统提示词加载失败:', error);\n    }\n    // 开始加载列表，设置加载状态\n    conversationListLoading.value = true; \n    // 获取服务器会话列表\n    try {\n        // 使用新参数调用，每次加载20条对话\n        const serverConversations = await getServerConversations({\n            limit: 20,\n            sort_by: '-updated_at'\n        });\n        // 确保返回的数据是数组\n        if (serverConversations && Array.isArray(serverConversations)) {\n            conversationList.value = serverConversations;\n\n            // 判断是否还有更多对话可加载\n            hasMoreConversations.value = serverConversations.length >= 20;\n\n            // 获取默认会话ID\n            const defaultConversationId = await getCurrentConversation();\n            if (defaultConversationId) {\n                currentConversationId.value = defaultConversationId;\n                isNewConversation.value = false;\n                await loadConversationHistory(defaultConversationId);\n            } else {\n                // 如果没有会话，创建新对话\n                currentConversationId.value = '';\n                chatList.value = [];\n                isNewConversation.value = true;\n                // 确保重置历史加载状态，以便显示欢迎页面\n                historyLoading.value = false;\n            }\n            \n            // 如果会话列表为空数组，直接显示欢迎页面\n            if (serverConversations.length === 0) {\n                currentConversationId.value = '';\n                chatList.value = [];\n                isNewConversation.value = true;\n                historyLoading.value = false;\n            }\n        } else {\n            console.error('服务器返回的会话列表数据格式不正确:', serverConversations);\n            // 创建新会话\n            currentConversationId.value = '';\n            chatList.value = [];\n            isNewConversation.value = true;\n            historyLoading.value = false;\n        }\n    } catch (error) {\n        console.error('获取服务器会话列表失败:', error);\n        // 创建新会话\n        currentConversationId.value = '';\n        chatList.value = [];\n        isNewConversation.value = true;\n        historyLoading.value = false;\n    } finally {\n        // 结束加载列表，重置加载状态\n        conversationListLoading.value = false; \n    }\n};\n\n// 加载特定对话的历史消息\nconst loadConversationHistory = async (conversationId, resetPage = true, signal = null) => {\n    if (!conversationId) {\n        console.error('会话ID为空，无法加载历史消息');\n        return false;\n    }\n\n    try {\n        // 显示加载状态\n        loadingMore.value = resetPage ? false : true;\n        // 设置历史消息加载状态\n        if (resetPage) {\n            historyLoading.value = true;\n        }\n\n        // 切换对话时清空建议问题列表\n        if (resetPage) {\n            suggestedQuestions.value = [];\n        }\n\n        // 重置分页或使用现有分页\n        if (resetPage) {\n            currentPage.value = 1;\n            hasMoreMessages.value = true;\n            chatList.value = []; // 清空现有消息\n        }\n\n        const options = {\n            page: currentPage.value,\n            pageSize: pageSize.value,\n            signal: signal // 传递signal给API调用\n        };\n\n        const historyMessages = await getServerConversationHistory(conversationId, options);\n\n        // 检查是否已中断或会话ID已变更\n        if (signal?.aborted || conversationId !== currentConversationId.value) {\n            console.log('加载请求已中断或会话已切换，不更新UI');\n            return false;\n        }\n\n        if (historyMessages.length > 0) {\n            // 如果是重置，直接设置为新消息\n            if (resetPage) {\n                chatList.value = historyMessages;\n            } else {\n                // 否则追加到现有消息的前面\n                chatList.value = [...historyMessages, ...chatList.value];\n            }\n\n            // 判断是否还有更多消息\n            hasMoreMessages.value = historyMessages.length >= pageSize.value;\n\n            // 获取最后一条AI回复的消息ID，用于获取建议问题\n            if (resetPage && historyMessages.length > 0) {\n                // 找出最后一条AI回复的消息\n                const assistantMessages = historyMessages.filter(msg => msg.role === 'assistant' && msg.id);\n                if (assistantMessages.length > 0) {\n                    // 获取最后一条AI消息的ID (移除_assistant后缀)\n                    const lastAssistantMessage = assistantMessages[assistantMessages.length - 1];\n                    const messageId = lastAssistantMessage.id.replace('_assistant', '');\n\n                    // 获取建议问题\n                    fetchSuggestedQuestions(messageId);\n                }\n            }\n        } else {\n            if (resetPage) {\n                chatList.value = []; // 没有消息，清空列表\n            }\n            hasMoreMessages.value = false;\n        }\n\n        // 保存到本地缓存\n        if (chatList.value && Array.isArray(chatList.value) && chatList.value.length > 0) {\n        }\n\n        return true;\n    } catch (error) {\n        console.error('加载对话历史消息失败:', error);\n        // 出错时重置加载状态\n        hasMoreMessages.value = false;\n        if (resetPage) {\n            chatList.value = []; // 出错时清空列表\n        }\n        return false;\n    } finally {\n        // 无论成功失败都重置加载状态\n        loadingMore.value = false;\n        // 重置历史消息加载状态\n        historyLoading.value = false;\n    }\n};\n\n// 使用防抖包装的会话历史加载函数\nconst debouncedLoadHistory = debounce(async (conversationId, controller) => {\n    try {\n        // 检查ID是否与最后点击的一致\n        if (conversationId === currentConversationId.value) {\n            await loadConversationHistory(conversationId, true, controller.signal);\n        }\n    } catch (error) {\n        // 如果是取消错误，忽略它\n        if (error.name !== 'AbortError') {\n            console.error('加载对话内容失败:', error);\n        }\n        // 重置加载状态\n        historyLoading.value = false;\n    } finally {\n        // 仅当这是最新的请求时清除控制器引用\n        if (activeLoadController.value === controller) {\n            activeLoadController.value = null;\n        }\n    }\n}, 300); // 300ms的防抖延迟\n\n// 处理对话选择\nconst handleConversationSelect = async (option) => {\n    const value = option.value;\n\n    // 处理删除选项\n    if (typeof value === 'string' && value.startsWith('delete-')) {\n        const conversationId = value.substring(7); // 去掉\"delete-\"前缀\n\n        // 显示删除确认框\n        currentDeletingId.value = conversationId;\n        showDeleteDialog.value = true;\n\n        return;\n    }\n\n    // 处理新对话选项\n    if (value === 'new') {\n        resetConversationState({\n            currentConversationId,\n            chatList,\n            suggestedQuestions,\n            suggestedQuestionsConversationId,\n            isNewConversation,\n            resetConversationFunc: resetConversation\n        });\n        return;\n    }\n\n    // 处理切换对话\n    if (value !== currentConversationId.value) {\n        // 先清空建议问题列表，触发动画效果\n        suggestedQuestions.value = [];\n        suggestedQuestionsConversationId.value = '';\n        \n        // 先更新会话ID，保证UI立即响应\n        currentConversationId.value = value;\n        // 设置加载状态为true\n        historyLoading.value = true;\n        // 清空当前聊天列表，以便骨架屏显示\n        chatList.value = [];\n        // 设置为非新会话\n        isNewConversation.value = false;\n\n        // 取消之前的计时器（如果存在）\n        if (switchConversationTimer.value) {\n            clearTimeout(switchConversationTimer.value);\n        }\n\n        // 取消之前的加载请求（如果存在）\n        if (activeLoadController.value) {\n            try {\n                activeLoadController.value.abort();\n                console.log('已取消之前的对话加载请求');\n            } catch (error) {\n                console.error('取消之前的请求失败:', error);\n            }\n        }\n\n        // 创建新的控制器\n        const controller = new AbortController();\n        activeLoadController.value = controller;\n\n        // 使用防抖函数加载历史消息\n        debouncedLoadHistory(value, controller);\n    }\n};\n\n// 滚动加载更多历史消息 - 可在页面滚动到顶部时触发\nconst loadMoreHistory = async () => {\n    if (!hasMoreMessages.value || !currentConversationId.value || loadingMore.value) return;\n\n    try {\n        loadingMore.value = true;\n        currentPage.value += 1;\n        await loadConversationHistory(currentConversationId.value, false);\n    } finally {\n        loadingMore.value = false;\n    }\n};\n\n// 处理滚动事件，当滚动到顶部时加载更多历史消息\n\nconst handleScroll = (e) => {\n    // 确保e.detail存在，否则使用默认值\n    const scrollTop = e.detail?.scrollTop || 0;\n    if (scrollTop <= scrollTopThreshold && hasMoreMessages.value && currentConversationId.value && !loadingMore.value) {\n        loadMoreHistory();\n    }\n};\n\n// 滚动到底部\nconst backBottom = () => {\n    scrollChatToBottom(chatRef.value);\n};\n\n// 处理思考内容\nconst handleChange = (value, { index }) => {\n};\n\n// 清空聊天记录\nconst clearConfirm = async function () {\n    // 清除本地存储\n    await clearChatHistory();\n    // 清空聊天记录并重置状态\n    resetConversationState({\n        currentConversationId,\n        chatList,\n        suggestedQuestions,\n        suggestedQuestionsConversationId,\n        isNewConversation,\n        resetConversationFunc: resetConversation\n    });\n};\n\n// 停止请求\nconst onStop = async function () {\n    try {\n        // 防止重复中断\n        if (!loading.value && !isStreamLoad.value) {\n            console.log('请求已经停止，不再执行中断操作');\n            return;\n        }\n\n        // 立即重置状态 - 先更新UI再中断请求\n        loading.value = false;\n        isStreamLoad.value = false;\n        firstTokenReceived.value = true; // 设为true防止显示加载动画\n\n        // 获取最后一条助手消息并添加停止标记\n        const lastItem = chatList.value[0];\n\n        // 处理中断UI更新\n        handleRequestAbort(lastItem, { loading, isStreamLoad });\n\n        // 备份中断函数并立即清空，避免重复调用\n        const abortFunction = fetchCancel.value;\n        fetchCancel.value = null;\n\n        // 备份任务ID并立即清空\n        const taskId = currentTaskId.value;\n        currentTaskId.value = null;\n\n        // 如果有任务ID，优先使用新的API停止流式响应\n        if (taskId) {\n            try {\n                // 使用URL中的userId参数，而不是localStorage中的\n                await stopStreamResponse(taskId, userId);\n            } catch (stopError) {\n                console.error('API停止请求失败:', stopError);\n            }\n        }\n\n        // 最后尝试使用AbortController中断\n        if (abortFunction) {\n            try {\n                abortFunction();\n            } catch (abortError) {\n                console.error('中断请求时出错:', abortError);\n            }\n        }\n    } catch (error) {\n        console.error('停止请求时发生错误:', error);\n        // 出错时也要确保重置状态\n        loading.value = false;\n        isStreamLoad.value = false;\n        fetchCancel.value = null;\n        currentTaskId.value = null;\n    }\n};\n\n// 用户操作\nconst handleOperation = function (type, options) {\n    // 确保options存在并提取index\n    const index = options.index;\n\n    if (type === 'good') {\n        isGood.value = !isGood.value;\n        isBad.value = false;\n    } else if (type === 'bad') {\n        isBad.value = !isBad.value;\n        isGood.value = false;\n    } else if (type === 'replay') {\n        const userQuery = chatList.value[index + 1].content;\n        inputEnter(userQuery);\n    }\n};\n\n// 用户输入\nconst inputEnter = function (inputValue) {\n    if (isStreamLoad.value) {\n        return;\n    }\n\n    // 处理消息格式，支持包含文件的复合消息\n    let messageText = '';\n    let files = [];\n\n    if (typeof inputValue === 'string') {\n        messageText = inputValue;\n    } else if (typeof inputValue === 'object') {\n        messageText = inputValue.message || '';\n        files = inputValue.files || [];\n    }\n\n    if (!messageText && files.length === 0) {\n        return;\n    }\n\n    // 一旦用户发送消息，就不再是新会话\n    isNewConversation.value = false;\n\n    // 添加用户消息\n    const userMessage = createUserMessage(messageText, files);\n    chatList.value.unshift(userMessage);\n\n    // 添加助手消息（空消息占位）\n    // 默认启用推理展示功能，如果API不返回推理内容，也不会显示\n    const assistantMessage = createAssistantMessage(true);\n    chatList.value.unshift(assistantMessage);\n\n    // 发送请求\n    handleModelRequest(messageText, files);\n};\n\n// 处理模型请求\nconst handleModelRequest = async (inputValue, files = []) => {\n    loading.value = true;\n    isStreamLoad.value = true;\n    firstTokenReceived.value = false;\n    currentTaskId.value = null; // 重置任务ID\n    currentMessageId.value = null; // 重置消息ID\n    const lastItem = chatList.value[0];\n\n    // 初始化消息处理函数\n    const {\n        handleReasoningUpdate,\n        handleMessageUpdate,\n        handleFileEvent,\n        handleWorkflowSteps\n    } = useMessageHandlers();\n\n    // 构建消息历史，确保使用正确的当前消息\n    const currentUserMessage = chatList.value[1]?.role === 'user' ? chatList.value[1].content : inputValue;\n\n    const messages = buildMessageHistory(chatList.value, currentUserMessage, systemPrompt.value);\n\n    // 创建请求控制器和超时保护\n    const { controller, signal, abortRequest } = createRequestController();\n    fetchCancel.value = abortRequest;\n\n    try {\n        // 准备请求选项，如果有当前会话ID则使用，否则创建新会话\n        const requestOptions = {\n            signal: signal,\n            conversation_id: currentConversationId.value || '',\n            files: files.length > 0 ? files : undefined\n        };\n\n        await chatWithModel(\n            messages,\n            {\n                // 思考内容\n                onReasoning: (reasoningText) => {\n                    // 检查是否已中断 - 通过检查loading状态替代直接检查signal\n                    if (!loading.value || !isStreamLoad.value) {\n                        return;\n                    }\n\n                    // 使用提取的处理函数\n                    handleReasoningUpdate(lastItem, reasoningText, firstTokenReceived);\n                },\n\n                // 回复内容\n                onMessage: (text) => {\n                    // 检查是否已中断\n                    if (!loading.value || !isStreamLoad.value) {\n                        return;\n                    }\n\n                    // 使用提取的处理函数\n                    handleMessageUpdate(\n                        lastItem,\n                        text,\n                        firstTokenReceived,\n                        isScrolling,\n                        scrollChatToBottom,\n                        chatRef\n                    );\n                },\n\n                // 文件事件处理\n                onFileEvent: (fileData) => {\n                    // 检查是否已中断\n                    if (!loading.value || !isStreamLoad.value) {\n                        return;\n                    }\n\n                    // 使用提取的处理函数\n                    handleFileEvent(lastItem, fileData);\n                },\n\n                // 错误处理\n                onError: (errorMessage) => {\n                    console.error('API请求出错:', errorMessage);\n                    MessagePlugin.error(errorMessage || '请求出错');\n\n                    // 更新UI状态\n                    loading.value = false;\n                    isStreamLoad.value = false;\n                    lastItem.loading = false;\n                    lastItem.isStreamLoad = false;\n                    lastItem.content = `请求失败: ${errorMessage}`;\n                },\n\n                // 完成事件\n                onComplete: (success, message) => {\n                    console.log('请求完成, 成功:', success, message);\n\n                    // 更新UI状态\n                    loading.value = false;\n                    isStreamLoad.value = false;\n\n                    if (lastItem) {\n                        lastItem.loading = false;\n                        lastItem.isStreamLoad = false;\n                    }\n\n                    if (!success) {\n                        console.warn('请求未成功完成:', message);\n                        if (lastItem) {\n                            if (!lastItem.content) {\n                                lastItem.content = `请求未完成: ${message || '未知原因'}`;\n                            }\n                        }\n                    } else {\n                        // 请求成功完成，考虑自动重命名对话\n                        // 只有当有会话ID时才尝试重命名\n                        if (currentConversationId.value) {\n                            // 使用改进的自动重命名函数，带上当前消息列表\n                            autoRenameConversationIfNeeded(currentConversationId.value, {\n                                messages: chatList.value,\n                                onComplete: (newTitle) => {\n                                    if (!newTitle) {\n                                        console.log('自动重命名完成，但未返回标题');\n                                        return;\n                                    }\n\n                                    console.log('自动重命名完成，新标题:', newTitle);\n\n                                    // 更新本地会话列表中的名称\n                                    conversationList.value = conversationList.value.map(conversation => {\n                                        if (conversation.id === currentConversationId.value) {\n                                            return {\n                                                ...conversation,\n                                                name: newTitle\n                                            };\n                                        }\n                                        return conversation;\n                                    });\n                                }\n                            }).catch(error => {\n                                console.error('自动重命名过程出错:', error);\n                            });\n                        }\n                    }\n\n                    // 刷新UI\n                    nextTick(() => {\n                        if (chatRef.value) {\n                            scrollChatToBottom(chatRef.value, true);\n                        }\n                    });\n                },\n\n                // 会话ID变更\n                onConversationIdChange: (id) => {\n                    console.log('会话ID更新:', id);\n                    if (id && id !== currentConversationId.value) {\n                        currentConversationId.value = id;\n                        // 确保会话列表是最新的\n                        loadConversationListDebounce();\n                    }\n                },\n\n                // 消息ID变更\n                onMessageIdChange: (id) => {\n                    currentMessageId.value = id;\n                    // 在消息完成后获取建议问题\n                    if (id && lastItem && lastItem.role === 'assistant') {\n                        getSuggestedQuestionsDebounce(id);\n                    }\n                },\n\n                // 任务ID变更\n                onTaskIdChange: (id) => {\n                    currentTaskId.value = id;\n                },\n\n                // 添加：处理工作流步骤的回调\n                onWorkflowSteps: (steps) => {\n                    // 使用提取的处理函数\n                    handleWorkflowSteps(steps, chatList, loading, firstTokenReceived);\n                }\n            },\n            requestOptions\n        );\n    } catch (err) {\n        console.error('聊天请求失败:', err);\n        loading.value = false;\n        isStreamLoad.value = false;\n\n        // 更新最后一条消息为错误信息\n        if (lastItem) {\n            lastItem.loading = false;\n            lastItem.isStreamLoad = false;\n            lastItem.content = `聊天请求失败: ${err.message || '未知错误'}`;\n        }\n\n        // 显示错误提示\n        MessagePlugin.error('聊天请求失败: ' + (err.message || '未知错误'));\n    }\n};\n\n// 加载更多会话\nconst loadMoreConversations = async () => {\n    if (!hasMoreConversations.value || loadingMoreConversations.value) return;\n\n    try {\n        loadingMoreConversations.value = true;\n\n        // 获取最后一个会话的ID作为last_id\n        const lastId = conversationList.value.length > 0\n            ? conversationList.value[conversationList.value.length - 1].id\n            : null;\n\n        if (!lastId) {\n            hasMoreConversations.value = false;\n            return;\n        }\n\n        // 获取更多会话，每次固定加载20条\n        const moreConversations = await getServerConversations({\n            last_id: lastId,\n            limit: 20,\n            sort_by: '-updated_at'\n        });\n\n        if (moreConversations && Array.isArray(moreConversations) && moreConversations.length > 0) {\n            // 合并会话列表\n            conversationList.value = [...conversationList.value, ...moreConversations];\n\n            // 判断是否还有更多对话可加载\n            hasMoreConversations.value = moreConversations.length >= 20;\n        } else {\n            hasMoreConversations.value = false;\n        }\n    } catch (error) {\n        console.error('加载更多会话失败:', error);\n    } finally {\n        loadingMoreConversations.value = false;\n    }\n};\n\n// 处理新建对话\nconst handleNewConversation = () => {\n    resetConversationState({\n        currentConversationId,\n        chatList,\n        suggestedQuestions,\n        suggestedQuestionsConversationId,\n        isNewConversation,\n        resetConversationFunc: resetConversation\n    });\n};\n\n// 处理对话重命名\nconst handleRenameConversation = async ({ conversationId, name }) => {\n    try {\n        // 调用重命名API\n        const result = await renameConversation(conversationId, { name });\n\n        // 更新本地会话列表中的名称\n        conversationList.value = conversationList.value.map(conversation => {\n            if (conversation.id === conversationId) {\n                return {\n                    ...conversation,\n                    name: result.name || name\n                };\n            }\n            return conversation;\n        });\n\n    } catch (error) {\n        console.error('重命名对话失败:', error);\n        // 显示错误消息\n    }\n};\n\n// 处理对话置顶\nconst handlePinConversation = ({ conversationId }) => {\n    // 查找要置顶的对话\n    const conversation = conversationList.value.find(c => c.id === conversationId);\n    if (!conversation) return;\n\n    // 从列表中移除\n    conversationList.value = conversationList.value.filter(c => c.id !== conversationId);\n\n    // 添加到列表开头\n    conversationList.value.unshift(conversation);\n};\n\n// 显示重命名对话框\nconst showRenameDialogFor = ({ conversationId }) => {\n    currentEditingId.value = conversationId;\n\n    // 找到当前对话\n    const conversation = conversationList.value.find(c => c.id === conversationId);\n    if (conversation) {\n        renameInput.value = conversation.name || getConversationTitle(conversation, 100);\n    }\n\n    showRenameDialog.value = true;\n};\n\n// 确认重命名\nconst confirmRename = () => {\n    if (currentEditingId.value && renameInput.value.trim()) {\n        handleRenameConversation({\n            conversationId: currentEditingId.value,\n            name: renameInput.value.trim()\n        });\n    }\n    showRenameDialog.value = false;\n    renameInput.value = '';\n    currentEditingId.value = '';\n};\n\n// 取消重命名\nconst cancelRename = () => {\n    showRenameDialog.value = false;\n    renameInput.value = '';\n    currentEditingId.value = '';\n};\n\n// 确认删除对话\nconst confirmDelete = async () => {\n    if (!currentDeletingId.value) {\n        showDeleteDialog.value = false;\n        return;\n    }\n\n    try {\n        // 调用API删除对话\n        const result = await deleteConversation(currentDeletingId.value);\n\n        // 从本地列表中移除\n        conversationList.value = conversationList.value.filter(c => c.id !== currentDeletingId.value);\n\n        // 如果删除的是当前对话，切换到新对话\n        if (currentConversationId.value === currentDeletingId.value) {\n            resetConversationState({\n                currentConversationId,\n                chatList,\n                suggestedQuestions,\n                suggestedQuestionsConversationId,\n                isNewConversation,\n                resetConversationFunc: resetConversation\n            });\n        }\n    } catch (error) {\n        console.error('删除对话失败:', error);\n        // 可以在这里添加错误提示\n    } finally {\n        // 关闭对话框并清除状态\n        showDeleteDialog.value = false;\n        currentDeletingId.value = '';\n    }\n};\n\n// 取消删除对话\nconst cancelDelete = () => {\n    showDeleteDialog.value = false;\n    currentDeletingId.value = '';\n};\n\n// 处理点击建议问题\nconst handleSuggestedQuestion = (question) => {\n    // 使用选择的建议问题\n    inputEnter(question);\n    // 清空建议问题列表，动画效果通过v-if和transition实现\n    suggestedQuestions.value = [];\n    suggestedQuestionsConversationId.value = '';\n};\n\n// 获取AI建议问题\nconst fetchSuggestedQuestions = async (messageId) => {\n    if (!messageId) return;\n\n    try {\n        const questions = await getSuggestedQuestions(messageId);\n        if (questions && Array.isArray(questions) && questions.length > 0) {\n            suggestedQuestions.value = questions;\n            suggestedQuestionsConversationId.value = currentConversationId.value;\n        } else {\n            suggestedQuestions.value = [];\n        }\n    } catch (error) {\n        console.error('获取建议问题失败:', error);\n        suggestedQuestions.value = [];\n    }\n};\n\n// 创建防抖函数\nconst getSuggestedQuestionsDebounce = debounce((messageId) => {\n    fetchSuggestedQuestions(messageId);\n}, 300);\n\n// 用于会话列表加载的防抖函数\nconst loadConversationListDebounce = debounce(async () => {\n    try {\n        const conversations = await getServerConversations({\n            limit: 20,\n            sort_by: '-updated_at'\n        });\n        if (conversations && Array.isArray(conversations)) {\n            conversationList.value = conversations;\n            hasMoreConversations.value = conversations.length >= 20;\n        }\n    } catch (error) {\n        console.error('刷新会话列表失败:', error);\n    }\n}, 500);\n\n// 切换侧边栏显示状态\nconst toggleSidebar = () => {\n    showConversationDrawer.value = !showConversationDrawer.value;\n};\n\n// 添加组件卸载时的清理函数\nonUnmounted(() => {\n    // 清理定时器\n    if (switchConversationTimer.value) {\n        clearTimeout(switchConversationTimer.value);\n    }\n\n    // 取消进行中的请求\n    if (activeLoadController.value) {\n        activeLoadController.value.abort();\n    }\n});\n\n// 处理模型切换事件\nconst handleModelChanged = (payload: { modelId: string; model: object }) => {\n    console.log('模型已切换，立即显示加载状态并准备加载新数据:', payload);\n    // 立即设置加载状态并清空列表，以显示骨架屏\n    historyLoading.value = true;\n    conversationListLoading.value = true; // 同时设置侧边栏加载状态\n    chatList.value = [];\n    // 清空建议问题\n    suggestedQuestions.value = [];\n    suggestedQuestionsConversationId.value = '';\n    \n    // 切换模型后，重新初始化聊天数据，这会加载会话列表并可能切换到默认会话\n    // initChatData 内部会处理 historyLoading = false 的逻辑\n    initChatData();\n};\n\n</script>\n\n<style lang=\"scss\">\n@use '/static/styles/index.scss';\n@use '/static/styles/animations.scss';\n@use '/static/styles/responsive.scss' as responsive;\n@import '/static/styles/variables.scss';\n\n.app-container {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    min-height: 100%;\n    transition: all 0.3s ease;\n    display: flex;\n    flex-direction: row;\n    background-color: var(--td-bg-color-container);\n}\n\n/* 主内容区域，包含header和聊天区域 */\n.main-content {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    transition: margin-left 0.3s ease;\n    width: 100%;\n\n    &.sidebar-open {\n        margin-left: 280px;\n\n        @include responsive.breakpoint-down(\"sm\") {\n            margin-left: 0;\n        }\n    }\n\n    &.sidebar-closed {\n        margin-left: 0;\n    }\n}\n\n/* 聊天容器的包装器，用于水平居中 */\n.chat-wrapper {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    flex: 1;\n    overflow: auto;\n    transition: width 0.3s ease;\n}\n\n.chat-container {\n    flex: 1;\n    @include responsive.container-width;\n    height: auto;\n    padding: 0 $size-2 $comp-margin-l;\n    transition: all 0.3s ease, padding 0.3s ease, width 0.3s ease;\n    overflow-x: hidden;\n    overflow-y: auto;\n\n    @include responsive.breakpoint-down(\"sm\") {\n        padding: 0 $size-1 $comp-margin-m;\n    }\n\n    .t-space {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .t-chat-item {\n        transition: transform 0.2s ease, box-shadow 0.3s ease;\n        border-radius: $radius-medium;\n        max-width: 92%;\n        margin: 8px 0;\n\n        @include responsive.breakpoint-down(\"xs\") {\n            max-width: 98%;\n        }\n\n        &:hover {\n            transform: translateY(-$size-1);\n            box-shadow: $shadow-2;\n        }\n    }\n\n    /* 确保Markdown标题样式正确 */\n    :deep(.t-chat-content),\n    :deep(.t-chat__content) {\n\n        h1,\n        h2,\n        h3,\n        h4,\n        h5,\n        h6 {\n            margin-top: 0 !important;\n            margin-bottom: 8px !important;\n            padding: 0 !important;\n            line-height: 1.2 !important;\n        }\n\n        /* 优化代码块显示 */\n        pre {\n            border-radius: 8px;\n            overflow-x: auto;\n            margin: 10px 0;\n            background-color: rgba(0, 0, 0, 0.05);\n            padding: 12px;\n\n            /* 暗色模式适配 */\n            [theme-mode=\"dark\"] & {\n                background-color: rgba(255, 255, 255, 0.05);\n            }\n\n            code {\n                font-family: 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n                font-size: 13px;\n            }\n        }\n\n        /* 优化图片显示 */\n        img {\n            max-width: 100%;\n            border-radius: 6px;\n            margin: 8px 0;\n        }\n\n        /* 优化表格样式 */\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            margin: 10px 0;\n\n            th,\n            td {\n                border: 1px solid #eee;\n                padding: 8px 12px;\n\n                @include responsive.breakpoint-down(\"xs\") {\n                    padding: 6px 8px;\n                }\n\n                /* 暗色模式适配 */\n                [theme-mode=\"dark\"] & {\n                    border-color: #333;\n                }\n            }\n\n            th {\n                background-color: rgba(0, 0, 0, 0.03);\n\n                /* 暗色模式适配 */\n                [theme-mode=\"dark\"] & {\n                    background-color: rgba(255, 255, 255, 0.05);\n                }\n            }\n        }\n    }\n}\n\n.dialog-content {\n    font-size: $font-size-body-medium;\n}\n\n/* 聊天输入框样式优化 */\n.t-chat-input {\n    @include responsive.responsive-spacing('margin-top', 10px);\n    padding: 0 16px 16px;\n    @include animations.smooth-transition;\n\n    @include responsive.breakpoint-down(\"sm\") {\n        padding: 0 10px 10px;\n    }\n\n    .t-textarea__inner {\n        min-height: 40px !important;\n        height: 40px !important;\n        line-height: 20px !important;\n        padding: 10px 12px;\n        border-radius: 20px;\n        @include animations.smooth-transition;\n\n        &:focus {\n            box-shadow: 0 0 0 2px rgba(var(--td-brand-color), 0.2);\n        }\n    }\n\n    /* 输入框按钮样式优化 */\n    .t-textarea__suffix {\n        .t-button {\n            border-radius: 50%;\n            min-width: 36px;\n            width: 36px;\n            height: 36px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n\n            .t-icon {\n                font-size: 18px;\n            }\n        }\n    }\n}\n\n.loading-space {\n    margin-top: $size-3;\n    margin-left: $size-4;\n    @include animations.smooth-transition;\n}\n\n/* 建议问题样式优化 */\n.suggested-questions-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    margin-bottom: $comp-margin-xs;\n    padding: 0 $comp-margin-s;\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n    @include animations.smooth-transition;\n\n    &::-webkit-scrollbar {\n        display: none;\n    }\n}\n\n.suggested-questions {\n    display: flex;\n    flex-wrap: nowrap;\n    padding: $comp-margin-xs 0;\n    gap: $comp-margin-s;\n    justify-content: flex-start;\n    white-space: nowrap;\n    width: max-content;\n    @include animations.smooth-transition;\n}\n\n.question-tag {\n    cursor: pointer;\n    margin-bottom: 0;\n    @include animations.hover-lift;\n    padding: 6px 12px;\n    font-size: 14px;\n    border-radius: 16px;\n\n    @include responsive.breakpoint-down(\"xs\") {\n        padding: 4px 8px;\n        font-size: 13px;\n    }\n}\n\n/* 对话框样式优化 */\n.t-dialog {\n    border-radius: 12px;\n    overflow: hidden;\n\n    @include responsive.breakpoint-down(\"sm\") {\n        width: 90% !important;\n    }\n\n    .t-dialog__header {\n        padding: 20px 24px;\n        border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n\n        @include responsive.breakpoint-down(\"sm\") {\n            padding: 16px 20px;\n        }\n    }\n\n    .t-dialog__body {\n        padding: 24px;\n\n        @include responsive.breakpoint-down(\"sm\") {\n            padding: 16px;\n        }\n    }\n\n    .t-dialog__footer {\n        padding: 16px 24px;\n        border-top: 1px solid rgba(0, 0, 0, 0.05);\n\n        @include responsive.breakpoint-down(\"sm\") {\n            padding: 12px 16px;\n        }\n    }\n\n    .t-button {\n        border-radius: 8px;\n        padding: 0 16px;\n    }\n}\n\n/* 适应黑暗主题 */\n[theme-mode=\"dark\"] {\n    .app-container {\n        background-color: var(--td-bg-color-container);\n    }\n\n    .t-chat-item {\n        &:hover {\n            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n        }\n    }\n\n    .dialog-content {\n        color: var(--td-text-color-primary);\n    }\n\n    .t-dialog {\n        .t-dialog__header {\n            border-bottom-color: rgba(255, 255, 255, 0.05);\n        }\n\n        .t-dialog__footer {\n            border-top-color: rgba(255, 255, 255, 0.05);\n        }\n    }\n}\n</style>"],"file":"assets/index.D657WQOy.js"}